
actuatoMod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c23c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800c350  0800c350  0001c350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c938  0800c938  0002068c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c938  0800c938  0002068c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c938  0800c938  0002068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c938  0800c938  0001c938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c93c  0800c93c  0001c93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000068c  20000000  0800c940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000268c  2000068c  0800cfcc  0002068c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002d18  0800cfcc  00022d18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ec2f  00000000  00000000  000206b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000063e9  00000000  00000000  0004f2e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001992a  00000000  00000000  000556cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001498  00000000  00000000  0006eff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003688  00000000  00000000  00070490  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001ad83  00000000  00000000  00073b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001a1d7  00000000  00000000  0008e89b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000850fc  00000000  00000000  000a8a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0012db6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005aa4  00000000  00000000  0012dbec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         00000084  00000000  00000000  00133690  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000117  00000000  00000000  00133714  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000068c 	.word	0x2000068c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c334 	.word	0x0800c334

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000690 	.word	0x20000690
 800014c:	0800c334 	.word	0x0800c334

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800115c:	b570      	push	{r4, r5, r6, lr}
  hcan.Init.Prescaler = 5;
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 800115e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  hcan.Init.Prescaler = 5;
 8001162:	2605      	movs	r6, #5
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001164:	2200      	movs	r2, #0
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8001166:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 800116a:	f44f 3400 	mov.w	r4, #131072	; 0x20000
  hcan.Instance = CAN1;
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_CAN_Init+0x3c>)
 8001170:	480a      	ldr	r0, [pc, #40]	; (800119c <MX_CAN_Init+0x40>)
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001172:	6199      	str	r1, [r3, #24]
  hcan.Instance = CAN1;
 8001174:	e9c3 0600 	strd	r0, r6, [r3]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001178:	4618      	mov	r0, r3
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800117a:	609d      	str	r5, [r3, #8]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 800117c:	611c      	str	r4, [r3, #16]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800117e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001180:	615a      	str	r2, [r3, #20]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001182:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001184:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001186:	f000 fe03 	bl	8001d90 <HAL_CAN_Init>
 800118a:	b900      	cbnz	r0, 800118e <MX_CAN_Init+0x32>
  {
    Error_Handler();
  }

}
 800118c:	bd70      	pop	{r4, r5, r6, pc}
 800118e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8001192:	f000 ba4b 	b.w	800162c <Error_Handler>
 8001196:	bf00      	nop
 8001198:	20000a5c 	.word	0x20000a5c
 800119c:	40006400 	.word	0x40006400

080011a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80011a0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN1)
 80011a4:	6802      	ldr	r2, [r0, #0]
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_CAN_MspInit+0x80>)
{
 80011a8:	b087      	sub	sp, #28
  if(canHandle->Instance==CAN1)
 80011aa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80011b0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(canHandle->Instance==CAN1)
 80011b4:	d001      	beq.n	80011ba <HAL_CAN_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011b6:	b007      	add	sp, #28
 80011b8:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011be:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80011c2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011c6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80011ca:	61da      	str	r2, [r3, #28]
 80011cc:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011ce:	f44f 5580 	mov.w	r5, #4096	; 0x1000
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011d2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	f042 0204 	orr.w	r2, r2, #4
 80011e0:	619a      	str	r2, [r3, #24]
 80011e2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011e4:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f001 fb07 	bl	8002808 <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fa:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	a902      	add	r1, sp, #8
 8001200:	4808      	ldr	r0, [pc, #32]	; (8001224 <HAL_CAN_MspInit+0x84>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001202:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	e9cd 5202 	strd	r5, r2, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f001 fafe 	bl	8002808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800120c:	4622      	mov	r2, r4
 800120e:	2105      	movs	r1, #5
 8001210:	2014      	movs	r0, #20
 8001212:	f001 f92b 	bl	800246c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001216:	2014      	movs	r0, #20
 8001218:	f001 f95e 	bl	80024d8 <HAL_NVIC_EnableIRQ>
}
 800121c:	b007      	add	sp, #28
 800121e:	bd30      	pop	{r4, r5, pc}
 8001220:	40006400 	.word	0x40006400
 8001224:	40010800 	.word	0x40010800

08001228 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001228:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_CRC_Init+0x1c>)
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <MX_CRC_Init+0x20>)
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800122e:	4618      	mov	r0, r3
  hcrc.Instance = CRC;
 8001230:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001232:	f001 f977 	bl	8002524 <HAL_CRC_Init>
 8001236:	b900      	cbnz	r0, 800123a <MX_CRC_Init+0x12>
  {
    Error_Handler();
  }

}
 8001238:	bd08      	pop	{r3, pc}
 800123a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800123e:	f000 b9f5 	b.w	800162c <Error_Handler>
 8001242:	bf00      	nop
 8001244:	20000a84 	.word	0x20000a84
 8001248:	40023000 	.word	0x40023000

0800124c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 800124c:	6802      	ldr	r2, [r0, #0]
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_CRC_MspInit+0x28>)
 8001250:	429a      	cmp	r2, r3
 8001252:	d000      	beq.n	8001256 <HAL_CRC_MspInit+0xa>
 8001254:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001256:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800125a:	695a      	ldr	r2, [r3, #20]
{
 800125c:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800125e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800126e:	b002      	add	sp, #8
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023000 	.word	0x40023000

08001278 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <MX_DMA_Init+0x30>)
{
 800127a:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127c:	6958      	ldr	r0, [r3, #20]
{
 800127e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001280:	f040 0001 	orr.w	r0, r0, #1
 8001284:	6158      	str	r0, [r3, #20]
 8001286:	695b      	ldr	r3, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001288:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001290:	2105      	movs	r1, #5
 8001292:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001294:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001296:	f001 f8e9 	bl	800246c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800129a:	200e      	movs	r0, #14

}
 800129c:	b003      	add	sp, #12
 800129e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80012a2:	f001 b919 	b.w	80024d8 <HAL_NVIC_EnableIRQ>
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000

080012ac <sensorTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensorTaskFunc */
void sensorTaskFunc(void const * argument)
{
 80012ac:	b510      	push	{r4, lr}
 80012ae:	b082      	sub	sp, #8
  /* USER CODE BEGIN sensorTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 80012b0:	f005 fbfe 	bl	8006ab0 <xTaskGetTickCount>
 80012b4:	ac02      	add	r4, sp, #8
 80012b6:	f844 0d04 	str.w	r0, [r4, #-4]!


	  /* Infinite loop */
		for(;;)
		{
			readSensors();
 80012ba:	f006 fc47 	bl	8007b4c <readSensors>
//		    int32_t c2=HAL_GetTick();
//			readIMU();
//		    int32_t c3=HAL_GetTick();
//			readLaser();
//		    int32_t c4=HAL_GetTick();
			canSend();
 80012be:	f006 fcff 	bl	8007cc0 <canSend>
//			int32_t c5=HAL_GetTick();

		//    Usart_TerminalHandler();

		    vTaskDelayUntil(&xLastWakeTime,sensorTaskPeriod);
 80012c2:	2114      	movs	r1, #20
 80012c4:	4620      	mov	r0, r4
 80012c6:	f005 fd2f 	bl	8006d28 <vTaskDelayUntil>
 80012ca:	e7f6      	b.n	80012ba <sensorTaskFunc+0xe>
 80012cc:	0000      	movs	r0, r0
	...

080012d0 <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
 80012d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		  extern float testDistance[];
	//	  extern float firrange;
	  /* Infinite loop */
		for(;;)
		{
	      printf("Time:%d ms, CanID:%x,  Pressure: %d KPa, Distance: %d mm, Quaternion: %1.5f %1.5f %1.5f %1.5f\r\n",
 80012d4:	a728      	add	r7, pc, #160	; (adr r7, 8001378 <sendTaskFunc+0xa8>)
 80012d6:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 80012da:	b08f      	sub	sp, #60	; 0x3c
	TickType_t xLastWakeTime=xTaskGetTickCount();
 80012dc:	f005 fbe8 	bl	8006ab0 <xTaskGetTickCount>
 80012e0:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80012e4:	f848 0d04 	str.w	r0, [r8, #-4]!
 80012e8:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8001388 <sendTaskFunc+0xb8>
 80012ec:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800138c <sendTaskFunc+0xbc>
 80012f0:	4c23      	ldr	r4, [pc, #140]	; (8001380 <sendTaskFunc+0xb0>)
 80012f2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001390 <sendTaskFunc+0xc0>
 80012f6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	      printf("Time:%d ms, CanID:%x,  Pressure: %d KPa, Distance: %d mm, Quaternion: %1.5f %1.5f %1.5f %1.5f\r\n",
 80012fa:	f000 fd31 	bl	8001d60 <HAL_GetTick>
 80012fe:	4680      	mov	r8, r0
 8001300:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8001304:	f7ff f87e 	bl	8000404 <__aeabi_i2d>
 8001308:	4632      	mov	r2, r6
 800130a:	463b      	mov	r3, r7
 800130c:	f7ff f8e4 	bl	80004d8 <__aeabi_dmul>
 8001310:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001314:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8001318:	f7ff f874 	bl	8000404 <__aeabi_i2d>
 800131c:	4632      	mov	r2, r6
 800131e:	463b      	mov	r3, r7
 8001320:	f7ff f8da 	bl	80004d8 <__aeabi_dmul>
 8001324:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001328:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 800132c:	f7ff f86a 	bl	8000404 <__aeabi_i2d>
 8001330:	4632      	mov	r2, r6
 8001332:	463b      	mov	r3, r7
 8001334:	f7ff f8d0 	bl	80004d8 <__aeabi_dmul>
 8001338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800133c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8001340:	f7ff f860 	bl	8000404 <__aeabi_i2d>
 8001344:	4632      	mov	r2, r6
 8001346:	463b      	mov	r3, r7
 8001348:	f7ff f8c6 	bl	80004d8 <__aeabi_dmul>
	    		  HAL_GetTick(),
	    		  (uint16_t)(canbus.TxHeader.StdId),
				  laserDis,
				  sensorDataRx.distance,
 800134c:	f899 5001 	ldrb.w	r5, [r9, #1]
	      printf("Time:%d ms, CanID:%x,  Pressure: %d KPa, Distance: %d mm, Quaternion: %1.5f %1.5f %1.5f %1.5f\r\n",
 8001350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001354:	086d      	lsrs	r5, r5, #1
 8001356:	4641      	mov	r1, r8
 8001358:	f8bb 3000 	ldrh.w	r3, [fp]
 800135c:	f8ba 2028 	ldrh.w	r2, [sl, #40]	; 0x28
 8001360:	9500      	str	r5, [sp, #0]
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <sendTaskFunc+0xb4>)
 8001364:	f007 fc2e 	bl	8008bc4 <iprintf>
	// 			  (int)((round)(RangeData.range_mm*100)),
	//			  sensorData.distance,
	//			  (int)((round)(filteredrange))*100,
	//			  (int)((round)(testDistance[1]*100))
	// 			  );
		  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
 8001368:	2132      	movs	r1, #50	; 0x32
 800136a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800136c:	f005 fcdc 	bl	8006d28 <vTaskDelayUntil>
 8001370:	e7c3      	b.n	80012fa <sendTaskFunc+0x2a>
 8001372:	bf00      	nop
 8001374:	f3af 8000 	nop.w
 8001378:	711040c6 	.word	0x711040c6
 800137c:	3effffff 	.word	0x3effffff
 8001380:	20002c9c 	.word	0x20002c9c
 8001384:	0800c398 	.word	0x0800c398
 8001388:	20002c90 	.word	0x20002c90
 800138c:	20002cac 	.word	0x20002cac
 8001390:	20002c94 	.word	0x20002c94

08001394 <vApplicationGetIdleTaskMemory>:
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001394:	2380      	movs	r3, #128	; 0x80
{
 8001396:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001398:	4d03      	ldr	r5, [pc, #12]	; (80013a8 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800139a:	4c04      	ldr	r4, [pc, #16]	; (80013ac <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800139c:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800139e:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80013a0:	6013      	str	r3, [r2, #0]
}                   
 80013a2:	bc30      	pop	{r4, r5}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200008a8 	.word	0x200008a8
 80013ac:	200006a8 	.word	0x200006a8

080013b0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80013b0:	b570      	push	{r4, r5, r6, lr}
  osThreadStaticDef(sensorTask, sensorTaskFunc, osPriorityAboveNormal, 0, 1024, sensorTaskBuffer, &sensorTaskControlBlock);
 80013b2:	4c10      	ldr	r4, [pc, #64]	; (80013f4 <MX_FREERTOS_Init+0x44>)
void MX_FREERTOS_Init(void) {
 80013b4:	b08e      	sub	sp, #56	; 0x38
  osThreadStaticDef(sensorTask, sensorTaskFunc, osPriorityAboveNormal, 0, 1024, sensorTaskBuffer, &sensorTaskControlBlock);
 80013b6:	466d      	mov	r5, sp
 80013b8:	4626      	mov	r6, r4
 80013ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013be:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80013c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 80013c6:	2100      	movs	r1, #0
 80013c8:	4668      	mov	r0, sp
 80013ca:	f005 f959 	bl	8006680 <osThreadCreate>
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <MX_FREERTOS_Init+0x48>)
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 1024, sendTaskBuffer, &sendTaskControlBlock);
 80013d0:	ad07      	add	r5, sp, #28
 80013d2:	341c      	adds	r4, #28
  sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 80013d4:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 1024, sendTaskBuffer, &sendTaskControlBlock);
 80013d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 80013e2:	2100      	movs	r1, #0
 80013e4:	a807      	add	r0, sp, #28
 80013e6:	f005 f94b 	bl	8006680 <osThreadCreate>
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <MX_FREERTOS_Init+0x4c>)
 80013ec:	6018      	str	r0, [r3, #0]
}
 80013ee:	b00e      	add	sp, #56	; 0x38
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
 80013f2:	bf00      	nop
 80013f4:	0800c350 	.word	0x0800c350
 80013f8:	20001ae0 	.word	0x20001ae0
 80013fc:	20001ae4 	.word	0x20001ae4

08001400 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001400:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	2400      	movs	r4, #0
{
 8001404:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800140a:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|LASER_D1_Pin, GPIO_PIN_RESET);
 8001410:	4d21      	ldr	r5, [pc, #132]	; (8001498 <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001412:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, D3_Pin|LASER_D1_Pin, GPIO_PIN_RESET);
 8001414:	4628      	mov	r0, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001416:	f042 0220 	orr.w	r2, r2, #32
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	6999      	ldr	r1, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, D3_Pin|LASER_D1_Pin, GPIO_PIN_RESET);
 800141e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	f001 0120 	and.w	r1, r1, #32
 8001424:	9101      	str	r1, [sp, #4]
 8001426:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	6999      	ldr	r1, [r3, #24]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = D3_Pin|LASER_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2602      	movs	r6, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	f041 0108 	orr.w	r1, r1, #8
 8001430:	6199      	str	r1, [r3, #24]
 8001432:	6999      	ldr	r1, [r3, #24]
 8001434:	f001 0108 	and.w	r1, r1, #8
 8001438:	9102      	str	r1, [sp, #8]
 800143a:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	6999      	ldr	r1, [r3, #24]
 800143e:	f041 0104 	orr.w	r1, r1, #4
 8001442:	6199      	str	r1, [r3, #24]
 8001444:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, D3_Pin|LASER_D1_Pin, GPIO_PIN_RESET);
 8001446:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	9303      	str	r3, [sp, #12]
 8001450:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, D3_Pin|LASER_D1_Pin, GPIO_PIN_RESET);
 8001452:	f001 fad9 	bl	8002a08 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = D3_Pin|LASER_D1_Pin;
 8001458:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	4628      	mov	r0, r5
 800145e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	e9cd 3606 	strd	r3, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f001 f9ce 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_INT1_Pin;
 800146c:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <MX_GPIO_Init+0x9c>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(LASER_INT1_GPIO_Port, &GPIO_InitStruct);
 8001472:	a904      	add	r1, sp, #16
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001476:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800147a:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(LASER_INT1_GPIO_Port, &GPIO_InitStruct);
 800147c:	f001 f9c4 	bl	8002808 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001480:	4622      	mov	r2, r4
 8001482:	2105      	movs	r1, #5
 8001484:	2017      	movs	r0, #23
 8001486:	f000 fff1 	bl	800246c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800148a:	2017      	movs	r0, #23
 800148c:	f001 f824 	bl	80024d8 <HAL_NVIC_EnableIRQ>

}
 8001490:	b008      	add	sp, #32
 8001492:	bd70      	pop	{r4, r5, r6, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	40010c00 	.word	0x40010c00
 800149c:	10110000 	.word	0x10110000
 80014a0:	40010800 	.word	0x40010800

080014a4 <MX_I2C2_Init>:
void MX_I2C2_Init(void)
{

  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 400000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a4:	2200      	movs	r2, #0
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
{
 80014aa:	b538      	push	{r3, r4, r5, lr}
  hi2c2.Instance = I2C2;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_I2C2_Init+0x34>)
 80014ae:	4d0b      	ldr	r5, [pc, #44]	; (80014dc <MX_I2C2_Init+0x38>)
  hi2c2.Init.ClockSpeed = 400000;
 80014b0:	4c0b      	ldr	r4, [pc, #44]	; (80014e0 <MX_I2C2_Init+0x3c>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014b2:	4618      	mov	r0, r3
  hi2c2.Init.OwnAddress1 = 0;
 80014b4:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hi2c2.Init.OwnAddress2 = 0;
 80014b8:	e9c3 2205 	strd	r2, r2, [r3, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014bc:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hi2c2.Init.ClockSpeed = 400000;
 80014c0:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c4:	6119      	str	r1, [r3, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014c6:	f001 fbdb 	bl	8002c80 <HAL_I2C_Init>
 80014ca:	b900      	cbnz	r0, 80014ce <MX_I2C2_Init+0x2a>
  {
    Error_Handler();
  }

}
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
 80014ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80014d2:	f000 b8ab 	b.w	800162c <Error_Handler>
 80014d6:	bf00      	nop
 80014d8:	20002b3c 	.word	0x20002b3c
 80014dc:	40005800 	.word	0x40005800
 80014e0:	00061a80 	.word	0x00061a80

080014e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014e4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C2)
 80014e8:	6802      	ldr	r2, [r0, #0]
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <HAL_I2C_MspInit+0x90>)
{
 80014ec:	b086      	sub	sp, #24
  if(i2cHandle->Instance==I2C2)
 80014ee:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80014f4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(i2cHandle->Instance==I2C2)
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_MspInit+0x1a>
    __HAL_RCC_I2C2_FORCE_RESET();
    HAL_Delay(2);
    __HAL_RCC_I2C2_RELEASE_RESET();
  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014fa:	b006      	add	sp, #24
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014fe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001502:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001504:	2612      	movs	r6, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4d1c      	ldr	r5, [pc, #112]	; (8001578 <HAL_I2C_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	69ab      	ldr	r3, [r5, #24]
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	61ab      	str	r3, [r5, #24]
 8001512:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001514:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	4817      	ldr	r0, [pc, #92]	; (800157c <HAL_I2C_MspInit+0x98>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001520:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001522:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	f001 f970 	bl	8002808 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001528:	69eb      	ldr	r3, [r5, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800152a:	4622      	mov	r2, r4
    __HAL_RCC_I2C2_CLK_ENABLE();
 800152c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001530:	61eb      	str	r3, [r5, #28]
 8001532:	69eb      	ldr	r3, [r5, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001534:	2105      	movs	r1, #5
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800153c:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800153e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001540:	f000 ff94 	bl	800246c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001544:	2021      	movs	r0, #33	; 0x21
 8001546:	f000 ffc7 	bl	80024d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800154a:	4622      	mov	r2, r4
 800154c:	2105      	movs	r1, #5
 800154e:	2022      	movs	r0, #34	; 0x22
 8001550:	f000 ff8c 	bl	800246c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001554:	2022      	movs	r0, #34	; 0x22
 8001556:	f000 ffbf 	bl	80024d8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_FORCE_RESET();
 800155a:	692b      	ldr	r3, [r5, #16]
    HAL_Delay(2);
 800155c:	2002      	movs	r0, #2
    __HAL_RCC_I2C2_FORCE_RESET();
 800155e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001562:	612b      	str	r3, [r5, #16]
    HAL_Delay(2);
 8001564:	f000 fc02 	bl	8001d6c <HAL_Delay>
    __HAL_RCC_I2C2_RELEASE_RESET();
 8001568:	692b      	ldr	r3, [r5, #16]
 800156a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800156e:	612b      	str	r3, [r5, #16]
}
 8001570:	b006      	add	sp, #24
 8001572:	bd70      	pop	{r4, r5, r6, pc}
 8001574:	40005800 	.word	0x40005800
 8001578:	40021000 	.word	0x40021000
 800157c:	40010c00 	.word	0x40010c00

08001580 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001580:	2220      	movs	r2, #32
{
 8001582:	b530      	push	{r4, r5, lr}
 8001584:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001586:	2100      	movs	r1, #0
 8001588:	eb0d 0002 	add.w	r0, sp, r2
 800158c:	f006 fc7a 	bl	8007e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	2400      	movs	r4, #0

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001592:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001598:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800159c:	e9cd 4205 	strd	r4, r2, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a4:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80015ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f003 f8b4 	bl	800471c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b4:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ba:	a801      	add	r0, sp, #4
 80015bc:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015be:	e9cd 5402 	strd	r5, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c2:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c6:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015c8:	f003 faa0 	bl	8004b0c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80015cc:	b011      	add	sp, #68	; 0x44
 80015ce:	bd30      	pop	{r4, r5, pc}

080015d0 <main>:
{
 80015d0:	b508      	push	{r3, lr}
  HAL_Init();
 80015d2:	f000 fba7 	bl	8001d24 <HAL_Init>
  SystemClock_Config();
 80015d6:	f7ff ffd3 	bl	8001580 <SystemClock_Config>
  MX_GPIO_Init();
 80015da:	f7ff ff11 	bl	8001400 <MX_GPIO_Init>
  MX_DMA_Init();
 80015de:	f7ff fe4b 	bl	8001278 <MX_DMA_Init>
  MX_CAN_Init();
 80015e2:	f7ff fdbb 	bl	800115c <MX_CAN_Init>
  MX_CRC_Init();
 80015e6:	f7ff fe1f 	bl	8001228 <MX_CRC_Init>
  MX_TIM2_Init();
 80015ea:	f000 f8ab 	bl	8001744 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80015ee:	f000 f8f3 	bl	80017d8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80015f2:	f7ff ff57 	bl	80014a4 <MX_I2C2_Init>
  HAL_TIM_Base_Start(&htim2);
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <main+0x40>)
 80015f8:	f003 fbcc 	bl	8004d94 <HAL_TIM_Base_Start>
  HAL_I2C_ErrorCallback(&hi2c2);
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <main+0x44>)
 80015fe:	f006 fba3 	bl	8007d48 <HAL_I2C_ErrorCallback>
  canConfig();
 8001602:	f006 fb25 	bl	8007c50 <canConfig>
  MX_FREERTOS_Init(); 
 8001606:	f7ff fed3 	bl	80013b0 <MX_FREERTOS_Init>
  osKernelStart();
 800160a:	f005 f833 	bl	8006674 <osKernelStart>
 800160e:	e7fe      	b.n	800160e <main+0x3e>
 8001610:	20002b90 	.word	0x20002b90
 8001614:	20002b3c 	.word	0x20002b3c

08001618 <delay_us>:
	}
}
#endif
void delay_us(int32_t t)  //1MHz 1us
{
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001618:	2300      	movs	r3, #0
 800161a:	4a03      	ldr	r2, [pc, #12]	; (8001628 <delay_us+0x10>)
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	6253      	str	r3, [r2, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2)<t);
 8001620:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001622:	4283      	cmp	r3, r0
 8001624:	d3fc      	bcc.n	8001620 <delay_us+0x8>
}
 8001626:	4770      	bx	lr
 8001628:	20002b90 	.word	0x20002b90

0800162c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop

08001630 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_MspInit+0x48>)
{
 8001632:	b510      	push	{r4, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001634:	6998      	ldr	r0, [r3, #24]
{
 8001636:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001638:	f040 0001 	orr.w	r0, r0, #1
 800163c:	6198      	str	r0, [r3, #24]
 800163e:	699c      	ldr	r4, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001640:	2200      	movs	r2, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001642:	f004 0401 	and.w	r4, r4, #1
 8001646:	9400      	str	r4, [sp, #0]
 8001648:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	69dc      	ldr	r4, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800164c:	210f      	movs	r1, #15
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8001652:	61dc      	str	r4, [r3, #28]
 8001654:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001656:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001662:	f000 ff03 	bl	800246c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <HAL_MspInit+0x4c>)
 8001668:	6853      	ldr	r3, [r2, #4]
 800166a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800166e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001672:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001674:	b002      	add	sp, #8
 8001676:	bd10      	pop	{r4, pc}
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000

08001680 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop

08001684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001684:	e7fe      	b.n	8001684 <HardFault_Handler>
 8001686:	bf00      	nop

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler>
 800168a:	bf00      	nop

0800168c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168c:	e7fe      	b.n	800168c <BusFault_Handler>
 800168e:	bf00      	nop

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler>
 8001692:	bf00      	nop

08001694 <DebugMon_Handler>:
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169a:	f000 fb55 	bl	8001d48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800169e:	f005 fbcd 	bl	8006e3c <xTaskGetSchedulerState>
 80016a2:	2801      	cmp	r0, #1
 80016a4:	d003      	beq.n	80016ae <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 80016aa:	f005 bc83 	b.w	8006fb4 <xPortSysTickHandler>
}
 80016ae:	bd08      	pop	{r3, pc}

080016b0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016b0:	4801      	ldr	r0, [pc, #4]	; (80016b8 <DMA1_Channel4_IRQHandler+0x8>)
 80016b2:	f001 b80f 	b.w	80026d4 <HAL_DMA_IRQHandler>
 80016b6:	bf00      	nop
 80016b8:	20002bd0 	.word	0x20002bd0

080016bc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80016bc:	4801      	ldr	r0, [pc, #4]	; (80016c4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80016be:	f000 bd9b 	b.w	80021f8 <HAL_CAN_IRQHandler>
 80016c2:	bf00      	nop
 80016c4:	20000a5c 	.word	0x20000a5c

080016c8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80016c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016cc:	f001 b9a2 	b.w	8002a14 <HAL_GPIO_EXTI_IRQHandler>

080016d0 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80016d0:	4801      	ldr	r0, [pc, #4]	; (80016d8 <I2C2_EV_IRQHandler+0x8>)
 80016d2:	f002 b969 	b.w	80039a8 <HAL_I2C_EV_IRQHandler>
 80016d6:	bf00      	nop
 80016d8:	20002b3c 	.word	0x20002b3c

080016dc <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80016dc:	4801      	ldr	r0, [pc, #4]	; (80016e4 <I2C2_ER_IRQHandler+0x8>)
 80016de:	f002 bebd 	b.w	800445c <HAL_I2C_ER_IRQHandler>
 80016e2:	bf00      	nop
 80016e4:	20002b3c 	.word	0x20002b3c

080016e8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016e8:	4801      	ldr	r0, [pc, #4]	; (80016f0 <USART1_IRQHandler+0x8>)
 80016ea:	f003 bd61 	b.w	80051b0 <HAL_UART_IRQHandler>
 80016ee:	bf00      	nop
 80016f0:	20002c14 	.word	0x20002c14

080016f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016f4:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80016f6:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016fa:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8001702:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001704:	480e      	ldr	r0, [pc, #56]	; (8001740 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8001706:	f041 0101 	orr.w	r1, r1, #1
 800170a:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 800170c:	6859      	ldr	r1, [r3, #4]
 800170e:	400a      	ands	r2, r1
 8001710:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001718:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800171c:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001724:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800172c:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 800172e:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001730:	6084      	str	r4, [r0, #8]
#endif 
}
 8001732:	bc30      	pop	{r4, r5}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	f8ff0000 	.word	0xf8ff0000
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001744:	b530      	push	{r4, r5, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 24;
 8001746:	2018      	movs	r0, #24
  htim2.Instance = TIM2;
 8001748:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174c:	2300      	movs	r3, #0
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
 800174e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001752:	2180      	movs	r1, #128	; 0x80
  htim2.Instance = TIM2;
 8001754:	4a15      	ldr	r2, [pc, #84]	; (80017ac <MX_TIM2_Init+0x68>)
{
 8001756:	b087      	sub	sp, #28
  htim2.Init.Prescaler = 24;
 8001758:	e9c2 5000 	strd	r5, r0, [r2]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800175c:	4610      	mov	r0, r2
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175e:	9302      	str	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	9300      	str	r3, [sp, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001762:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001766:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	6093      	str	r3, [r2, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	6113      	str	r3, [r2, #16]
  htim2.Init.Period = 1000;
 800176e:	60d4      	str	r4, [r2, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001770:	6191      	str	r1, [r2, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001772:	f003 fac1 	bl	8004cf8 <HAL_TIM_Base_Init>
 8001776:	b9b0      	cbnz	r0, 80017a6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800177c:	a902      	add	r1, sp, #8
 800177e:	480b      	ldr	r0, [pc, #44]	; (80017ac <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001780:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001782:	f003 fb1b 	bl	8004dbc <HAL_TIM_ConfigClockSource>
 8001786:	b958      	cbnz	r0, 80017a0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800178a:	4669      	mov	r1, sp
 800178c:	4807      	ldr	r0, [pc, #28]	; (80017ac <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178e:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001792:	f003 fbb9 	bl	8004f08 <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	b108      	cbz	r0, 800179c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001798:	f7ff ff48 	bl	800162c <Error_Handler>
  }

}
 800179c:	b007      	add	sp, #28
 800179e:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80017a0:	f7ff ff44 	bl	800162c <Error_Handler>
 80017a4:	e7f0      	b.n	8001788 <MX_TIM2_Init+0x44>
    Error_Handler();
 80017a6:	f7ff ff41 	bl	800162c <Error_Handler>
 80017aa:	e7e5      	b.n	8001778 <MX_TIM2_Init+0x34>
 80017ac:	20002b90 	.word	0x20002b90

080017b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80017b0:	6803      	ldr	r3, [r0, #0]
 80017b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b6:	d000      	beq.n	80017ba <HAL_TIM_Base_MspInit+0xa>
 80017b8:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80017be:	69da      	ldr	r2, [r3, #28]
{
 80017c0:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	61da      	str	r2, [r3, #28]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017d2:	b002      	add	sp, #8
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop

080017d8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017d8:	b538      	push	{r3, r4, r5, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 115200;
 80017dc:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX;
 80017e0:	2108      	movs	r1, #8
  huart1.Instance = USART1;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART1_UART_Init+0x30>)
 80017e4:	4c09      	ldr	r4, [pc, #36]	; (800180c <MX_USART1_UART_Init+0x34>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80017e6:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 80017e8:	e9c3 4500 	strd	r4, r5, [r3]
  huart1.Init.Mode = UART_MODE_TX;
 80017ec:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ee:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017f2:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80017f8:	f003 fba8 	bl	8004f4c <HAL_HalfDuplex_Init>
 80017fc:	b900      	cbnz	r0, 8001800 <MX_USART1_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 80017fe:	bd38      	pop	{r3, r4, r5, pc}
 8001800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001804:	f7ff bf12 	b.w	800162c <Error_Handler>
 8001808:	20002c14 	.word	0x20002c14
 800180c:	40013800 	.word	0x40013800

08001810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8001814:	6802      	ldr	r2, [r0, #0]
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_UART_MspInit+0xa0>)
{
 8001818:	b087      	sub	sp, #28
  if(uartHandle->Instance==USART1)
 800181a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001820:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(uartHandle->Instance==USART1)
 8001824:	d001      	beq.n	800182a <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001826:	b007      	add	sp, #28
 8001828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182a:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800182c:	f44f 7000 	mov.w	r0, #512	; 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001830:	2503      	movs	r5, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001832:	2712      	movs	r7, #18
    __HAL_RCC_USART1_CLK_ENABLE();
 8001834:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001838:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800183c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001840:	619a      	str	r2, [r3, #24]
 8001842:	699a      	ldr	r2, [r3, #24]
 8001844:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001848:	9200      	str	r2, [sp, #0]
 800184a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	f042 0204 	orr.w	r2, r2, #4
 8001852:	619a      	str	r2, [r3, #24]
 8001854:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001856:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001868:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186a:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f000 ffcc 	bl	8002808 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001870:	2110      	movs	r1, #16
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001872:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001874:	4d0f      	ldr	r5, [pc, #60]	; (80018b4 <HAL_UART_MspInit+0xa4>)
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_UART_MspInit+0xa8>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001878:	4628      	mov	r0, r5
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800187a:	6069      	str	r1, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187c:	60ac      	str	r4, [r5, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800187e:	e9c5 4404 	strd	r4, r4, [r5, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001882:	e9c5 4406 	strd	r4, r4, [r5, #24]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001886:	602a      	str	r2, [r5, #0]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001888:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800188a:	f000 fe5f 	bl	800254c <HAL_DMA_Init>
 800188e:	b958      	cbnz	r0, 80018a8 <HAL_UART_MspInit+0x98>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2105      	movs	r1, #5
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001894:	6335      	str	r5, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001896:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001898:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800189a:	f000 fde7 	bl	800246c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800189e:	2025      	movs	r0, #37	; 0x25
 80018a0:	f000 fe1a 	bl	80024d8 <HAL_NVIC_EnableIRQ>
}
 80018a4:	b007      	add	sp, #28
 80018a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80018a8:	f7ff fec0 	bl	800162c <Error_Handler>
 80018ac:	e7f0      	b.n	8001890 <HAL_UART_MspInit+0x80>
 80018ae:	bf00      	nop
 80018b0:	40013800 	.word	0x40013800
 80018b4:	20002bd0 	.word	0x20002bd0
 80018b8:	40020044 	.word	0x40020044

080018bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018be:	e003      	b.n	80018c8 <LoopCopyDataInit>

080018c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80018c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018c6:	3104      	adds	r1, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018c8:	480a      	ldr	r0, [pc, #40]	; (80018f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018d0:	d3f6      	bcc.n	80018c0 <CopyDataInit>
  ldr r2, =_sbss
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018d4:	e002      	b.n	80018dc <LoopFillZerobss>

080018d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018d8:	f842 3b04 	str.w	r3, [r2], #4

080018dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018e0:	d3f9      	bcc.n	80018d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018e2:	f7ff ff07 	bl	80016f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f006 fa85 	bl	8007df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ea:	f7ff fe71 	bl	80015d0 <main>
  bx lr
 80018ee:	4770      	bx	lr
  ldr r3, =_sidata
 80018f0:	0800c940 	.word	0x0800c940
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018f8:	2000068c 	.word	0x2000068c
  ldr r2, =_sbss
 80018fc:	2000068c 	.word	0x2000068c
  ldr r3, = _ebss
 8001900:	20002d18 	.word	0x20002d18

08001904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC1_2_IRQHandler>
	...

08001908 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8001908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800190a:	8803      	ldrh	r3, [r0, #0]
 800190c:	8844      	ldrh	r4, [r0, #2]
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 800190e:	684f      	ldr	r7, [r1, #4]
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8001910:	fb04 f403 	mul.w	r4, r4, r3
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8001914:	6856      	ldr	r6, [r2, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 8001916:	6845      	ldr	r5, [r0, #4]
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8001918:	b14c      	cbz	r4, 800192e <arm_mat_add_f32+0x26>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 800191a:	f857 1b04 	ldr.w	r1, [r7], #4
 800191e:	f855 0b04 	ldr.w	r0, [r5], #4
 8001922:	f7ff f927 	bl	8000b74 <__addsf3>
    while (blkCnt > 0U)
 8001926:	3c01      	subs	r4, #1
      *pOut++ = (*pIn1++) + (*pIn2++);
 8001928:	f846 0b04 	str.w	r0, [r6], #4
    while (blkCnt > 0U)
 800192c:	d1f5      	bne.n	800191a <arm_mat_add_f32+0x12>

  }

  /* Return to application */
  return (status);
}
 800192e:	2000      	movs	r0, #0
 8001930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001932:	bf00      	nop

08001934 <arm_mat_init_f32>:
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
  /* Assign Number of Rows */
  S->numRows = nRows;
 8001934:	8001      	strh	r1, [r0, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8001936:	8042      	strh	r2, [r0, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8001938:	6043      	str	r3, [r0, #4]
}
 800193a:	4770      	bx	lr

0800193c <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 800193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8001940:	6842      	ldr	r2, [r0, #4]
{
 8001942:	b095      	sub	sp, #84	; 0x54
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8001944:	8803      	ldrh	r3, [r0, #0]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8001946:	684c      	ldr	r4, [r1, #4]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8001948:	9213      	str	r2, [sp, #76]	; 0x4c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800194a:	8842      	ldrh	r2, [r0, #2]
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800194c:	9304      	str	r3, [sp, #16]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800194e:	9412      	str	r4, [sp, #72]	; 0x48
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8001950:	920b      	str	r2, [sp, #44]	; 0x2c

    /* Loop over the number of rows */
    rowCnt = numRows;

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8001952:	b323      	cbz	r3, 800199e <arm_mat_inverse_f32+0x62>
 8001954:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001958:	f108 0a04 	add.w	sl, r8, #4
 800195c:	2701      	movs	r7, #1
 800195e:	2604      	movs	r6, #4
        *pOutT1++ = 0.0f;
        j--;
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 8001960:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 8001964:	e013      	b.n	800198e <arm_mat_inverse_f32+0x52>
 8001966:	462a      	mov	r2, r5
 8001968:	2100      	movs	r1, #0
 800196a:	4658      	mov	r0, fp
 800196c:	f006 fa8a 	bl	8007e84 <memset>
 8001970:	445d      	add	r5, fp
 8001972:	ebaa 0006 	sub.w	r0, sl, r6
 8001976:	4420      	add	r0, r4

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
      while (j > 0U)
      {
        *pOutT1++ = 0.0f;
 8001978:	462c      	mov	r4, r5
      while (j > 0U)
 800197a:	b12f      	cbz	r7, 8001988 <arm_mat_inverse_f32+0x4c>
 800197c:	4632      	mov	r2, r6
 800197e:	2100      	movs	r1, #0
 8001980:	f006 fa80 	bl	8007e84 <memset>
 8001984:	eb0b 0408 	add.w	r4, fp, r8
 8001988:	9b04      	ldr	r3, [sp, #16]
 800198a:	3604      	adds	r6, #4
 800198c:	3701      	adds	r7, #1
      while (j > 0U)
 800198e:	429f      	cmp	r7, r3
 8001990:	eba8 0506 	sub.w	r5, r8, r6
      *pOutT1++ = 1.0f;
 8001994:	f8c4 9000 	str.w	r9, [r4]
 8001998:	f104 0b04 	add.w	fp, r4, #4
      while (j > 0U)
 800199c:	d1e3      	bne.n	8001966 <arm_mat_inverse_f32+0x2a>
    loopCnt = numCols;

    /* Index modifier to navigate through the columns */
    l = 0U;
    //for(loopCnt = 0U; loopCnt < numCols; loopCnt++)
    while (loopCnt > 0U)
 800199e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80fe 	beq.w	8001ba2 <arm_mat_inverse_f32+0x266>
 80019a6:	2200      	movs	r2, #0
 80019a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80019aa:	9203      	str	r2, [sp, #12]
 80019ac:	9309      	str	r3, [sp, #36]	; 0x24
 80019ae:	930a      	str	r3, [sp, #40]	; 0x28
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 80019b4:	920e      	str	r2, [sp, #56]	; 0x38
 80019b6:	0099      	lsls	r1, r3, #2
 80019b8:	1c8a      	adds	r2, r1, #2
 80019ba:	0052      	lsls	r2, r2, #1
 80019bc:	9210      	str	r2, [sp, #64]	; 0x40
 80019be:	1d0a      	adds	r2, r1, #4
 80019c0:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 80019c4:	9211      	str	r2, [sp, #68]	; 0x44
 80019c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	9107      	str	r1, [sp, #28]
 80019cc:	eb02 0a01 	add.w	sl, r2, r1
 80019d0:	930f      	str	r3, [sp, #60]	; 0x3c
      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 80019d2:	9b02      	ldr	r3, [sp, #8]

      /* Destination pointer modifier */
      k = 1U;

      /* Check if the pivot element is zero */
      if (*pInT1 == 0.0f)
 80019d4:	2100      	movs	r1, #0
      in = *pInT1;
 80019d6:	f8d3 b000 	ldr.w	fp, [r3]
 80019da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      if (*pInT1 == 0.0f)
 80019dc:	4658      	mov	r0, fp
 80019de:	4453      	add	r3, sl
 80019e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80019e2:	9305      	str	r3, [sp, #20]
 80019e4:	f7ff fb62 	bl	80010ac <__aeabi_fcmpeq>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	f040 8081 	bne.w	8001af0 <arm_mat_inverse_f32+0x1b4>
 80019ee:	9b03      	ldr	r3, [sp, #12]
 80019f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80019f2:	1ad5      	subs	r5, r2, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	930d      	str	r3, [sp, #52]	; 0x34
      /* Pivot element of the row */
      in = *(pIn + (l * numCols));

      /* Loop over number of columns
       * to the right of the pilot element */
      for (j = 0U; j < (numCols - l); j++)
 80019f8:	b155      	cbz	r5, 8001a10 <arm_mat_inverse_f32+0xd4>
 80019fa:	2400      	movs	r4, #0
 80019fc:	9f02      	ldr	r7, [sp, #8]
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        *pInT1 = *pInT1 / in;
 80019fe:	6838      	ldr	r0, [r7, #0]
 8001a00:	4659      	mov	r1, fp
 8001a02:	f7ff fa73 	bl	8000eec <__aeabi_fdiv>
      for (j = 0U; j < (numCols - l); j++)
 8001a06:	3401      	adds	r4, #1
 8001a08:	42ac      	cmp	r4, r5
        *pInT1 = *pInT1 / in;
 8001a0a:	f847 0b04 	str.w	r0, [r7], #4
      for (j = 0U; j < (numCols - l); j++)
 8001a0e:	d1f6      	bne.n	80019fe <arm_mat_inverse_f32+0xc2>
        pInT1++;
      }
      for (j = 0U; j < numCols; j++)
 8001a10:	2700      	movs	r7, #0
      pOutT1 = pPivotRowDst;
 8001a12:	9c05      	ldr	r4, [sp, #20]
      for (j = 0U; j < numCols; j++)
 8001a14:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        *pOutT1 = *pOutT1 / in;
 8001a18:	6820      	ldr	r0, [r4, #0]
 8001a1a:	4659      	mov	r1, fp
 8001a1c:	f7ff fa66 	bl	8000eec <__aeabi_fdiv>
      for (j = 0U; j < numCols; j++)
 8001a20:	3701      	adds	r7, #1
 8001a22:	45b8      	cmp	r8, r7
        *pOutT1 = *pOutT1 / in;
 8001a24:	f844 0b04 	str.w	r0, [r4], #4
      for (j = 0U; j < numCols; j++)
 8001a28:	d1f6      	bne.n	8001a18 <arm_mat_inverse_f32+0xdc>

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
      pOutT1 = pOut;

      for (i = 0U; i < numRows; i++)
 8001a2a:	9b04      	ldr	r3, [sp, #16]
 8001a2c:	970c      	str	r7, [sp, #48]	; 0x30
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d03f      	beq.n	8001ab2 <arm_mat_inverse_f32+0x176>
 8001a32:	2700      	movs	r7, #0
      pOutT1 = pOut;
 8001a34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001a36:	9301      	str	r3, [sp, #4]
        /* Check for the pivot element */
        if (i == l)
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8001a38:	00ab      	lsls	r3, r5, #2
 8001a3a:	9308      	str	r3, [sp, #32]
 8001a3c:	9b03      	ldr	r3, [sp, #12]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	9306      	str	r3, [sp, #24]
        if (i == l)
 8001a42:	9b03      	ldr	r3, [sp, #12]
 8001a44:	42bb      	cmp	r3, r7
 8001a46:	f000 8088 	beq.w	8001b5a <arm_mat_inverse_f32+0x21e>
          pOutT1 += numCols;
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8001a4a:	f8d6 b000 	ldr.w	fp, [r6]
          pPRT_in = pPivotRowIn;
          pPRT_pDst = pPivotRowDst;

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          for (j = 0U; j < (numCols - l); j++)
 8001a4e:	b1ad      	cbz	r5, 8001a7c <arm_mat_inverse_f32+0x140>
 8001a50:	f04f 0900 	mov.w	r9, #0
 8001a54:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8001a58:	1f34      	subs	r4, r6, #4
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            *pInT1 = *pInT1 - (in * *pPRT_in++);
 8001a5a:	f858 1b04 	ldr.w	r1, [r8], #4
 8001a5e:	4658      	mov	r0, fp
 8001a60:	f7ff f990 	bl	8000d84 <__aeabi_fmul>
 8001a64:	4601      	mov	r1, r0
 8001a66:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8001a6a:	f7ff f881 	bl	8000b70 <__aeabi_fsub>
          for (j = 0U; j < (numCols - l); j++)
 8001a6e:	f109 0901 	add.w	r9, r9, #1
 8001a72:	45a9      	cmp	r9, r5
            *pInT1 = *pInT1 - (in * *pPRT_in++);
 8001a74:	6020      	str	r0, [r4, #0]
          for (j = 0U; j < (numCols - l); j++)
 8001a76:	d1f0      	bne.n	8001a5a <arm_mat_inverse_f32+0x11e>
 8001a78:	9b08      	ldr	r3, [sp, #32]
 8001a7a:	441e      	add	r6, r3
 8001a7c:	9b01      	ldr	r3, [sp, #4]
          pPRT_pDst = pPivotRowDst;
 8001a7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001a82:	1f1c      	subs	r4, r3, #4
             replace the elements in the destination matrix */
          for (j = 0U; j < numCols; j++)
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            *pOutT1 = *pOutT1 - (in * *pPRT_pDst++);
 8001a84:	f859 1b04 	ldr.w	r1, [r9], #4
 8001a88:	4658      	mov	r0, fp
 8001a8a:	f7ff f97b 	bl	8000d84 <__aeabi_fmul>
 8001a8e:	4601      	mov	r1, r0
 8001a90:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8001a94:	f7ff f86c 	bl	8000b70 <__aeabi_fsub>
          for (j = 0U; j < numCols; j++)
 8001a98:	45d1      	cmp	r9, sl
            *pOutT1 = *pOutT1 - (in * *pPRT_pDst++);
 8001a9a:	6020      	str	r0, [r4, #0]
          for (j = 0U; j < numCols; j++)
 8001a9c:	d1f2      	bne.n	8001a84 <arm_mat_inverse_f32+0x148>
 8001a9e:	9b01      	ldr	r3, [sp, #4]
 8001aa0:	9a07      	ldr	r2, [sp, #28]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	9301      	str	r3, [sp, #4]
            pOutT1++;
          }

        }
        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8001aa6:	9b06      	ldr	r3, [sp, #24]
      for (i = 0U; i < numRows; i++)
 8001aa8:	3701      	adds	r7, #1
        pInT1 = pInT1 + l;
 8001aaa:	441e      	add	r6, r3
      for (i = 0U; i < numRows; i++)
 8001aac:	9b04      	ldr	r3, [sp, #16]
 8001aae:	42bb      	cmp	r3, r7
 8001ab0:	d1c7      	bne.n	8001a42 <arm_mat_inverse_f32+0x106>
 8001ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ab4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8001aba:	9b02      	ldr	r3, [sp, #8]
 8001abc:	4413      	add	r3, r2
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ac4:	4413      	add	r3, r2
 8001ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8001ac8:	9b07      	ldr	r3, [sp, #28]
    while (loopCnt > 0U)
 8001aca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001acc:	449a      	add	sl, r3
 8001ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	9303      	str	r3, [sp, #12]
 8001ad4:	f47f af7d 	bne.w	80019d2 <arm_mat_inverse_f32+0x96>
#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;

    if ((flag != 1U) && (in == 0.0f))
 8001ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d044      	beq.n	8001b68 <arm_mat_inverse_f32+0x22c>
 8001ade:	4658      	mov	r0, fp
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	f7ff fae3 	bl	80010ac <__aeabi_fcmpeq>
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	d142      	bne.n	8001b70 <arm_mat_inverse_f32+0x234>
        status = ARM_MATH_SINGULAR;
    }
  }
  /* Return to application */
  return (status);
}
 8001aea:	b015      	add	sp, #84	; 0x54
 8001aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (i = (l + 1U); i < numRows; i++)
 8001af0:	9b03      	ldr	r3, [sp, #12]
 8001af2:	9a04      	ldr	r2, [sp, #16]
 8001af4:	3301      	adds	r3, #1
 8001af6:	4293      	cmp	r3, r2
 8001af8:	930d      	str	r3, [sp, #52]	; 0x34
 8001afa:	d206      	bcs.n	8001b0a <arm_mat_inverse_f32+0x1ce>
          if (*pInT2 != 0.0f)
 8001afc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001afe:	2100      	movs	r1, #0
 8001b00:	6820      	ldr	r0, [r4, #0]
 8001b02:	f7ff fad3 	bl	80010ac <__aeabi_fcmpeq>
          pInT2 = pInT1 + (numCols * l);
 8001b06:	4623      	mov	r3, r4
          if (*pInT2 != 0.0f)
 8001b08:	b130      	cbz	r0, 8001b18 <arm_mat_inverse_f32+0x1dc>
      if ((flag != 1U) && (in == 0.0f))
 8001b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d148      	bne.n	8001ba2 <arm_mat_inverse_f32+0x266>
 8001b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b12:	9a03      	ldr	r2, [sp, #12]
 8001b14:	1a9d      	subs	r5, r3, r2
 8001b16:	e76f      	b.n	80019f8 <arm_mat_inverse_f32+0xbc>
            for (j = 0U; j < (numCols - l); j++)
 8001b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001b1a:	9903      	ldr	r1, [sp, #12]
 8001b1c:	1a55      	subs	r5, r2, r1
 8001b1e:	d009      	beq.n	8001b34 <arm_mat_inverse_f32+0x1f8>
 8001b20:	9a02      	ldr	r2, [sp, #8]
              Xchg = *pInT2;
 8001b22:	6819      	ldr	r1, [r3, #0]
              *pInT2++ = *pInT1;
 8001b24:	6814      	ldr	r4, [r2, #0]
            for (j = 0U; j < (numCols - l); j++)
 8001b26:	3001      	adds	r0, #1
 8001b28:	4285      	cmp	r5, r0
              *pInT2++ = *pInT1;
 8001b2a:	f843 4b04 	str.w	r4, [r3], #4
              *pInT1++ = Xchg;
 8001b2e:	f842 1b04 	str.w	r1, [r2], #4
            for (j = 0U; j < (numCols - l); j++)
 8001b32:	d1f6      	bne.n	8001b22 <arm_mat_inverse_f32+0x1e6>
 8001b34:	4651      	mov	r1, sl
            for (j = 0U; j < numCols; j++)
 8001b36:	2300      	movs	r3, #0
      pOutT1 = pOut + (l * numCols);
 8001b38:	9a05      	ldr	r2, [sp, #20]
            for (j = 0U; j < numCols; j++)
 8001b3a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
              Xchg = *pOutT2;
 8001b3c:	6808      	ldr	r0, [r1, #0]
              *pOutT2++ = *pOutT1;
 8001b3e:	6814      	ldr	r4, [r2, #0]
            for (j = 0U; j < numCols; j++)
 8001b40:	3301      	adds	r3, #1
 8001b42:	429f      	cmp	r7, r3
              *pOutT2++ = *pOutT1;
 8001b44:	f841 4b04 	str.w	r4, [r1], #4
              *pOutT1++ = Xchg;
 8001b48:	f842 0b04 	str.w	r0, [r2], #4
            for (j = 0U; j < numCols; j++)
 8001b4c:	d1f6      	bne.n	8001b3c <arm_mat_inverse_f32+0x200>
 8001b4e:	9b02      	ldr	r3, [sp, #8]
 8001b50:	f8d3 b000 	ldr.w	fp, [r3]
            flag = 1U;
 8001b54:	2301      	movs	r3, #1
 8001b56:	930e      	str	r3, [sp, #56]	; 0x38
 8001b58:	e74e      	b.n	80019f8 <arm_mat_inverse_f32+0xbc>
          pInT1 += numCols - l;
 8001b5a:	9b08      	ldr	r3, [sp, #32]
          pOutT1 += numCols;
 8001b5c:	9a07      	ldr	r2, [sp, #28]
          pInT1 += numCols - l;
 8001b5e:	441e      	add	r6, r3
          pOutT1 += numCols;
 8001b60:	9b01      	ldr	r3, [sp, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	e79e      	b.n	8001aa6 <arm_mat_inverse_f32+0x16a>
    status = ARM_MATH_SUCCESS;
 8001b68:	2000      	movs	r0, #0
}
 8001b6a:	b015      	add	sp, #84	; 0x54
 8001b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (i = 0; i < numRows * numCols; i++)
 8001b70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8001b72:	9b04      	ldr	r3, [sp, #16]
 8001b74:	fb04 f403 	mul.w	r4, r4, r3
 8001b78:	b19c      	cbz	r4, 8001ba2 <arm_mat_inverse_f32+0x266>
        if (pIn[i] != 0.0f)
 8001b7a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	6828      	ldr	r0, [r5, #0]
 8001b80:	f7ff fa94 	bl	80010ac <__aeabi_fcmpeq>
 8001b84:	2800      	cmp	r0, #0
 8001b86:	d0b0      	beq.n	8001aea <arm_mat_inverse_f32+0x1ae>
 8001b88:	2600      	movs	r6, #0
 8001b8a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8001b8c:	e006      	b.n	8001b9c <arm_mat_inverse_f32+0x260>
 8001b8e:	4631      	mov	r1, r6
 8001b90:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8001b94:	f7ff fa8a 	bl	80010ac <__aeabi_fcmpeq>
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d0a6      	beq.n	8001aea <arm_mat_inverse_f32+0x1ae>
      for (i = 0; i < numRows * numCols; i++)
 8001b9c:	3701      	adds	r7, #1
 8001b9e:	42bc      	cmp	r4, r7
 8001ba0:	d1f5      	bne.n	8001b8e <arm_mat_inverse_f32+0x252>
        status = ARM_MATH_SINGULAR;
 8001ba2:	f06f 0004 	mvn.w	r0, #4
}
 8001ba6:	b015      	add	sp, #84	; 0x54
 8001ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bac <arm_mat_mult_f32>:
#else

  /* Run the below code for Cortex-M0 */

  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
  uint16_t col, i = 0U, row = numRowsA, colCnt;  /* loop counters */
 8001bac:	2300      	movs	r3, #0
{
 8001bae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8001bb2:	8847      	ldrh	r7, [r0, #2]
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8001bb4:	884d      	ldrh	r5, [r1, #2]
 8001bb6:	1e7c      	subs	r4, r7, #1
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8001bb8:	684e      	ldr	r6, [r1, #4]
 8001bba:	b2a1      	uxth	r1, r4
 8001bbc:	462c      	mov	r4, r5
{
 8001bbe:	b08b      	sub	sp, #44	; 0x2c
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8001bc0:	6852      	ldr	r2, [r2, #4]
  uint16_t col, i = 0U, row = numRowsA, colCnt;  /* loop counters */
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	1e6b      	subs	r3, r5, #1
 8001bc6:	b29b      	uxth	r3, r3
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8001bc8:	9206      	str	r2, [sp, #24]
 8001bca:	1aea      	subs	r2, r5, r3
 8001bcc:	3301      	adds	r3, #1
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8001bce:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001bd2:	009b      	lsls	r3, r3, #2
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8001bd4:	8800      	ldrh	r0, [r0, #0]
 8001bd6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8001bda:	3101      	adds	r1, #1
 8001bdc:	9308      	str	r3, [sp, #32]

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
      pInA = pInA + numColsA;
 8001bde:	00bb      	lsls	r3, r7, #2
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8001be0:	9507      	str	r5, [sp, #28]
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8001be2:	9605      	str	r6, [sp, #20]
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8001be4:	9701      	str	r7, [sp, #4]
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8001be6:	9003      	str	r0, [sp, #12]
 8001be8:	9209      	str	r2, [sp, #36]	; 0x24
 8001bea:	eb09 0581 	add.w	r5, r9, r1, lsl #2
          pIn2 += numColsB;
 8001bee:	00a6      	lsls	r6, r4, #2
      pInA = pInA + numColsA;
 8001bf0:	9304      	str	r3, [sp, #16]
      px = pOut + i;
 8001bf2:	9a02      	ldr	r2, [sp, #8]
 8001bf4:	e9dd 4305 	ldrd	r4, r3, [sp, #20]
 8001bf8:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8001bfc:	9b08      	ldr	r3, [sp, #32]
 8001bfe:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	9300      	str	r3, [sp, #0]
        while (colCnt > 0U)
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	b34b      	cbz	r3, 8001c5e <arm_mat_mult_f32+0xb2>
        pIn1 = pInA;
 8001c0a:	46ca      	mov	sl, r9
        sum = 0.0f;
 8001c0c:	f04f 0b00 	mov.w	fp, #0
          sum += *pIn1++ * (*pIn2);
 8001c10:	6821      	ldr	r1, [r4, #0]
 8001c12:	f85a 0b04 	ldr.w	r0, [sl], #4
 8001c16:	f7ff f8b5 	bl	8000d84 <__aeabi_fmul>
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	4658      	mov	r0, fp
 8001c1e:	f7fe ffa9 	bl	8000b74 <__addsf3>
        while (colCnt > 0U)
 8001c22:	45aa      	cmp	sl, r5
          pIn2 += numColsB;
 8001c24:	4434      	add	r4, r6
          sum += *pIn1++ * (*pIn2);
 8001c26:	4683      	mov	fp, r0
        while (colCnt > 0U)
 8001c28:	d1f2      	bne.n	8001c10 <arm_mat_mult_f32+0x64>
      } while (col > 0U);
 8001c2a:	9b00      	ldr	r3, [sp, #0]
        *px++ = sum;
 8001c2c:	f847 bb04 	str.w	fp, [r7], #4
      } while (col > 0U);
 8001c30:	42bb      	cmp	r3, r7
        pIn2 = pInB + (numColsB - col);
 8001c32:	4644      	mov	r4, r8
 8001c34:	f108 0804 	add.w	r8, r8, #4
      } while (col > 0U);
 8001c38:	d1e5      	bne.n	8001c06 <arm_mat_mult_f32+0x5a>

      /* Decrement the row loop counter */
      row--;
 8001c3a:	9b03      	ldr	r3, [sp, #12]
      i = i + numColsB;
 8001c3c:	9907      	ldr	r1, [sp, #28]
      row--;
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
      i = i + numColsB;
 8001c42:	9b02      	ldr	r3, [sp, #8]
      row--;
 8001c44:	9203      	str	r2, [sp, #12]
      i = i + numColsB;
 8001c46:	440b      	add	r3, r1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	9302      	str	r3, [sp, #8]
      pInA = pInA + numColsA;
 8001c4c:	9b04      	ldr	r3, [sp, #16]
 8001c4e:	4499      	add	r9, r3
 8001c50:	441d      	add	r5, r3

    } while (row > 0U);
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	d1cd      	bne.n	8001bf2 <arm_mat_mult_f32+0x46>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8001c56:	4610      	mov	r0, r2
 8001c58:	b00b      	add	sp, #44	; 0x2c
 8001c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sum = 0.0f;
 8001c5e:	f04f 0b00 	mov.w	fp, #0
 8001c62:	e7e2      	b.n	8001c2a <arm_mat_mult_f32+0x7e>

08001c64 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8001c66:	8803      	ldrh	r3, [r0, #0]
 8001c68:	8844      	ldrh	r4, [r0, #2]
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8001c6a:	684f      	ldr	r7, [r1, #4]
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8001c6c:	fb04 f403 	mul.w	r4, r4, r3
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 8001c70:	6856      	ldr	r6, [r2, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8001c72:	6845      	ldr	r5, [r0, #4]
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8001c74:	b14c      	cbz	r4, 8001c8a <arm_mat_sub_f32+0x26>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8001c76:	f857 1b04 	ldr.w	r1, [r7], #4
 8001c7a:	f855 0b04 	ldr.w	r0, [r5], #4
 8001c7e:	f7fe ff77 	bl	8000b70 <__aeabi_fsub>
    while (blkCnt > 0U)
 8001c82:	3c01      	subs	r4, #1
      *pOut++ = (*pIn1++) - (*pIn2++);
 8001c84:	f846 0b04 	str.w	r0, [r6], #4
    while (blkCnt > 0U)
 8001c88:	d1f5      	bne.n	8001c76 <arm_mat_sub_f32+0x12>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c8e:	bf00      	nop

08001c90 <arm_mat_trans_f32>:
{
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 8001c90:	8843      	ldrh	r3, [r0, #2]
{
 8001c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8001c96:	f8b0 c000 	ldrh.w	ip, [r0]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8001c9a:	f8d1 e004 	ldr.w	lr, [r1, #4]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8001c9e:	6846      	ldr	r6, [r0, #4]
 8001ca0:	b1cb      	cbz	r3, 8001cd6 <arm_mat_trans_f32+0x46>

#else

  /* Run the below code for Cortex-M0 */

  uint16_t col, i = 0U, row = nRows;             /* loop counters */
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	f103 0801 	add.w	r8, r3, #1
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	ea4f 048c 	mov.w	r4, ip, lsl #2
 8001cb2:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8001cb6:	1d1f      	adds	r7, r3, #4
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 8001cb8:	4632      	mov	r2, r6
 8001cba:	eb0e 0385 	add.w	r3, lr, r5, lsl #2
 8001cbe:	19f0      	adds	r0, r6, r7
      col = nColumns;

      while (col > 0U)
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8001cc0:	f852 1b04 	ldr.w	r1, [r2], #4
      while (col > 0U)
 8001cc4:	4282      	cmp	r2, r0
        *px = *pIn++;
 8001cc6:	6019      	str	r1, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8001cc8:	4423      	add	r3, r4
      while (col > 0U)
 8001cca:	d1f9      	bne.n	8001cc0 <arm_mat_trans_f32+0x30>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 8001ccc:	3501      	adds	r5, #1
 8001cce:	b2ad      	uxth	r5, r5

      /* Decrement the row loop counter */
      row--;

    } while (row > 0U);          /* row loop end  */
 8001cd0:	45ac      	cmp	ip, r5
 8001cd2:	4446      	add	r6, r8
 8001cd4:	d1f0      	bne.n	8001cb8 <arm_mat_trans_f32+0x28>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	490d      	ldr	r1, [pc, #52]	; (8001d18 <HAL_InitTick+0x3c>)
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <HAL_InitTick+0x40>)
 8001ce6:	7809      	ldrb	r1, [r1, #0]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8001cee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	fbb2 f0f3 	udiv	r0, r2, r3
 8001cf4:	f000 fbfe 	bl	80024f4 <HAL_SYSTICK_Config>
 8001cf8:	b908      	cbnz	r0, 8001cfe <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfa:	2d0f      	cmp	r5, #15
 8001cfc:	d901      	bls.n	8001d02 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001cfe:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001d00:	bd38      	pop	{r3, r4, r5, pc}
 8001d02:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d04:	4602      	mov	r2, r0
 8001d06:	4629      	mov	r1, r5
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f000 fbae 	bl	800246c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <HAL_InitTick+0x44>)
 8001d12:	4620      	mov	r0, r4
 8001d14:	601d      	str	r5, [r3, #0]
}
 8001d16:	bd38      	pop	{r3, r4, r5, pc}
 8001d18:	20000004 	.word	0x20000004
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000008 	.word	0x20000008

08001d24 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_Init+0x20>)
{
 8001d26:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d2c:	f043 0310 	orr.w	r3, r3, #16
 8001d30:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d32:	f000 fb89 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d36:	200f      	movs	r0, #15
 8001d38:	f7ff ffd0 	bl	8001cdc <HAL_InitTick>
  HAL_MspInit();
 8001d3c:	f7ff fc78 	bl	8001630 <HAL_MspInit>
}
 8001d40:	2000      	movs	r0, #0
 8001d42:	bd08      	pop	{r3, pc}
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d48:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <HAL_IncTick+0x10>)
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <HAL_IncTick+0x14>)
 8001d4c:	6811      	ldr	r1, [r2, #0]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	440b      	add	r3, r1
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20002c54 	.word	0x20002c54
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d60:	4b01      	ldr	r3, [pc, #4]	; (8001d68 <HAL_GetTick+0x8>)
 8001d62:	6818      	ldr	r0, [r3, #0]
}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20002c54 	.word	0x20002c54

08001d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d6c:	b538      	push	{r3, r4, r5, lr}
 8001d6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff fff6 	bl	8001d60 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d74:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001d76:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001d78:	d002      	beq.n	8001d80 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HAL_Delay+0x20>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d80:	f7ff ffee 	bl	8001d60 <HAL_GetTick>
 8001d84:	1b40      	subs	r0, r0, r5
 8001d86:	42a0      	cmp	r0, r4
 8001d88:	d3fa      	bcc.n	8001d80 <HAL_Delay+0x14>
  {
  }
}
 8001d8a:	bd38      	pop	{r3, r4, r5, pc}
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d07d      	beq.n	8001e90 <HAL_CAN_Init+0x100>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d94:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d074      	beq.n	8001e8a <HAL_CAN_Init+0xfa>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001da0:	6822      	ldr	r2, [r4, #0]
 8001da2:	6813      	ldr	r3, [r2, #0]
 8001da4:	f023 0302 	bic.w	r3, r3, #2
 8001da8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001daa:	f7ff ffd9 	bl	8001d60 <HAL_GetTick>
 8001dae:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001db0:	e004      	b.n	8001dbc <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001db2:	f7ff ffd5 	bl	8001d60 <HAL_GetTick>
 8001db6:	1b40      	subs	r0, r0, r5
 8001db8:	280a      	cmp	r0, #10
 8001dba:	d85d      	bhi.n	8001e78 <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	0791      	lsls	r1, r2, #30
 8001dc2:	d4f6      	bmi.n	8001db2 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dcc:	f7ff ffc8 	bl	8001d60 <HAL_GetTick>
 8001dd0:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dd2:	e004      	b.n	8001dde <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dd4:	f7ff ffc4 	bl	8001d60 <HAL_GetTick>
 8001dd8:	1b40      	subs	r0, r0, r5
 8001dda:	280a      	cmp	r0, #10
 8001ddc:	d84c      	bhi.n	8001e78 <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	07d2      	lsls	r2, r2, #31
 8001de4:	d5f6      	bpl.n	8001dd4 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001de6:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001de8:	2500      	movs	r5, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dea:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dec:	681a      	ldr	r2, [r3, #0]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dee:	f04f 0601 	mov.w	r6, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001df2:	bf0c      	ite	eq
 8001df4:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001df8:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001dfc:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dfe:	7e62      	ldrb	r2, [r4, #25]
 8001e00:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	bf0c      	ite	eq
 8001e06:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e0a:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8001e0e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e10:	7ea2      	ldrb	r2, [r4, #26]
 8001e12:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	bf0c      	ite	eq
 8001e18:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1c:	f022 0220 	bicne.w	r2, r2, #32
 8001e20:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e22:	7ee2      	ldrb	r2, [r4, #27]
 8001e24:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	bf0c      	ite	eq
 8001e2a:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e2e:	f042 0210 	orrne.w	r2, r2, #16
 8001e32:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e34:	7f22      	ldrb	r2, [r4, #28]
 8001e36:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	bf0c      	ite	eq
 8001e3c:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e40:	f022 0208 	bicne.w	r2, r2, #8
 8001e44:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e46:	7f62      	ldrb	r2, [r4, #29]
 8001e48:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	bf0c      	ite	eq
 8001e4e:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e52:	f022 0204 	bicne.w	r2, r2, #4
 8001e56:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e58:	6921      	ldr	r1, [r4, #16]
 8001e5a:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8001e5e:	4302      	orrs	r2, r0
 8001e60:	430a      	orrs	r2, r1
 8001e62:	6960      	ldr	r0, [r4, #20]
 8001e64:	6861      	ldr	r1, [r4, #4]
 8001e66:	4302      	orrs	r2, r0
 8001e68:	3901      	subs	r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8001e6e:	4628      	mov	r0, r5
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e70:	6265      	str	r5, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001e72:	f884 6020 	strb.w	r6, [r4, #32]
}
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e78:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 8001e7c:	2001      	movs	r0, #1
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e82:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e84:	f884 2020 	strb.w	r2, [r4, #32]
}
 8001e88:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 8001e8a:	f7ff f989 	bl	80011a0 <HAL_CAN_MspInit>
 8001e8e:	e787      	b.n	8001da0 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8001e90:	2001      	movs	r0, #1
}
 8001e92:	4770      	bx	lr

08001e94 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e94:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001e98:	4602      	mov	r2, r0

  if ((state == HAL_CAN_STATE_READY) ||
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d905      	bls.n	8001eac <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ea0:	6a53      	ldr	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
 8001ea2:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6253      	str	r3, [r2, #36]	; 0x24
  }
}
 8001eaa:	4770      	bx	lr
{
 8001eac:	b4f0      	push	{r4, r5, r6, r7}
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001eae:	2401      	movs	r4, #1
 8001eb0:	6948      	ldr	r0, [r1, #20]
  CAN_TypeDef *can_ip = hcan->Instance;
 8001eb2:	6813      	ldr	r3, [r2, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001eb4:	f000 021f 	and.w	r2, r0, #31
 8001eb8:	fa04 f202 	lsl.w	r2, r4, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ebc:	43d5      	mvns	r5, r2
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ebe:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ec2:	69ce      	ldr	r6, [r1, #28]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ec4:	f044 0401 	orr.w	r4, r4, #1
 8001ec8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ecc:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8001ed0:	402c      	ands	r4, r5
 8001ed2:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ed6:	b3a6      	cbz	r6, 8001f42 <HAL_CAN_ConfigFilter+0xae>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ed8:	2e01      	cmp	r6, #1
 8001eda:	d113      	bne.n	8001f04 <HAL_CAN_ConfigFilter+0x70>
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001edc:	888e      	ldrh	r6, [r1, #4]
 8001ede:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ee2:	6808      	ldr	r0, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ee4:	f8d3 c20c 	ldr.w	ip, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ee8:	688f      	ldr	r7, [r1, #8]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001eea:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001eee:	8988      	ldrh	r0, [r1, #12]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ef0:	ea4c 0c02 	orr.w	ip, ip, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ef4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ef8:	f8c3 c20c 	str.w	ip, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001efc:	f8c4 6240 	str.w	r6, [r4, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f00:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f04:	6988      	ldr	r0, [r1, #24]
 8001f06:	bb98      	cbnz	r0, 8001f70 <HAL_CAN_ConfigFilter+0xdc>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f08:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001f0c:	4028      	ands	r0, r5
 8001f0e:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f12:	6908      	ldr	r0, [r1, #16]
 8001f14:	bba0      	cbnz	r0, 8001f80 <HAL_CAN_ConfigFilter+0xec>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f16:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001f1a:	4028      	ands	r0, r5
 8001f1c:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f20:	6a09      	ldr	r1, [r1, #32]
 8001f22:	2901      	cmp	r1, #1
 8001f24:	d104      	bne.n	8001f30 <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f26:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8001f34:	2000      	movs	r0, #0
}
 8001f36:	bcf0      	pop	{r4, r5, r6, r7}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001f40:	4770      	bx	lr
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f42:	68cc      	ldr	r4, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f44:	888e      	ldrh	r6, [r1, #4]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f46:	f8d3 720c 	ldr.w	r7, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f4a:	f8d1 c008 	ldr.w	ip, [r1, #8]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f4e:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f52:	880c      	ldrh	r4, [r1, #0]
 8001f54:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f58:	402f      	ands	r7, r5
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f5a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f5e:	f8c3 720c 	str.w	r7, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f62:	f8c0 6240 	str.w	r6, [r0, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f66:	f8c0 4244 	str.w	r4, [r0, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f6a:	6988      	ldr	r0, [r1, #24]
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d0cb      	beq.n	8001f08 <HAL_CAN_ConfigFilter+0x74>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f70:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001f74:	4310      	orrs	r0, r2
 8001f76:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f7a:	6908      	ldr	r0, [r1, #16]
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	d0ca      	beq.n	8001f16 <HAL_CAN_ConfigFilter+0x82>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f80:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001f84:	4310      	orrs	r0, r2
 8001f86:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8001f8a:	e7c9      	b.n	8001f20 <HAL_CAN_ConfigFilter+0x8c>

08001f8c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f8c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f8e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d006      	beq.n	8001fa4 <HAL_CAN_Start+0x18>
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f98:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001f9a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001f9e:	6242      	str	r2, [r0, #36]	; 0x24
  }
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fa4:	2302      	movs	r3, #2
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fa6:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fa8:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fac:	6813      	ldr	r3, [r2, #0]
 8001fae:	4604      	mov	r4, r0
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001fb6:	f7ff fed3 	bl	8001d60 <HAL_GetTick>
 8001fba:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fbc:	e004      	b.n	8001fc8 <HAL_CAN_Start+0x3c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fbe:	f7ff fecf 	bl	8001d60 <HAL_GetTick>
 8001fc2:	1b40      	subs	r0, r0, r5
 8001fc4:	280a      	cmp	r0, #10
 8001fc6:	d807      	bhi.n	8001fd8 <HAL_CAN_Start+0x4c>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f013 0301 	ands.w	r3, r3, #1
 8001fd0:	d1f5      	bne.n	8001fbe <HAL_CAN_Start+0x32>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fd2:	6263      	str	r3, [r4, #36]	; 0x24
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd38      	pop	{r3, r4, r5, pc}
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fd8:	2105      	movs	r1, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fda:	6a62      	ldr	r2, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fde:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fe2:	6262      	str	r2, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fe4:	f884 1020 	strb.w	r1, [r4, #32]
        return HAL_ERROR;
 8001fe8:	e7da      	b.n	8001fa0 <HAL_CAN_Start+0x14>
 8001fea:	bf00      	nop

08001fec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fec:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fee:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ff2:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ff4:	3c01      	subs	r4, #1
 8001ff6:	2c01      	cmp	r4, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ff8:	68ae      	ldr	r6, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8001ffa:	d907      	bls.n	800200c <HAL_CAN_AddTxMessage+0x20>
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
 8001ffc:	2201      	movs	r2, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ffe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002004:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 8002006:	4610      	mov	r0, r2
 8002008:	bc70      	pop	{r4, r5, r6}
 800200a:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800200c:	f016 5fe0 	tst.w	r6, #469762048	; 0x1c000000
 8002010:	d02f      	beq.n	8002072 <HAL_CAN_AddTxMessage+0x86>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002012:	f3c6 6601 	ubfx	r6, r6, #24, #2
      if (transmitmailbox > 2U)
 8002016:	2e03      	cmp	r6, #3
 8002018:	d033      	beq.n	8002082 <HAL_CAN_AddTxMessage+0x96>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800201a:	2001      	movs	r0, #1
 800201c:	40b0      	lsls	r0, r6
 800201e:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8002020:	688b      	ldr	r3, [r1, #8]
 8002022:	bba3      	cbnz	r3, 800208e <HAL_CAN_AddTxMessage+0xa2>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002024:	680c      	ldr	r4, [r1, #0]
 8002026:	68c8      	ldr	r0, [r1, #12]
 8002028:	f106 0318 	add.w	r3, r6, #24
 800202c:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	50e8      	str	r0, [r5, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002034:	6908      	ldr	r0, [r1, #16]
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002036:	7d09      	ldrb	r1, [r1, #20]
 8002038:	0136      	lsls	r6, r6, #4
 800203a:	19ab      	adds	r3, r5, r6
 800203c:	2901      	cmp	r1, #1
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800203e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002042:	d105      	bne.n	8002050 <HAL_CAN_AddTxMessage+0x64>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002044:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8002048:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800204c:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002050:	6851      	ldr	r1, [r2, #4]
 8002052:	4435      	add	r5, r6
 8002054:	f8c5 118c 	str.w	r1, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002058:	6811      	ldr	r1, [r2, #0]
      return HAL_OK;
 800205a:	2200      	movs	r2, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800205c:	f8c5 1188 	str.w	r1, [r5, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002060:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
}
 8002064:	4610      	mov	r0, r2
 8002066:	bc70      	pop	{r4, r5, r6}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002068:	f041 0101 	orr.w	r1, r1, #1
 800206c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
}
 8002070:	4770      	bx	lr
      return HAL_ERROR;
 8002072:	2201      	movs	r2, #1
}
 8002074:	bc70      	pop	{r4, r5, r6}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002076:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800207c:	6243      	str	r3, [r0, #36]	; 0x24
}
 800207e:	4610      	mov	r0, r2
 8002080:	4770      	bx	lr
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002082:	6a43      	ldr	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002084:	2201      	movs	r2, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800208a:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800208c:	e7bb      	b.n	8002006 <HAL_CAN_AddTxMessage+0x1a>
                                                           pHeader->IDE |
 800208e:	68c8      	ldr	r0, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002090:	684c      	ldr	r4, [r1, #4]
                                                           pHeader->IDE |
 8002092:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002094:	f106 0018 	add.w	r0, r6, #24
                                                           pHeader->IDE |
 8002098:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800209c:	0100      	lsls	r0, r0, #4
 800209e:	502b      	str	r3, [r5, r0]
 80020a0:	e7c8      	b.n	8002034 <HAL_CAN_AddTxMessage+0x48>
 80020a2:	bf00      	nop

080020a4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80020a8:	f890 5020 	ldrb.w	r5, [r0, #32]
{
 80020ac:	4604      	mov	r4, r0

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020ae:	3d01      	subs	r5, #1
 80020b0:	2d01      	cmp	r5, #1
 80020b2:	d906      	bls.n	80020c2 <HAL_CAN_GetRxMessage+0x1e>
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
 80020b4:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6263      	str	r3, [r4, #36]	; 0x24
  }
}
 80020be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c2:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020c4:	2900      	cmp	r1, #0
 80020c6:	d058      	beq.n	800217a <HAL_CAN_GetRxMessage+0xd6>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020c8:	6928      	ldr	r0, [r5, #16]
 80020ca:	0780      	lsls	r0, r0, #30
 80020cc:	d058      	beq.n	8002180 <HAL_CAN_GetRxMessage+0xdc>
 80020ce:	0108      	lsls	r0, r1, #4
 80020d0:	182e      	adds	r6, r5, r0
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020d2:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80020d6:	f007 0704 	and.w	r7, r7, #4
 80020da:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020dc:	2f00      	cmp	r7, #0
 80020de:	d15c      	bne.n	800219a <HAL_CAN_GetRxMessage+0xf6>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020e0:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80020e4:	0d7f      	lsrs	r7, r7, #21
 80020e6:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020e8:	f8d6 e1b0 	ldr.w	lr, [r6, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020ec:	4405      	add	r5, r0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020ee:	f8d6 c1b4 	ldr.w	ip, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020f2:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020f6:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020fa:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020fe:	f00e 0e02 	and.w	lr, lr, #2
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002102:	f00c 050f 	and.w	r5, ip, #15
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002106:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800210a:	0c36      	lsrs	r6, r6, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800210c:	e9c2 e503 	strd	lr, r5, [r2, #12]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002110:	e9c2 6705 	strd	r6, r7, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002114:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002118:	6822      	ldr	r2, [r4, #0]
 800211a:	4402      	add	r2, r0
 800211c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8002120:	0a12      	lsrs	r2, r2, #8
 8002122:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002124:	6822      	ldr	r2, [r4, #0]
 8002126:	4402      	add	r2, r0
 8002128:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800212c:	0c12      	lsrs	r2, r2, #16
 800212e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002130:	6822      	ldr	r2, [r4, #0]
 8002132:	4402      	add	r2, r0
 8002134:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8002138:	0e12      	lsrs	r2, r2, #24
 800213a:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800213c:	6822      	ldr	r2, [r4, #0]
 800213e:	4402      	add	r2, r0
 8002140:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002144:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002146:	6822      	ldr	r2, [r4, #0]
 8002148:	4402      	add	r2, r0
 800214a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800214e:	0a12      	lsrs	r2, r2, #8
 8002150:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002152:	6822      	ldr	r2, [r4, #0]
 8002154:	4402      	add	r2, r0
 8002156:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800215a:	0c12      	lsrs	r2, r2, #16
 800215c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800215e:	6822      	ldr	r2, [r4, #0]
 8002160:	4410      	add	r0, r2
 8002162:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
 8002166:	0e12      	lsrs	r2, r2, #24
 8002168:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800216a:	6822      	ldr	r2, [r4, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800216c:	b979      	cbnz	r1, 800218e <HAL_CAN_GetRxMessage+0xea>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800216e:	68d3      	ldr	r3, [r2, #12]
    return HAL_OK;
 8002170:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002172:	f043 0320 	orr.w	r3, r3, #32
 8002176:	60d3      	str	r3, [r2, #12]
 8002178:	e7a1      	b.n	80020be <HAL_CAN_GetRxMessage+0x1a>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800217a:	68e8      	ldr	r0, [r5, #12]
 800217c:	0786      	lsls	r6, r0, #30
 800217e:	d1a6      	bne.n	80020ce <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002180:	6a63      	ldr	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8002182:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002184:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002188:	6263      	str	r3, [r4, #36]	; 0x24
}
 800218a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800218e:	6913      	ldr	r3, [r2, #16]
    return HAL_OK;
 8002190:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002192:	f043 0320 	orr.w	r3, r3, #32
 8002196:	6113      	str	r3, [r2, #16]
 8002198:	e791      	b.n	80020be <HAL_CAN_GetRxMessage+0x1a>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800219a:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 800219e:	08ff      	lsrs	r7, r7, #3
 80021a0:	6057      	str	r7, [r2, #4]
 80021a2:	e7a1      	b.n	80020e8 <HAL_CAN_GetRxMessage+0x44>

080021a4 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80021a4:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80021a8:	4602      	mov	r2, r0

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021aa:	3b01      	subs	r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d905      	bls.n	80021bc <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021b0:	6a53      	ldr	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
 80021b2:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b8:	6253      	str	r3, [r2, #36]	; 0x24
  }
}
 80021ba:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021bc:	6802      	ldr	r2, [r0, #0]
    return HAL_OK;
 80021be:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021c0:	6953      	ldr	r3, [r2, #20]
 80021c2:	4319      	orrs	r1, r3
 80021c4:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80021c6:	4770      	bx	lr

080021c8 <HAL_CAN_TxMailbox0CompleteCallback>:
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop

080021cc <HAL_CAN_TxMailbox1CompleteCallback>:
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop

080021d0 <HAL_CAN_TxMailbox2CompleteCallback>:
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop

080021d4 <HAL_CAN_TxMailbox0AbortCallback>:
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop

080021d8 <HAL_CAN_TxMailbox1AbortCallback>:
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop

080021dc <HAL_CAN_TxMailbox2AbortCallback>:
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <HAL_CAN_RxFifo0FullCallback>:
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop

080021e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <HAL_CAN_RxFifo1FullCallback>:
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop

080021ec <HAL_CAN_SleepCallback>:
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop

080021f0 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop

080021f4 <HAL_CAN_ErrorCallback>:
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop

080021f8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021fc:	6803      	ldr	r3, [r0, #0]
{
 80021fe:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002200:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002202:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002206:	f014 0601 	ands.w	r6, r4, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800220a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800220c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002210:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002214:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002218:	d025      	beq.n	8002266 <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800221a:	f017 0601 	ands.w	r6, r7, #1
 800221e:	f040 809c 	bne.w	800235a <HAL_CAN_IRQHandler+0x162>
 8002222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002226:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800222a:	05f8      	lsls	r0, r7, #23
 800222c:	d50d      	bpl.n	800224a <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800222e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002232:	682b      	ldr	r3, [r5, #0]
 8002234:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002236:	05bb      	lsls	r3, r7, #22
 8002238:	f100 80c7 	bmi.w	80023ca <HAL_CAN_IRQHandler+0x1d2>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800223c:	0578      	lsls	r0, r7, #21
 800223e:	f100 80d7 	bmi.w	80023f0 <HAL_CAN_IRQHandler+0x1f8>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002242:	053a      	lsls	r2, r7, #20
 8002244:	f140 80e8 	bpl.w	8002418 <HAL_CAN_IRQHandler+0x220>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002248:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800224a:	03fb      	lsls	r3, r7, #15
 800224c:	d50b      	bpl.n	8002266 <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800224e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002252:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002254:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002256:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002258:	f100 80b3 	bmi.w	80023c2 <HAL_CAN_IRQHandler+0x1ca>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800225c:	0379      	lsls	r1, r7, #13
 800225e:	f140 80c9 	bpl.w	80023f4 <HAL_CAN_IRQHandler+0x1fc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002262:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002266:	0723      	lsls	r3, r4, #28
 8002268:	d502      	bpl.n	8002270 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800226a:	f01b 0f10 	tst.w	fp, #16
 800226e:	d16e      	bne.n	800234e <HAL_CAN_IRQHandler+0x156>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002270:	0767      	lsls	r7, r4, #29
 8002272:	d502      	bpl.n	800227a <HAL_CAN_IRQHandler+0x82>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002274:	f01b 0f08 	tst.w	fp, #8
 8002278:	d17f      	bne.n	800237a <HAL_CAN_IRQHandler+0x182>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800227a:	07a0      	lsls	r0, r4, #30
 800227c:	d504      	bpl.n	8002288 <HAL_CAN_IRQHandler+0x90>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800227e:	682b      	ldr	r3, [r5, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	0799      	lsls	r1, r3, #30
 8002284:	f040 808e 	bne.w	80023a4 <HAL_CAN_IRQHandler+0x1ac>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002288:	0662      	lsls	r2, r4, #25
 800228a:	d502      	bpl.n	8002292 <HAL_CAN_IRQHandler+0x9a>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800228c:	f019 0f10 	tst.w	r9, #16
 8002290:	d157      	bne.n	8002342 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002292:	06a3      	lsls	r3, r4, #26
 8002294:	d503      	bpl.n	800229e <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002296:	f019 0f08 	tst.w	r9, #8
 800229a:	f040 8087 	bne.w	80023ac <HAL_CAN_IRQHandler+0x1b4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800229e:	06e7      	lsls	r7, r4, #27
 80022a0:	d504      	bpl.n	80022ac <HAL_CAN_IRQHandler+0xb4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022a2:	682b      	ldr	r3, [r5, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	0798      	lsls	r0, r3, #30
 80022a8:	f040 8087 	bne.w	80023ba <HAL_CAN_IRQHandler+0x1c2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022ac:	03a1      	lsls	r1, r4, #14
 80022ae:	d502      	bpl.n	80022b6 <HAL_CAN_IRQHandler+0xbe>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022b0:	f018 0f10 	tst.w	r8, #16
 80022b4:	d168      	bne.n	8002388 <HAL_CAN_IRQHandler+0x190>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022b6:	03e2      	lsls	r2, r4, #15
 80022b8:	d502      	bpl.n	80022c0 <HAL_CAN_IRQHandler+0xc8>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022ba:	f018 0f08 	tst.w	r8, #8
 80022be:	d16a      	bne.n	8002396 <HAL_CAN_IRQHandler+0x19e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022c0:	0423      	lsls	r3, r4, #16
 80022c2:	d535      	bpl.n	8002330 <HAL_CAN_IRQHandler+0x138>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022c4:	f018 0f04 	tst.w	r8, #4
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	d02f      	beq.n	800232c <HAL_CAN_IRQHandler+0x134>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022cc:	05e7      	lsls	r7, r4, #23
 80022ce:	d504      	bpl.n	80022da <HAL_CAN_IRQHandler+0xe2>
 80022d0:	f01a 0f01 	tst.w	sl, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022d4:	bf18      	it	ne
 80022d6:	f046 0601 	orrne.w	r6, r6, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022da:	05a0      	lsls	r0, r4, #22
 80022dc:	d504      	bpl.n	80022e8 <HAL_CAN_IRQHandler+0xf0>
 80022de:	f01a 0f02 	tst.w	sl, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022e2:	bf18      	it	ne
 80022e4:	f046 0602 	orrne.w	r6, r6, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022e8:	0561      	lsls	r1, r4, #21
 80022ea:	d504      	bpl.n	80022f6 <HAL_CAN_IRQHandler+0xfe>
 80022ec:	f01a 0f04 	tst.w	sl, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022f0:	bf18      	it	ne
 80022f2:	f046 0604 	orrne.w	r6, r6, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022f6:	0522      	lsls	r2, r4, #20
 80022f8:	d518      	bpl.n	800232c <HAL_CAN_IRQHandler+0x134>
 80022fa:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 80022fe:	d015      	beq.n	800232c <HAL_CAN_IRQHandler+0x134>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8002300:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8002304:	f000 8096 	beq.w	8002434 <HAL_CAN_IRQHandler+0x23c>
 8002308:	d979      	bls.n	80023fe <HAL_CAN_IRQHandler+0x206>
 800230a:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 800230e:	f000 808e 	beq.w	800242e <HAL_CAN_IRQHandler+0x236>
 8002312:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8002316:	f000 8090 	beq.w	800243a <HAL_CAN_IRQHandler+0x242>
 800231a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800231e:	d101      	bne.n	8002324 <HAL_CAN_IRQHandler+0x12c>
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
            break;
          case (CAN_ESR_LEC_2):
            /* Set CAN error code to Bit recessive error */
            errorcode |= HAL_CAN_ERROR_BR;
 8002320:	f046 0640 	orr.w	r6, r6, #64	; 0x40
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800232a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800232c:	2204      	movs	r2, #4
 800232e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002330:	b12e      	cbz	r6, 800233e <HAL_CAN_IRQHandler+0x146>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002334:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8002336:	431e      	orrs	r6, r3
 8002338:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800233a:	f7ff ff5b 	bl	80021f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800233e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002342:	2210      	movs	r2, #16
 8002344:	682b      	ldr	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002346:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800234a:	611a      	str	r2, [r3, #16]
 800234c:	e7a1      	b.n	8002292 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800234e:	2210      	movs	r2, #16
 8002350:	682b      	ldr	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002352:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002356:	60da      	str	r2, [r3, #12]
 8002358:	e78a      	b.n	8002270 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800235a:	2201      	movs	r2, #1
 800235c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800235e:	07bb      	lsls	r3, r7, #30
 8002360:	d437      	bmi.n	80023d2 <HAL_CAN_IRQHandler+0x1da>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002362:	077e      	lsls	r6, r7, #29
 8002364:	d43d      	bmi.n	80023e2 <HAL_CAN_IRQHandler+0x1ea>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002366:	f017 0608 	ands.w	r6, r7, #8
 800236a:	d059      	beq.n	8002420 <HAL_CAN_IRQHandler+0x228>
 800236c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002370:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002374:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8002378:	e757      	b.n	800222a <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800237a:	2208      	movs	r2, #8
 800237c:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800237e:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002380:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002382:	f7ff ff2d 	bl	80021e0 <HAL_CAN_RxFifo0FullCallback>
 8002386:	e778      	b.n	800227a <HAL_CAN_IRQHandler+0x82>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002388:	2210      	movs	r2, #16
 800238a:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 800238c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800238e:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8002390:	f7ff ff2c 	bl	80021ec <HAL_CAN_SleepCallback>
 8002394:	e78f      	b.n	80022b6 <HAL_CAN_IRQHandler+0xbe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002396:	2208      	movs	r2, #8
 8002398:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800239a:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800239c:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800239e:	f7ff ff27 	bl	80021f0 <HAL_CAN_WakeUpFromRxMsgCallback>
 80023a2:	e78d      	b.n	80022c0 <HAL_CAN_IRQHandler+0xc8>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023a4:	4628      	mov	r0, r5
 80023a6:	f005 fcab 	bl	8007d00 <HAL_CAN_RxFifo0MsgPendingCallback>
 80023aa:	e76d      	b.n	8002288 <HAL_CAN_IRQHandler+0x90>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023ac:	2208      	movs	r2, #8
 80023ae:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023b0:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023b2:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023b4:	f7ff ff18 	bl	80021e8 <HAL_CAN_RxFifo1FullCallback>
 80023b8:	e771      	b.n	800229e <HAL_CAN_IRQHandler+0xa6>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023ba:	4628      	mov	r0, r5
 80023bc:	f7ff ff12 	bl	80021e4 <HAL_CAN_RxFifo1MsgPendingCallback>
 80023c0:	e774      	b.n	80022ac <HAL_CAN_IRQHandler+0xb4>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023c2:	4628      	mov	r0, r5
 80023c4:	f7ff ff04 	bl	80021d0 <HAL_CAN_TxMailbox2CompleteCallback>
 80023c8:	e74d      	b.n	8002266 <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80023ca:	4628      	mov	r0, r5
 80023cc:	f7ff fefe 	bl	80021cc <HAL_CAN_TxMailbox1CompleteCallback>
 80023d0:	e73b      	b.n	800224a <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80023d2:	f7ff fef9 	bl	80021c8 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023d6:	2600      	movs	r6, #0
 80023d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023e0:	e723      	b.n	800222a <HAL_CAN_IRQHandler+0x32>
 80023e2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80023e6:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023ea:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80023ee:	e71c      	b.n	800222a <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023f0:	4616      	mov	r6, r2
 80023f2:	e72a      	b.n	800224a <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023f4:	033a      	lsls	r2, r7, #12
 80023f6:	d50b      	bpl.n	8002410 <HAL_CAN_IRQHandler+0x218>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023f8:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80023fc:	e733      	b.n	8002266 <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 80023fe:	f1ba 0f10 	cmp.w	sl, #16
 8002402:	d01d      	beq.n	8002440 <HAL_CAN_IRQHandler+0x248>
 8002404:	f1ba 0f20 	cmp.w	sl, #32
 8002408:	d18c      	bne.n	8002324 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_FOR;
 800240a:	f046 0610 	orr.w	r6, r6, #16
            break;
 800240e:	e789      	b.n	8002324 <HAL_CAN_IRQHandler+0x12c>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002410:	4628      	mov	r0, r5
 8002412:	f7ff fee3 	bl	80021dc <HAL_CAN_TxMailbox2AbortCallback>
 8002416:	e726      	b.n	8002266 <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002418:	4628      	mov	r0, r5
 800241a:	f7ff fedd 	bl	80021d8 <HAL_CAN_TxMailbox1AbortCallback>
 800241e:	e714      	b.n	800224a <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002420:	f7ff fed8 	bl	80021d4 <HAL_CAN_TxMailbox0AbortCallback>
 8002424:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800242c:	e6fd      	b.n	800222a <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 800242e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8002432:	e777      	b.n	8002324 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002434:	f046 0620 	orr.w	r6, r6, #32
            break;
 8002438:	e774      	b.n	8002324 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_CRC;
 800243a:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 800243e:	e771      	b.n	8002324 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002440:	f046 0608 	orr.w	r6, r6, #8
            break;
 8002444:	e76e      	b.n	8002324 <HAL_CAN_IRQHandler+0x12c>
 8002446:	bf00      	nop

08002448 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002448:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800244e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002452:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	400b      	ands	r3, r1
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002460:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002462:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246e:	b430      	push	{r4, r5}
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002476:	f1c3 0507 	rsb	r5, r3, #7
 800247a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	bf28      	it	cs
 8002482:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002484:	2c06      	cmp	r4, #6
 8002486:	d919      	bls.n	80024bc <HAL_NVIC_SetPriority+0x50>
 8002488:	f04f 34ff 	mov.w	r4, #4294967295
 800248c:	3b03      	subs	r3, #3
 800248e:	409c      	lsls	r4, r3
 8002490:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	40aa      	lsls	r2, r5
 800249a:	ea21 0102 	bic.w	r1, r1, r2
 800249e:	fa01 f203 	lsl.w	r2, r1, r3
 80024a2:	4322      	orrs	r2, r4
 80024a4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80024a6:	2800      	cmp	r0, #0
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	db0a      	blt.n	80024c2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80024b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80024b4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80024b8:	bc30      	pop	{r4, r5}
 80024ba:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024bc:	2400      	movs	r4, #0
 80024be:	4623      	mov	r3, r4
 80024c0:	e7e8      	b.n	8002494 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_NVIC_SetPriority+0x68>)
 80024c4:	f000 000f 	and.w	r0, r0, #15
 80024c8:	4403      	add	r3, r0
 80024ca:	761a      	strb	r2, [r3, #24]
 80024cc:	bc30      	pop	{r4, r5}
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00
 80024d4:	e000ecfc 	.word	0xe000ecfc

080024d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024d8:	2800      	cmp	r0, #0
 80024da:	db07      	blt.n	80024ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024dc:	2301      	movs	r3, #1
 80024de:	f000 011f 	and.w	r1, r0, #31
 80024e2:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <HAL_NVIC_EnableIRQ+0x18>)
 80024e4:	408b      	lsls	r3, r1
 80024e6:	0940      	lsrs	r0, r0, #5
 80024e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000e100 	.word	0xe000e100

080024f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	3801      	subs	r0, #1
 80024f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80024fa:	d20d      	bcs.n	8002518 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fc:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002502:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002506:	4c06      	ldr	r4, [pc, #24]	; (8002520 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002508:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250e:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8002510:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002512:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002514:	6019      	str	r1, [r3, #0]
 8002516:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002518:	2001      	movs	r0, #1
 800251a:	4770      	bx	lr
 800251c:	e000e010 	.word	0xe000e010
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002524:	b180      	cbz	r0, 8002548 <HAL_CRC_Init+0x24>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002526:	7943      	ldrb	r3, [r0, #5]
{
 8002528:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800252a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800252e:	4604      	mov	r4, r0
 8002530:	b11b      	cbz	r3, 800253a <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002532:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8002534:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8002536:	7163      	strb	r3, [r4, #5]
}
 8002538:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800253a:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 800253c:	f7fe fe86 	bl	800124c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 8002540:	2301      	movs	r3, #1
  return HAL_OK;
 8002542:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8002544:	7163      	strb	r3, [r4, #5]
}
 8002546:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002548:	2001      	movs	r0, #1
}
 800254a:	4770      	bx	lr

0800254c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800254c:	b350      	cbz	r0, 80025a4 <HAL_DMA_Init+0x58>
 800254e:	4602      	mov	r2, r0
{
 8002550:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002552:	e9d0 3601 	ldrd	r3, r6, [r0, #4]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002556:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002558:	2501      	movs	r5, #1
  tmp |=  hdma->Init.Direction        |
 800255a:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255c:	68d6      	ldr	r6, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800255e:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002560:	4333      	orrs	r3, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002562:	4911      	ldr	r1, [pc, #68]	; (80025a8 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002564:	6916      	ldr	r6, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002566:	4f11      	ldr	r7, [pc, #68]	; (80025ac <HAL_DMA_Init+0x60>)
 8002568:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256a:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256c:	6956      	ldr	r6, [r2, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800256e:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002572:	4333      	orrs	r3, r6
 8002574:	6996      	ldr	r6, [r2, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8002576:	69d7      	ldr	r7, [r2, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002578:	4333      	orrs	r3, r6
  tmp = hdma->Instance->CCR;
 800257a:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800257c:	0909      	lsrs	r1, r1, #4
 800257e:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002580:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002584:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002586:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800258a:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800258c:	4908      	ldr	r1, [pc, #32]	; (80025b0 <HAL_DMA_Init+0x64>)
  tmp |=  hdma->Init.Direction        |
 800258e:	4333      	orrs	r3, r6
  hdma->DmaBaseAddress = DMA1;
 8002590:	63d1      	str	r1, [r2, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8002592:	6003      	str	r3, [r0, #0]
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8002594:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002596:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8002598:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 800259c:	f882 5021 	strb.w	r5, [r2, #33]	; 0x21
}
 80025a0:	bcf0      	pop	{r4, r5, r6, r7}
 80025a2:	4770      	bx	lr
    return HAL_ERROR;
 80025a4:	2001      	movs	r0, #1
}
 80025a6:	4770      	bx	lr
 80025a8:	bffdfff8 	.word	0xbffdfff8
 80025ac:	cccccccd 	.word	0xcccccccd
 80025b0:	40020000 	.word	0x40020000

080025b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025b4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025b6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80025ba:	2c01      	cmp	r4, #1
 80025bc:	d032      	beq.n	8002624 <HAL_DMA_Start_IT+0x70>
 80025be:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025c0:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80025c4:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80025c8:	42a5      	cmp	r5, r4
 80025ca:	d125      	bne.n	8002618 <HAL_DMA_Start_IT+0x64>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025cc:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ce:	f04f 0e02 	mov.w	lr, #2
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025d2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d4:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80025d6:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025d8:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80025da:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 80025de:	40bd      	lsls	r5, r7
    __HAL_DMA_DISABLE(hdma);
 80025e0:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025e4:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e6:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 80025ea:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025ec:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 80025f0:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 80025f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025f4:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025f6:	bf0b      	itete	eq
 80025f8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80025fa:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80025fc:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80025fe:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002600:	b19b      	cbz	r3, 800262a <HAL_DMA_Start_IT+0x76>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	f043 030e 	orr.w	r3, r3, #14
 8002608:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 800260c:	6822      	ldr	r2, [r4, #0]
}
 800260e:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	6022      	str	r2, [r4, #0]
}
 8002616:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 8002618:	2200      	movs	r2, #0
    status = HAL_BUSY;
 800261a:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 800261c:	f880 2020 	strb.w	r2, [r0, #32]
}
 8002620:	4618      	mov	r0, r3
 8002622:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8002624:	2302      	movs	r3, #2
}
 8002626:	4618      	mov	r0, r3
 8002628:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	f043 030a 	orr.w	r3, r3, #10
 8002638:	6023      	str	r3, [r4, #0]
 800263a:	e7e6      	b.n	800260a <HAL_DMA_Start_IT+0x56>

0800263c <HAL_DMA_Abort_IT>:
{  
 800263c:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800263e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002642:	2b02      	cmp	r3, #2
 8002644:	d004      	beq.n	8002650 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002646:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8002648:	2401      	movs	r4, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264a:	6382      	str	r2, [r0, #56]	; 0x38
}
 800264c:	4620      	mov	r0, r4
 800264e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002650:	6803      	ldr	r3, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002652:	491d      	ldr	r1, [pc, #116]	; (80026c8 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002654:	681a      	ldr	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002656:	428b      	cmp	r3, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002658:	f022 020e 	bic.w	r2, r2, #14
 800265c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002666:	d021      	beq.n	80026ac <HAL_DMA_Abort_IT+0x70>
 8002668:	4a18      	ldr	r2, [pc, #96]	; (80026cc <HAL_DMA_Abort_IT+0x90>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01c      	beq.n	80026a8 <HAL_DMA_Abort_IT+0x6c>
 800266e:	3214      	adds	r2, #20
 8002670:	4293      	cmp	r3, r2
 8002672:	d01d      	beq.n	80026b0 <HAL_DMA_Abort_IT+0x74>
 8002674:	3214      	adds	r2, #20
 8002676:	4293      	cmp	r3, r2
 8002678:	d01d      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x7a>
 800267a:	3214      	adds	r2, #20
 800267c:	4293      	cmp	r3, r2
 800267e:	d01d      	beq.n	80026bc <HAL_DMA_Abort_IT+0x80>
 8002680:	3214      	adds	r2, #20
 8002682:	4293      	cmp	r3, r2
 8002684:	bf0c      	ite	eq
 8002686:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800268a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 800268e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8002690:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002692:	4d0f      	ldr	r5, [pc, #60]	; (80026d0 <HAL_DMA_Abort_IT+0x94>)
    if(hdma->XferAbortCallback != NULL)
 8002694:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002696:	606b      	str	r3, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002698:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800269c:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80026a0:	b17a      	cbz	r2, 80026c2 <HAL_DMA_Abort_IT+0x86>
      hdma->XferAbortCallback(hdma);
 80026a2:	4790      	blx	r2
}
 80026a4:	4620      	mov	r0, r4
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026a8:	2310      	movs	r3, #16
 80026aa:	e7f0      	b.n	800268e <HAL_DMA_Abort_IT+0x52>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e7ee      	b.n	800268e <HAL_DMA_Abort_IT+0x52>
 80026b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b4:	e7eb      	b.n	800268e <HAL_DMA_Abort_IT+0x52>
 80026b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ba:	e7e8      	b.n	800268e <HAL_DMA_Abort_IT+0x52>
 80026bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c0:	e7e5      	b.n	800268e <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	4614      	mov	r4, r2
 80026c4:	e7c2      	b.n	800264c <HAL_DMA_Abort_IT+0x10>
 80026c6:	bf00      	nop
 80026c8:	40020008 	.word	0x40020008
 80026cc:	4002001c 	.word	0x4002001c
 80026d0:	40020000 	.word	0x40020000

080026d4 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026d4:	2204      	movs	r2, #4
{
 80026d6:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026d8:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026dc:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80026de:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026e0:	408a      	lsls	r2, r1
 80026e2:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80026e4:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026e6:	d01f      	beq.n	8002728 <HAL_DMA_IRQHandler+0x54>
 80026e8:	076a      	lsls	r2, r5, #29
 80026ea:	d51d      	bpl.n	8002728 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	0691      	lsls	r1, r2, #26
 80026f0:	d403      	bmi.n	80026fa <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	f022 0204 	bic.w	r2, r2, #4
 80026f8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026fa:	4a3f      	ldr	r2, [pc, #252]	; (80027f8 <HAL_DMA_IRQHandler+0x124>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d05c      	beq.n	80027ba <HAL_DMA_IRQHandler+0xe6>
 8002700:	3214      	adds	r2, #20
 8002702:	4293      	cmp	r3, r2
 8002704:	d061      	beq.n	80027ca <HAL_DMA_IRQHandler+0xf6>
 8002706:	3214      	adds	r2, #20
 8002708:	4293      	cmp	r3, r2
 800270a:	d068      	beq.n	80027de <HAL_DMA_IRQHandler+0x10a>
 800270c:	3214      	adds	r2, #20
 800270e:	4293      	cmp	r3, r2
 8002710:	d06b      	beq.n	80027ea <HAL_DMA_IRQHandler+0x116>
 8002712:	3214      	adds	r2, #20
 8002714:	4293      	cmp	r3, r2
 8002716:	d05d      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x100>
 8002718:	3214      	adds	r2, #20
 800271a:	4293      	cmp	r3, r2
 800271c:	bf0c      	ite	eq
 800271e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002722:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002726:	e049      	b.n	80027bc <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002728:	2202      	movs	r2, #2
 800272a:	408a      	lsls	r2, r1
 800272c:	4222      	tst	r2, r4
 800272e:	d022      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
 8002730:	07aa      	lsls	r2, r5, #30
 8002732:	d520      	bpl.n	8002776 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	0691      	lsls	r1, r2, #26
 8002738:	d406      	bmi.n	8002748 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 800273a:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	f022 020a 	bic.w	r2, r2, #10
 8002742:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002744:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002748:	4a2b      	ldr	r2, [pc, #172]	; (80027f8 <HAL_DMA_IRQHandler+0x124>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d02b      	beq.n	80027a6 <HAL_DMA_IRQHandler+0xd2>
 800274e:	3214      	adds	r2, #20
 8002750:	4293      	cmp	r3, r2
 8002752:	d042      	beq.n	80027da <HAL_DMA_IRQHandler+0x106>
 8002754:	3214      	adds	r2, #20
 8002756:	4293      	cmp	r3, r2
 8002758:	d044      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x110>
 800275a:	3214      	adds	r2, #20
 800275c:	4293      	cmp	r3, r2
 800275e:	d036      	beq.n	80027ce <HAL_DMA_IRQHandler+0xfa>
 8002760:	3214      	adds	r2, #20
 8002762:	4293      	cmp	r3, r2
 8002764:	d044      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x11c>
 8002766:	3214      	adds	r2, #20
 8002768:	4293      	cmp	r3, r2
 800276a:	bf0c      	ite	eq
 800276c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002770:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002774:	e018      	b.n	80027a8 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002776:	2208      	movs	r2, #8
 8002778:	408a      	lsls	r2, r1
 800277a:	4222      	tst	r2, r4
 800277c:	d01b      	beq.n	80027b6 <HAL_DMA_IRQHandler+0xe2>
 800277e:	072a      	lsls	r2, r5, #28
 8002780:	d519      	bpl.n	80027b6 <HAL_DMA_IRQHandler+0xe2>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002782:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8002784:	2500      	movs	r5, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002786:	681c      	ldr	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002788:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800278c:	f024 040e 	bic.w	r4, r4, #14
 8002790:	601c      	str	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8002792:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002794:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002796:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002798:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800279c:	f880 5020 	strb.w	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80027a0:	b14b      	cbz	r3, 80027b6 <HAL_DMA_IRQHandler+0xe2>
}
 80027a2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80027a4:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027a6:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80027a8:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027aa:	4c14      	ldr	r4, [pc, #80]	; (80027fc <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 80027ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027ae:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 80027b0:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80027b4:	b93a      	cbnz	r2, 80027c6 <HAL_DMA_IRQHandler+0xf2>
}
 80027b6:	bc70      	pop	{r4, r5, r6}
 80027b8:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027ba:	2304      	movs	r3, #4
 80027bc:	490f      	ldr	r1, [pc, #60]	; (80027fc <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 80027be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027c0:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80027c2:	2a00      	cmp	r2, #0
 80027c4:	d0f7      	beq.n	80027b6 <HAL_DMA_IRQHandler+0xe2>
}
 80027c6:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80027c8:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027ca:	2340      	movs	r3, #64	; 0x40
 80027cc:	e7f6      	b.n	80027bc <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027d2:	e7e9      	b.n	80027a8 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027d8:	e7f0      	b.n	80027bc <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027da:	2320      	movs	r3, #32
 80027dc:	e7e4      	b.n	80027a8 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e2:	e7eb      	b.n	80027bc <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e8:	e7de      	b.n	80027a8 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027ee:	e7e5      	b.n	80027bc <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f4:	e7d8      	b.n	80027a8 <HAL_DMA_IRQHandler+0xd4>
 80027f6:	bf00      	nop
 80027f8:	40020008 	.word	0x40020008
 80027fc:	40020000 	.word	0x40020000

08002800 <HAL_DMA_GetState>:
}
 8002800:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop

08002808 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002808:	680a      	ldr	r2, [r1, #0]
 800280a:	2a00      	cmp	r2, #0
 800280c:	f000 80db 	beq.w	80029c6 <HAL_GPIO_Init+0x1be>
{
 8002810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8002814:	f04f 0a00 	mov.w	sl, #0
{
 8002818:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 800281a:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800281c:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80029f0 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002820:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80029f4 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002824:	4f6d      	ldr	r7, [pc, #436]	; (80029dc <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002826:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80029f8 <HAL_GPIO_Init+0x1f0>
 800282a:	e003      	b.n	8002834 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 800282c:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282e:	fa32 f305 	lsrs.w	r3, r2, r5
 8002832:	d078      	beq.n	8002926 <HAL_GPIO_Init+0x11e>
    ioposition = (0x01uL << position);
 8002834:	2301      	movs	r3, #1
 8002836:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002838:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 800283c:	42a3      	cmp	r3, r4
 800283e:	d1f5      	bne.n	800282c <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8002840:	684a      	ldr	r2, [r1, #4]
 8002842:	2a12      	cmp	r2, #18
 8002844:	f000 809e 	beq.w	8002984 <HAL_GPIO_Init+0x17c>
 8002848:	f200 8087 	bhi.w	800295a <HAL_GPIO_Init+0x152>
 800284c:	2a02      	cmp	r2, #2
 800284e:	f000 809d 	beq.w	800298c <HAL_GPIO_Init+0x184>
 8002852:	d97c      	bls.n	800294e <HAL_GPIO_Init+0x146>
 8002854:	2a03      	cmp	r2, #3
 8002856:	d069      	beq.n	800292c <HAL_GPIO_Init+0x124>
 8002858:	2a11      	cmp	r2, #17
 800285a:	d102      	bne.n	8002862 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800285c:	68cb      	ldr	r3, [r1, #12]
 800285e:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002862:	2cff      	cmp	r4, #255	; 0xff
 8002864:	d866      	bhi.n	8002934 <HAL_GPIO_Init+0x12c>
 8002866:	4681      	mov	r9, r0
 8002868:	6803      	ldr	r3, [r0, #0]
 800286a:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800286c:	260f      	movs	r6, #15
 800286e:	fa06 fb02 	lsl.w	fp, r6, r2
 8002872:	ea23 030b 	bic.w	r3, r3, fp
 8002876:	fa0a f202 	lsl.w	r2, sl, r2
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002880:	684a      	ldr	r2, [r1, #4]
 8002882:	00d3      	lsls	r3, r2, #3
 8002884:	d561      	bpl.n	800294a <HAL_GPIO_Init+0x142>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002886:	f8dc 9018 	ldr.w	r9, [ip, #24]
 800288a:	f025 0303 	bic.w	r3, r5, #3
 800288e:	f049 0901 	orr.w	r9, r9, #1
 8002892:	f8cc 9018 	str.w	r9, [ip, #24]
 8002896:	f8dc 9018 	ldr.w	r9, [ip, #24]
 800289a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800289e:	f009 0901 	and.w	r9, r9, #1
 80028a2:	f8cd 900c 	str.w	r9, [sp, #12]
 80028a6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028aa:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028b2:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80028b6:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ba:	fa06 f609 	lsl.w	r6, r6, r9
 80028be:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028c2:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028c4:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028c6:	d011      	beq.n	80028ec <HAL_GPIO_Init+0xe4>
 80028c8:	4540      	cmp	r0, r8
 80028ca:	d063      	beq.n	8002994 <HAL_GPIO_Init+0x18c>
 80028cc:	4e44      	ldr	r6, [pc, #272]	; (80029e0 <HAL_GPIO_Init+0x1d8>)
 80028ce:	42b0      	cmp	r0, r6
 80028d0:	d07a      	beq.n	80029c8 <HAL_GPIO_Init+0x1c0>
 80028d2:	4e44      	ldr	r6, [pc, #272]	; (80029e4 <HAL_GPIO_Init+0x1dc>)
 80028d4:	42b0      	cmp	r0, r6
 80028d6:	bf0c      	ite	eq
 80028d8:	f04f 0b03 	moveq.w	fp, #3
 80028dc:	f04f 0b04 	movne.w	fp, #4
 80028e0:	9e01      	ldr	r6, [sp, #4]
 80028e2:	fa0b f909 	lsl.w	r9, fp, r9
 80028e6:	ea46 0609 	orr.w	r6, r6, r9
 80028ea:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80028ec:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80028ee:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f0:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 80028f2:	bf4c      	ite	mi
 80028f4:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028f6:	43a3      	bicpl	r3, r4
 80028f8:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80028fa:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028fc:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 80028fe:	bf4c      	ite	mi
 8002900:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002902:	43a3      	bicpl	r3, r4
 8002904:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002906:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002908:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 800290a:	bf4c      	ite	mi
 800290c:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800290e:	43a3      	bicpl	r3, r4
 8002910:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002912:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8002914:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002916:	d515      	bpl.n	8002944 <HAL_GPIO_Init+0x13c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8002918:	431c      	orrs	r4, r3
 800291a:	60fc      	str	r4, [r7, #12]
 800291c:	680a      	ldr	r2, [r1, #0]
	position++;
 800291e:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002920:	fa32 f305 	lsrs.w	r3, r2, r5
 8002924:	d186      	bne.n	8002834 <HAL_GPIO_Init+0x2c>
  }
}
 8002926:	b005      	add	sp, #20
 8002928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800292c:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800292e:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002932:	d998      	bls.n	8002866 <HAL_GPIO_Init+0x5e>
 8002934:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 8002938:	3a08      	subs	r2, #8
 800293a:	6843      	ldr	r3, [r0, #4]
 800293c:	0092      	lsls	r2, r2, #2
 800293e:	f100 0904 	add.w	r9, r0, #4
 8002942:	e793      	b.n	800286c <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002944:	ea23 0404 	bic.w	r4, r3, r4
 8002948:	60fc      	str	r4, [r7, #12]
 800294a:	680a      	ldr	r2, [r1, #0]
 800294c:	e76e      	b.n	800282c <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 800294e:	b1a2      	cbz	r2, 800297a <HAL_GPIO_Init+0x172>
 8002950:	2a01      	cmp	r2, #1
 8002952:	d186      	bne.n	8002862 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002954:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8002958:	e783      	b.n	8002862 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 800295a:	4e23      	ldr	r6, [pc, #140]	; (80029e8 <HAL_GPIO_Init+0x1e0>)
 800295c:	42b2      	cmp	r2, r6
 800295e:	d00c      	beq.n	800297a <HAL_GPIO_Init+0x172>
 8002960:	d920      	bls.n	80029a4 <HAL_GPIO_Init+0x19c>
 8002962:	4e22      	ldr	r6, [pc, #136]	; (80029ec <HAL_GPIO_Init+0x1e4>)
 8002964:	42b2      	cmp	r2, r6
 8002966:	d008      	beq.n	800297a <HAL_GPIO_Init+0x172>
 8002968:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800296c:	42b2      	cmp	r2, r6
 800296e:	d004      	beq.n	800297a <HAL_GPIO_Init+0x172>
 8002970:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8002974:	42b2      	cmp	r2, r6
 8002976:	f47f af74 	bne.w	8002862 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800297a:	688a      	ldr	r2, [r1, #8]
 800297c:	b9e2      	cbnz	r2, 80029b8 <HAL_GPIO_Init+0x1b0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800297e:	f04f 0a04 	mov.w	sl, #4
 8002982:	e76e      	b.n	8002862 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002984:	68cb      	ldr	r3, [r1, #12]
 8002986:	f103 0a0c 	add.w	sl, r3, #12
          break;
 800298a:	e76a      	b.n	8002862 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800298c:	68cb      	ldr	r3, [r1, #12]
 800298e:	f103 0a08 	add.w	sl, r3, #8
          break;
 8002992:	e766      	b.n	8002862 <HAL_GPIO_Init+0x5a>
 8002994:	f04f 0b01 	mov.w	fp, #1
 8002998:	fa0b f909 	lsl.w	r9, fp, r9
 800299c:	ea46 0609 	orr.w	r6, r6, r9
 80029a0:	9601      	str	r6, [sp, #4]
 80029a2:	e7a3      	b.n	80028ec <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 80029a4:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80029a8:	42b2      	cmp	r2, r6
 80029aa:	d0e6      	beq.n	800297a <HAL_GPIO_Init+0x172>
 80029ac:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80029b0:	42b2      	cmp	r2, r6
 80029b2:	f47f af56 	bne.w	8002862 <HAL_GPIO_Init+0x5a>
 80029b6:	e7e0      	b.n	800297a <HAL_GPIO_Init+0x172>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b8:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80029ba:	bf0c      	ite	eq
 80029bc:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 80029be:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c0:	f04f 0a08 	mov.w	sl, #8
 80029c4:	e74d      	b.n	8002862 <HAL_GPIO_Init+0x5a>
 80029c6:	4770      	bx	lr
 80029c8:	f04f 0b02 	mov.w	fp, #2
 80029cc:	9e01      	ldr	r6, [sp, #4]
 80029ce:	fa0b f909 	lsl.w	r9, fp, r9
 80029d2:	ea46 0609 	orr.w	r6, r6, r9
 80029d6:	9601      	str	r6, [sp, #4]
 80029d8:	e788      	b.n	80028ec <HAL_GPIO_Init+0xe4>
 80029da:	bf00      	nop
 80029dc:	40010400 	.word	0x40010400
 80029e0:	40011000 	.word	0x40011000
 80029e4:	40011400 	.word	0x40011400
 80029e8:	10210000 	.word	0x10210000
 80029ec:	10310000 	.word	0x10310000
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40010800 	.word	0x40010800
 80029f8:	40010c00 	.word	0x40010c00

080029fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029fc:	6883      	ldr	r3, [r0, #8]
 80029fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002a00:	bf14      	ite	ne
 8002a02:	2001      	movne	r0, #1
 8002a04:	2000      	moveq	r0, #0
 8002a06:	4770      	bx	lr

08002a08 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a08:	b902      	cbnz	r2, 8002a0c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a0a:	0409      	lsls	r1, r1, #16
 8002a0c:	6101      	str	r1, [r0, #16]
  }
}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop

08002a14 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002a16:	6951      	ldr	r1, [r2, #20]
 8002a18:	4201      	tst	r1, r0
 8002a1a:	d100      	bne.n	8002a1e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002a1c:	4770      	bx	lr
{
 8002a1e:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a20:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a22:	f7ff fff5 	bl	8002a10 <HAL_GPIO_EXTI_Callback>
}
 8002a26:	bd08      	pop	{r3, pc}
 8002a28:	40010400 	.word	0x40010400

08002a2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8002a30:	461f      	mov	r7, r3
 8002a32:	4605      	mov	r5, r0
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a34:	6800      	ldr	r0, [r0, #0]
{
 8002a36:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a38:	6801      	ldr	r1, [r0, #0]
{
 8002a3a:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002a40:	6001      	str	r1, [r0, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a42:	6802      	ldr	r2, [r0, #0]
{
 8002a44:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 8002a4a:	9c08      	ldr	r4, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a4c:	6002      	str	r2, [r0, #0]
 8002a4e:	1c61      	adds	r1, r4, #1
 8002a50:	d157      	bne.n	8002b02 <I2C_RequestMemoryRead+0xd6>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a52:	6943      	ldr	r3, [r0, #20]
 8002a54:	07da      	lsls	r2, r3, #31
 8002a56:	d5fc      	bpl.n	8002a52 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a58:	fa5f f989 	uxtb.w	r9, r9
 8002a5c:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8002a60:	6103      	str	r3, [r0, #16]
 8002a62:	1c62      	adds	r2, r4, #1
 8002a64:	d012      	beq.n	8002a8c <I2C_RequestMemoryRead+0x60>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a66:	6943      	ldr	r3, [r0, #20]
 8002a68:	079a      	lsls	r2, r3, #30
 8002a6a:	d412      	bmi.n	8002a92 <I2C_RequestMemoryRead+0x66>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a6c:	6943      	ldr	r3, [r0, #20]
 8002a6e:	0559      	lsls	r1, r3, #21
 8002a70:	d453      	bmi.n	8002b1a <I2C_RequestMemoryRead+0xee>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7ff f975 	bl	8001d60 <HAL_GetTick>
 8002a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a78:	1ac0      	subs	r0, r0, r3
 8002a7a:	4284      	cmp	r4, r0
 8002a7c:	d37c      	bcc.n	8002b78 <I2C_RequestMemoryRead+0x14c>
 8002a7e:	2c00      	cmp	r4, #0
 8002a80:	d07a      	beq.n	8002b78 <I2C_RequestMemoryRead+0x14c>
 8002a82:	6828      	ldr	r0, [r5, #0]
 8002a84:	e7ed      	b.n	8002a62 <I2C_RequestMemoryRead+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a86:	6943      	ldr	r3, [r0, #20]
 8002a88:	0559      	lsls	r1, r3, #21
 8002a8a:	d446      	bmi.n	8002b1a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a8c:	6943      	ldr	r3, [r0, #20]
 8002a8e:	079b      	lsls	r3, r3, #30
 8002a90:	d5f9      	bpl.n	8002a86 <I2C_RequestMemoryRead+0x5a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	6943      	ldr	r3, [r0, #20]
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	6983      	ldr	r3, [r0, #24]
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	9b01      	ldr	r3, [sp, #4]
 8002aa0:	1c61      	adds	r1, r4, #1
 8002aa2:	d003      	beq.n	8002aac <I2C_RequestMemoryRead+0x80>
 8002aa4:	e076      	b.n	8002b94 <I2C_RequestMemoryRead+0x168>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa6:	6943      	ldr	r3, [r0, #20]
 8002aa8:	055b      	lsls	r3, r3, #21
 8002aaa:	d44e      	bmi.n	8002b4a <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aac:	6943      	ldr	r3, [r0, #20]
 8002aae:	061a      	lsls	r2, r3, #24
 8002ab0:	d5f9      	bpl.n	8002aa6 <I2C_RequestMemoryRead+0x7a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ab2:	2f01      	cmp	r7, #1
 8002ab4:	d17e      	bne.n	8002bb4 <I2C_RequestMemoryRead+0x188>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab6:	b2f6      	uxtb	r6, r6
 8002ab8:	6106      	str	r6, [r0, #16]
 8002aba:	1c67      	adds	r7, r4, #1
 8002abc:	d003      	beq.n	8002ac6 <I2C_RequestMemoryRead+0x9a>
 8002abe:	e08d      	b.n	8002bdc <I2C_RequestMemoryRead+0x1b0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ac0:	6943      	ldr	r3, [r0, #20]
 8002ac2:	0559      	lsls	r1, r3, #21
 8002ac4:	d441      	bmi.n	8002b4a <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac6:	6943      	ldr	r3, [r0, #20]
 8002ac8:	061e      	lsls	r6, r3, #24
 8002aca:	d5f9      	bpl.n	8002ac0 <I2C_RequestMemoryRead+0x94>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002acc:	6803      	ldr	r3, [r0, #0]
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6003      	str	r3, [r0, #0]
 8002ad4:	1c63      	adds	r3, r4, #1
 8002ad6:	f040 80a1 	bne.w	8002c1c <I2C_RequestMemoryRead+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ada:	6943      	ldr	r3, [r0, #20]
 8002adc:	07df      	lsls	r7, r3, #31
 8002ade:	d5fc      	bpl.n	8002ada <I2C_RequestMemoryRead+0xae>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ae0:	f049 0901 	orr.w	r9, r9, #1
 8002ae4:	f8c0 9010 	str.w	r9, [r0, #16]
 8002ae8:	1c62      	adds	r2, r4, #1
 8002aea:	d003      	beq.n	8002af4 <I2C_RequestMemoryRead+0xc8>
 8002aec:	e0b2      	b.n	8002c54 <I2C_RequestMemoryRead+0x228>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aee:	6943      	ldr	r3, [r0, #20]
 8002af0:	055b      	lsls	r3, r3, #21
 8002af2:	d412      	bmi.n	8002b1a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002af4:	6943      	ldr	r3, [r0, #20]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	f013 0302 	ands.w	r3, r3, #2
 8002afc:	d1f7      	bne.n	8002aee <I2C_RequestMemoryRead+0xc2>
  return HAL_OK;
 8002afe:	4618      	mov	r0, r3
 8002b00:	e020      	b.n	8002b44 <I2C_RequestMemoryRead+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b02:	6943      	ldr	r3, [r0, #20]
 8002b04:	07db      	lsls	r3, r3, #31
 8002b06:	d4a7      	bmi.n	8002a58 <I2C_RequestMemoryRead+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7ff f92a 	bl	8001d60 <HAL_GetTick>
 8002b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b0e:	1ac0      	subs	r0, r0, r3
 8002b10:	4284      	cmp	r4, r0
 8002b12:	d331      	bcc.n	8002b78 <I2C_RequestMemoryRead+0x14c>
 8002b14:	b384      	cbz	r4, 8002b78 <I2C_RequestMemoryRead+0x14c>
 8002b16:	6828      	ldr	r0, [r5, #0]
 8002b18:	e799      	b.n	8002a4e <I2C_RequestMemoryRead+0x22>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b1a:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b20:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b22:	6803      	ldr	r3, [r0, #0]
 8002b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b28:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2a:	6144      	str	r4, [r0, #20]
    return HAL_ERROR;
 8002b2c:	2001      	movs	r0, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2e:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b30:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b34:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b38:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002b3a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002b44:	b002      	add	sp, #8
 8002b46:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4a:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b4c:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8002b52:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b54:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b56:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b5e:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b60:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	642b      	str	r3, [r5, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d02e      	beq.n	8002bce <I2C_RequestMemoryRead+0x1a2>
    return HAL_ERROR;
 8002b70:	2001      	movs	r0, #1
}
 8002b72:	b002      	add	sp, #8
 8002b74:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b78:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b7a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b7c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b7e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b82:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b86:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b88:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b8c:	f043 0320 	orr.w	r3, r3, #32
 8002b90:	642b      	str	r3, [r5, #64]	; 0x40
 8002b92:	e7ed      	b.n	8002b70 <I2C_RequestMemoryRead+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b94:	6943      	ldr	r3, [r0, #20]
 8002b96:	0619      	lsls	r1, r3, #24
 8002b98:	d48b      	bmi.n	8002ab2 <I2C_RequestMemoryRead+0x86>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b9a:	6943      	ldr	r3, [r0, #20]
 8002b9c:	055b      	lsls	r3, r3, #21
 8002b9e:	d4d4      	bmi.n	8002b4a <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba0:	f7ff f8de 	bl	8001d60 <HAL_GetTick>
 8002ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ba6:	1ac0      	subs	r0, r0, r3
 8002ba8:	4284      	cmp	r4, r0
 8002baa:	d345      	bcc.n	8002c38 <I2C_RequestMemoryRead+0x20c>
 8002bac:	2c00      	cmp	r4, #0
 8002bae:	d043      	beq.n	8002c38 <I2C_RequestMemoryRead+0x20c>
 8002bb0:	6828      	ldr	r0, [r5, #0]
 8002bb2:	e775      	b.n	8002aa0 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bb4:	0a33      	lsrs	r3, r6, #8
 8002bb6:	6103      	str	r3, [r0, #16]
 8002bb8:	1c63      	adds	r3, r4, #1
 8002bba:	d003      	beq.n	8002bc4 <I2C_RequestMemoryRead+0x198>
 8002bbc:	e01e      	b.n	8002bfc <I2C_RequestMemoryRead+0x1d0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bbe:	6943      	ldr	r3, [r0, #20]
 8002bc0:	0559      	lsls	r1, r3, #21
 8002bc2:	d4c2      	bmi.n	8002b4a <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bc4:	6943      	ldr	r3, [r0, #20]
 8002bc6:	061f      	lsls	r7, r3, #24
 8002bc8:	f53f af75 	bmi.w	8002ab6 <I2C_RequestMemoryRead+0x8a>
 8002bcc:	e7f7      	b.n	8002bbe <I2C_RequestMemoryRead+0x192>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	682a      	ldr	r2, [r5, #0]
    return HAL_ERROR;
 8002bd0:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd2:	6813      	ldr	r3, [r2, #0]
 8002bd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e7b3      	b.n	8002b44 <I2C_RequestMemoryRead+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bdc:	6943      	ldr	r3, [r0, #20]
 8002bde:	061a      	lsls	r2, r3, #24
 8002be0:	f53f af74 	bmi.w	8002acc <I2C_RequestMemoryRead+0xa0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002be4:	6943      	ldr	r3, [r0, #20]
 8002be6:	055b      	lsls	r3, r3, #21
 8002be8:	d4af      	bmi.n	8002b4a <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bea:	f7ff f8b9 	bl	8001d60 <HAL_GetTick>
 8002bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bf0:	1ac0      	subs	r0, r0, r3
 8002bf2:	4284      	cmp	r4, r0
 8002bf4:	d320      	bcc.n	8002c38 <I2C_RequestMemoryRead+0x20c>
 8002bf6:	b1fc      	cbz	r4, 8002c38 <I2C_RequestMemoryRead+0x20c>
 8002bf8:	6828      	ldr	r0, [r5, #0]
 8002bfa:	e75e      	b.n	8002aba <I2C_RequestMemoryRead+0x8e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bfc:	6943      	ldr	r3, [r0, #20]
 8002bfe:	061a      	lsls	r2, r3, #24
 8002c00:	f53f af59 	bmi.w	8002ab6 <I2C_RequestMemoryRead+0x8a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c04:	6943      	ldr	r3, [r0, #20]
 8002c06:	055a      	lsls	r2, r3, #21
 8002c08:	d49f      	bmi.n	8002b4a <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7ff f8a9 	bl	8001d60 <HAL_GetTick>
 8002c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c10:	1ac0      	subs	r0, r0, r3
 8002c12:	4284      	cmp	r4, r0
 8002c14:	d310      	bcc.n	8002c38 <I2C_RequestMemoryRead+0x20c>
 8002c16:	b17c      	cbz	r4, 8002c38 <I2C_RequestMemoryRead+0x20c>
 8002c18:	6828      	ldr	r0, [r5, #0]
 8002c1a:	e7cd      	b.n	8002bb8 <I2C_RequestMemoryRead+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c1c:	6943      	ldr	r3, [r0, #20]
 8002c1e:	07de      	lsls	r6, r3, #31
 8002c20:	f53f af5e 	bmi.w	8002ae0 <I2C_RequestMemoryRead+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7ff f89c 	bl	8001d60 <HAL_GetTick>
 8002c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c2a:	1ac0      	subs	r0, r0, r3
 8002c2c:	4284      	cmp	r4, r0
 8002c2e:	d3a3      	bcc.n	8002b78 <I2C_RequestMemoryRead+0x14c>
 8002c30:	2c00      	cmp	r4, #0
 8002c32:	d0a1      	beq.n	8002b78 <I2C_RequestMemoryRead+0x14c>
 8002c34:	6828      	ldr	r0, [r5, #0]
 8002c36:	e74d      	b.n	8002ad4 <I2C_RequestMemoryRead+0xa8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c38:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c3a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c3c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c3e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c42:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c46:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c48:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c4c:	f043 0320 	orr.w	r3, r3, #32
 8002c50:	642b      	str	r3, [r5, #64]	; 0x40
 8002c52:	e78a      	b.n	8002b6a <I2C_RequestMemoryRead+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c54:	6943      	ldr	r3, [r0, #20]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	f013 0302 	ands.w	r3, r3, #2
 8002c5c:	f43f af4f 	beq.w	8002afe <I2C_RequestMemoryRead+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c60:	6943      	ldr	r3, [r0, #20]
 8002c62:	0559      	lsls	r1, r3, #21
 8002c64:	f53f af59 	bmi.w	8002b1a <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c68:	f7ff f87a 	bl	8001d60 <HAL_GetTick>
 8002c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c6e:	1ac0      	subs	r0, r0, r3
 8002c70:	4284      	cmp	r4, r0
 8002c72:	d381      	bcc.n	8002b78 <I2C_RequestMemoryRead+0x14c>
 8002c74:	2c00      	cmp	r4, #0
 8002c76:	f43f af7f 	beq.w	8002b78 <I2C_RequestMemoryRead+0x14c>
 8002c7a:	6828      	ldr	r0, [r5, #0]
 8002c7c:	e734      	b.n	8002ae8 <I2C_RequestMemoryRead+0xbc>
 8002c7e:	bf00      	nop

08002c80 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002c80:	2800      	cmp	r0, #0
 8002c82:	f000 8097 	beq.w	8002db4 <HAL_I2C_Init+0x134>
{
 8002c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8087 	beq.w	8002da6 <HAL_I2C_Init+0x126>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c98:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002c9a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002ca0:	6813      	ldr	r3, [r2, #0]
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ca8:	f002 f806 	bl	8004cb8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cac:	6862      	ldr	r2, [r4, #4]
 8002cae:	4b4b      	ldr	r3, [pc, #300]	; (8002ddc <HAL_I2C_Init+0x15c>)
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d84b      	bhi.n	8002d4c <HAL_I2C_Init+0xcc>
 8002cb4:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <HAL_I2C_Init+0x160>)
 8002cb6:	4298      	cmp	r0, r3
 8002cb8:	d97a      	bls.n	8002db0 <HAL_I2C_Init+0x130>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cba:	1e43      	subs	r3, r0, #1
 8002cbc:	0052      	lsls	r2, r2, #1
 8002cbe:	fbb3 f2f2 	udiv	r2, r3, r2
  freqrange = I2C_FREQRANGE(pclk1);
 8002cc2:	4948      	ldr	r1, [pc, #288]	; (8002de4 <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cc4:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002cc6:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cca:	6859      	ldr	r1, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002ccc:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cce:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002cd2:	4301      	orrs	r1, r0
 8002cd4:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cd6:	6a19      	ldr	r1, [r3, #32]
 8002cd8:	3001      	adds	r0, #1
 8002cda:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002cde:	4308      	orrs	r0, r1
 8002ce0:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce2:	1c50      	adds	r0, r2, #1
 8002ce4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002ce8:	2804      	cmp	r0, #4
 8002cea:	bf38      	it	cc
 8002cec:	2004      	movcc	r0, #4
 8002cee:	69d9      	ldr	r1, [r3, #28]
 8002cf0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002cf4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf8:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cfc:	4308      	orrs	r0, r1
 8002cfe:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d00:	6819      	ldr	r1, [r3, #0]
 8002d02:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8002d06:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002d0a:	4302      	orrs	r2, r0
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d10:	6899      	ldr	r1, [r3, #8]
 8002d12:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8002d16:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002d1a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002d1e:	4302      	orrs	r2, r0
 8002d20:	430a      	orrs	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d24:	68d9      	ldr	r1, [r3, #12]
 8002d26:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8002d2a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002d2e:	4302      	orrs	r2, r0
 8002d30:	430a      	orrs	r2, r1
 8002d32:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002d34:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002d36:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3e:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d40:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d44:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d46:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8002d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d4c:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_I2C_Init+0x168>)
 8002d4e:	4298      	cmp	r0, r3
 8002d50:	d92e      	bls.n	8002db0 <HAL_I2C_Init+0x130>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d52:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8002d56:	4d23      	ldr	r5, [pc, #140]	; (8002de4 <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d58:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002d5a:	fba5 6500 	umull	r6, r5, r5, r0
 8002d5e:	0cad      	lsrs	r5, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d60:	fb01 f105 	mul.w	r1, r1, r5
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d64:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d66:	4f21      	ldr	r7, [pc, #132]	; (8002dec <HAL_I2C_Init+0x16c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d68:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d6c:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d70:	4335      	orrs	r5, r6
 8002d72:	605d      	str	r5, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d74:	6a1d      	ldr	r5, [r3, #32]
 8002d76:	0989      	lsrs	r1, r1, #6
 8002d78:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002d7c:	3101      	adds	r1, #1
 8002d7e:	4329      	orrs	r1, r5
 8002d80:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d82:	69d9      	ldr	r1, [r3, #28]
 8002d84:	68a5      	ldr	r5, [r4, #8]
 8002d86:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002d8a:	3801      	subs	r0, #1
 8002d8c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002d90:	b995      	cbnz	r5, 8002db8 <HAL_I2C_Init+0x138>
 8002d92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002d96:	fbb0 f0f2 	udiv	r0, r0, r2
 8002d9a:	3001      	adds	r0, #1
 8002d9c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002da0:	b9c0      	cbnz	r0, 8002dd4 <HAL_I2C_Init+0x154>
 8002da2:	2001      	movs	r0, #1
 8002da4:	e7a8      	b.n	8002cf8 <HAL_I2C_Init+0x78>
    hi2c->Lock = HAL_UNLOCKED;
 8002da6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002daa:	f7fe fb9b 	bl	80014e4 <HAL_I2C_MspInit>
 8002dae:	e773      	b.n	8002c98 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 8002db0:	2001      	movs	r0, #1
}
 8002db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002db4:	2001      	movs	r0, #1
}
 8002db6:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002dbc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002dc0:	fbb0 f0f2 	udiv	r0, r0, r2
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d0e9      	beq.n	8002da2 <HAL_I2C_Init+0x122>
 8002dce:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8002dd2:	e791      	b.n	8002cf8 <HAL_I2C_Init+0x78>
 8002dd4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002dd8:	e78e      	b.n	8002cf8 <HAL_I2C_Init+0x78>
 8002dda:	bf00      	nop
 8002ddc:	000186a0 	.word	0x000186a0
 8002de0:	001e847f 	.word	0x001e847f
 8002de4:	431bde83 	.word	0x431bde83
 8002de8:	003d08ff 	.word	0x003d08ff
 8002dec:	10624dd3 	.word	0x10624dd3

08002df0 <HAL_I2C_Master_Transmit>:
{
 8002df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df4:	4604      	mov	r4, r0
 8002df6:	b082      	sub	sp, #8
 8002df8:	4699      	mov	r9, r3
 8002dfa:	460f      	mov	r7, r1
 8002dfc:	4690      	mov	r8, r2
 8002dfe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7fe ffae 	bl	8001d60 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e04:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d003      	beq.n	8002e14 <HAL_I2C_Master_Transmit+0x24>
      return HAL_BUSY;
 8002e0c:	2002      	movs	r0, #2
}
 8002e0e:	b002      	add	sp, #8
 8002e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e14:	4606      	mov	r6, r0
 8002e16:	e005      	b.n	8002e24 <HAL_I2C_Master_Transmit+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e18:	f7fe ffa2 	bl	8001d60 <HAL_GetTick>
 8002e1c:	1b80      	subs	r0, r0, r6
 8002e1e:	2819      	cmp	r0, #25
 8002e20:	f200 80cb 	bhi.w	8002fba <HAL_I2C_Master_Transmit+0x1ca>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	43d2      	mvns	r2, r2
 8002e2a:	f012 0a02 	ands.w	sl, r2, #2
 8002e2e:	d0f3      	beq.n	8002e18 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8002e30:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002e34:	2a01      	cmp	r2, #1
 8002e36:	d0e9      	beq.n	8002e0c <HAL_I2C_Master_Transmit+0x1c>
 8002e38:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e3a:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 8002e3c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e40:	07d2      	lsls	r2, r2, #31
 8002e42:	d402      	bmi.n	8002e4a <HAL_I2C_Master_Transmit+0x5a>
      __HAL_I2C_ENABLE(hi2c);
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e4a:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e4c:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e50:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e58:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e5a:	4a9b      	ldr	r2, [pc, #620]	; (80030c8 <HAL_I2C_Master_Transmit+0x2d8>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e5c:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e60:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e64:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002e66:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e6a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e6c:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002e70:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e74:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 8002e76:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e78:	d070      	beq.n	8002f5c <HAL_I2C_Master_Transmit+0x16c>
 8002e7a:	2a01      	cmp	r2, #1
 8002e7c:	d06e      	beq.n	8002f5c <HAL_I2C_Master_Transmit+0x16c>
 8002e7e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002e82:	d06b      	beq.n	8002f5c <HAL_I2C_Master_Transmit+0x16c>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e86:	2a12      	cmp	r2, #18
 8002e88:	d068      	beq.n	8002f5c <HAL_I2C_Master_Transmit+0x16c>
 8002e8a:	1c68      	adds	r0, r5, #1
 8002e8c:	f040 8089 	bne.w	8002fa2 <HAL_I2C_Master_Transmit+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	07d1      	lsls	r1, r2, #31
 8002e94:	d5fc      	bpl.n	8002e90 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e96:	6922      	ldr	r2, [r4, #16]
 8002e98:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002e9c:	f040 80c0 	bne.w	8003020 <HAL_I2C_Master_Transmit+0x230>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ea0:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002ea4:	611f      	str	r7, [r3, #16]
 8002ea6:	1c6f      	adds	r7, r5, #1
 8002ea8:	d004      	beq.n	8002eb4 <HAL_I2C_Master_Transmit+0xc4>
 8002eaa:	e0e0      	b.n	800306e <HAL_I2C_Master_Transmit+0x27e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	0551      	lsls	r1, r2, #21
 8002eb0:	f100 80a0 	bmi.w	8002ff4 <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	0790      	lsls	r0, r2, #30
 8002eb8:	d5f8      	bpl.n	8002eac <HAL_I2C_Master_Transmit+0xbc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	9201      	str	r2, [sp, #4]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	9201      	str	r2, [sp, #4]
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	9201      	str	r2, [sp, #4]
 8002ec6:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8002ec8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002eca:	2a00      	cmp	r2, #0
 8002ecc:	f000 80df 	beq.w	800308e <HAL_I2C_Master_Transmit+0x29e>
 8002ed0:	1c68      	adds	r0, r5, #1
 8002ed2:	d003      	beq.n	8002edc <HAL_I2C_Master_Transmit+0xec>
 8002ed4:	e047      	b.n	8002f66 <HAL_I2C_Master_Transmit+0x176>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	0552      	lsls	r2, r2, #21
 8002eda:	d42a      	bmi.n	8002f32 <HAL_I2C_Master_Transmit+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	0611      	lsls	r1, r2, #24
 8002ee0:	d5f9      	bpl.n	8002ed6 <HAL_I2C_Master_Transmit+0xe6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ee2:	6a67      	ldr	r7, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002ee4:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ee8:	4638      	mov	r0, r7
 8002eea:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 8002eee:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ef2:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8002ef4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ef6:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	b292      	uxth	r2, r2
 8002efc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002efe:	695a      	ldr	r2, [r3, #20]
      hi2c->pBuffPtr++;
 8002f00:	6260      	str	r0, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f02:	0750      	lsls	r0, r2, #29
      hi2c->XferSize--;
 8002f04:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f06:	d50c      	bpl.n	8002f22 <HAL_I2C_Master_Transmit+0x132>
 8002f08:	b159      	cbz	r1, 8002f22 <HAL_I2C_Master_Transmit+0x132>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f0a:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 8002f0c:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f10:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8002f12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8002f14:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8002f16:	3a01      	subs	r2, #1
 8002f18:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8002f1a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002f1e:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002f20:	8562      	strh	r2, [r4, #42]	; 0x2a
 8002f22:	1c6f      	adds	r7, r5, #1
 8002f24:	d12e      	bne.n	8002f84 <HAL_I2C_Master_Transmit+0x194>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	0750      	lsls	r0, r2, #29
 8002f2a:	d4cd      	bmi.n	8002ec8 <HAL_I2C_Master_Transmit+0xd8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	0551      	lsls	r1, r2, #21
 8002f30:	d5f9      	bpl.n	8002f26 <HAL_I2C_Master_Transmit+0x136>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f32:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f34:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3a:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f3e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f42:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002f48:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d075      	beq.n	8003044 <HAL_I2C_Master_Transmit+0x254>
        return HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e758      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e791      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	0617      	lsls	r7, r2, #24
 8002f6a:	d4ba      	bmi.n	8002ee2 <HAL_I2C_Master_Transmit+0xf2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	0557      	lsls	r7, r2, #21
 8002f70:	d4df      	bmi.n	8002f32 <HAL_I2C_Master_Transmit+0x142>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7fe fef5 	bl	8001d60 <HAL_GetTick>
 8002f76:	1b80      	subs	r0, r0, r6
 8002f78:	4285      	cmp	r5, r0
 8002f7a:	d36a      	bcc.n	8003052 <HAL_I2C_Master_Transmit+0x262>
 8002f7c:	2d00      	cmp	r5, #0
 8002f7e:	d068      	beq.n	8003052 <HAL_I2C_Master_Transmit+0x262>
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	e7a5      	b.n	8002ed0 <HAL_I2C_Master_Transmit+0xe0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	0752      	lsls	r2, r2, #29
 8002f88:	d49e      	bmi.n	8002ec8 <HAL_I2C_Master_Transmit+0xd8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	0552      	lsls	r2, r2, #21
 8002f8e:	d4d0      	bmi.n	8002f32 <HAL_I2C_Master_Transmit+0x142>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7fe fee6 	bl	8001d60 <HAL_GetTick>
 8002f94:	1b80      	subs	r0, r0, r6
 8002f96:	4285      	cmp	r5, r0
 8002f98:	d35b      	bcc.n	8003052 <HAL_I2C_Master_Transmit+0x262>
 8002f9a:	2d00      	cmp	r5, #0
 8002f9c:	d059      	beq.n	8003052 <HAL_I2C_Master_Transmit+0x262>
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	e7bf      	b.n	8002f22 <HAL_I2C_Master_Transmit+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	07d2      	lsls	r2, r2, #31
 8002fa6:	f53f af76 	bmi.w	8002e96 <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002faa:	f7fe fed9 	bl	8001d60 <HAL_GetTick>
 8002fae:	1b80      	subs	r0, r0, r6
 8002fb0:	4285      	cmp	r5, r0
 8002fb2:	d310      	bcc.n	8002fd6 <HAL_I2C_Master_Transmit+0x1e6>
 8002fb4:	b17d      	cbz	r5, 8002fd6 <HAL_I2C_Master_Transmit+0x1e6>
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	e767      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x9a>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fba:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fbc:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fc4:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002fca:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fce:	f043 0320 	orr.w	r3, r3, #32
 8002fd2:	6423      	str	r3, [r4, #64]	; 0x40
 8002fd4:	e71a      	b.n	8002e0c <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd6:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002fe6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fea:	f043 0320 	orr.w	r3, r3, #32
 8002fee:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	e70c      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff4:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff6:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff8:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	6819      	ldr	r1, [r3, #0]
 8002ffe:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003002:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003004:	615d      	str	r5, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003006:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003008:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003010:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003012:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800301c:	2001      	movs	r0, #1
 800301e:	e6f6      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003020:	11fa      	asrs	r2, r7, #7
 8003022:	f002 0206 	and.w	r2, r2, #6
 8003026:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 800302a:	611a      	str	r2, [r3, #16]
 800302c:	1c69      	adds	r1, r5, #1
 800302e:	d003      	beq.n	8003038 <HAL_I2C_Master_Transmit+0x248>
 8003030:	e03a      	b.n	80030a8 <HAL_I2C_Master_Transmit+0x2b8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	0550      	lsls	r0, r2, #21
 8003036:	d4dd      	bmi.n	8002ff4 <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	0712      	lsls	r2, r2, #28
 800303c:	d5f9      	bpl.n	8003032 <HAL_I2C_Master_Transmit+0x242>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800303e:	b2ff      	uxtb	r7, r7
 8003040:	611f      	str	r7, [r3, #16]
 8003042:	e730      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0xb6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8003046:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	6813      	ldr	r3, [r2, #0]
 800304a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e6dd      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003052:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003054:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003056:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003058:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800305c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003062:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003066:	f043 0320 	orr.w	r3, r3, #32
 800306a:	6423      	str	r3, [r4, #64]	; 0x40
 800306c:	e771      	b.n	8002f52 <HAL_I2C_Master_Transmit+0x162>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	0792      	lsls	r2, r2, #30
 8003072:	f53f af22 	bmi.w	8002eba <HAL_I2C_Master_Transmit+0xca>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	0552      	lsls	r2, r2, #21
 800307a:	d4bb      	bmi.n	8002ff4 <HAL_I2C_Master_Transmit+0x204>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307c:	f7fe fe70 	bl	8001d60 <HAL_GetTick>
 8003080:	1b80      	subs	r0, r0, r6
 8003082:	4285      	cmp	r5, r0
 8003084:	d3a7      	bcc.n	8002fd6 <HAL_I2C_Master_Transmit+0x1e6>
 8003086:	2d00      	cmp	r5, #0
 8003088:	d0a5      	beq.n	8002fd6 <HAL_I2C_Master_Transmit+0x1e6>
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	e70b      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0xb6>
    hi2c->State = HAL_I2C_STATE_READY;
 800308e:	2520      	movs	r5, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	6819      	ldr	r1, [r3, #0]
    return HAL_OK;
 8003092:	4610      	mov	r0, r2
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003098:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800309a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800309e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    return HAL_OK;
 80030a6:	e6b2      	b.n	8002e0e <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	0711      	lsls	r1, r2, #28
 80030ac:	d4c7      	bmi.n	800303e <HAL_I2C_Master_Transmit+0x24e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	0550      	lsls	r0, r2, #21
 80030b2:	d49f      	bmi.n	8002ff4 <HAL_I2C_Master_Transmit+0x204>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b4:	f7fe fe54 	bl	8001d60 <HAL_GetTick>
 80030b8:	1b80      	subs	r0, r0, r6
 80030ba:	4285      	cmp	r5, r0
 80030bc:	d38b      	bcc.n	8002fd6 <HAL_I2C_Master_Transmit+0x1e6>
 80030be:	2d00      	cmp	r5, #0
 80030c0:	d089      	beq.n	8002fd6 <HAL_I2C_Master_Transmit+0x1e6>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	e7b2      	b.n	800302c <HAL_I2C_Master_Transmit+0x23c>
 80030c6:	bf00      	nop
 80030c8:	ffff0000 	.word	0xffff0000

080030cc <HAL_I2C_Master_Receive>:
{
 80030cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d0:	4604      	mov	r4, r0
 80030d2:	b086      	sub	sp, #24
 80030d4:	4699      	mov	r9, r3
 80030d6:	460f      	mov	r7, r1
 80030d8:	4690      	mov	r8, r2
 80030da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7fe fe40 	bl	8001d60 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d003      	beq.n	80030f0 <HAL_I2C_Master_Receive+0x24>
      return HAL_BUSY;
 80030e8:	2002      	movs	r0, #2
}
 80030ea:	b006      	add	sp, #24
 80030ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f0:	4606      	mov	r6, r0
 80030f2:	e005      	b.n	8003100 <HAL_I2C_Master_Receive+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f4:	f7fe fe34 	bl	8001d60 <HAL_GetTick>
 80030f8:	1b80      	subs	r0, r0, r6
 80030fa:	2819      	cmp	r0, #25
 80030fc:	f200 8091 	bhi.w	8003222 <HAL_I2C_Master_Receive+0x156>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003100:	6822      	ldr	r2, [r4, #0]
 8003102:	6993      	ldr	r3, [r2, #24]
 8003104:	43db      	mvns	r3, r3
 8003106:	f013 0a02 	ands.w	sl, r3, #2
 800310a:	d0f3      	beq.n	80030f4 <HAL_I2C_Master_Receive+0x28>
    __HAL_LOCK(hi2c);
 800310c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003110:	2b01      	cmp	r3, #1
 8003112:	d0e9      	beq.n	80030e8 <HAL_I2C_Master_Receive+0x1c>
 8003114:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003116:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8003118:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800311c:	07d8      	lsls	r0, r3, #31
 800311e:	d402      	bmi.n	8003126 <HAL_I2C_Master_Receive+0x5a>
      __HAL_I2C_ENABLE(hi2c);
 8003120:	6813      	ldr	r3, [r2, #0]
 8003122:	430b      	orrs	r3, r1
 8003124:	6013      	str	r3, [r2, #0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003126:	2010      	movs	r0, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003128:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800312a:	f04f 0c22 	mov.w	ip, #34	; 0x22
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003134:	6013      	str	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003136:	4b95      	ldr	r3, [pc, #596]	; (800338c <HAL_I2C_Master_Receive+0x2c0>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003138:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800313c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003140:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003142:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003146:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003148:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800314a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800314c:	6813      	ldr	r3, [r2, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800314e:	2908      	cmp	r1, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    hi2c->pBuffPtr    = pData;
 8003154:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003158:	8520      	strh	r0, [r4, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315a:	6013      	str	r3, [r2, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800315c:	d035      	beq.n	80031ca <HAL_I2C_Master_Receive+0xfe>
 800315e:	2901      	cmp	r1, #1
 8003160:	d033      	beq.n	80031ca <HAL_I2C_Master_Receive+0xfe>
 8003162:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003166:	d030      	beq.n	80031ca <HAL_I2C_Master_Receive+0xfe>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003168:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800316a:	2b11      	cmp	r3, #17
 800316c:	d02d      	beq.n	80031ca <HAL_I2C_Master_Receive+0xfe>
 800316e:	1c69      	adds	r1, r5, #1
 8003170:	d130      	bne.n	80031d4 <HAL_I2C_Master_Receive+0x108>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003172:	6953      	ldr	r3, [r2, #20]
 8003174:	07db      	lsls	r3, r3, #31
 8003176:	d5fc      	bpl.n	8003172 <HAL_I2C_Master_Receive+0xa6>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003178:	6923      	ldr	r3, [r4, #16]
 800317a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800317e:	f040 80d3 	bne.w	8003328 <HAL_I2C_Master_Receive+0x25c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003182:	f047 0301 	orr.w	r3, r7, #1
 8003186:	b2db      	uxtb	r3, r3
 8003188:	6113      	str	r3, [r2, #16]
 800318a:	1c69      	adds	r1, r5, #1
 800318c:	d003      	beq.n	8003196 <HAL_I2C_Master_Receive+0xca>
 800318e:	e1b0      	b.n	80034f2 <HAL_I2C_Master_Receive+0x426>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003190:	6953      	ldr	r3, [r2, #20]
 8003192:	055f      	lsls	r7, r3, #21
 8003194:	d453      	bmi.n	800323e <HAL_I2C_Master_Receive+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003196:	6953      	ldr	r3, [r2, #20]
 8003198:	079b      	lsls	r3, r3, #30
 800319a:	d5f9      	bpl.n	8003190 <HAL_I2C_Master_Receive+0xc4>
    if (hi2c->XferSize == 0U)
 800319c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d163      	bne.n	800326a <HAL_I2C_Master_Receive+0x19e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	6953      	ldr	r3, [r2, #20]
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	6993      	ldr	r3, [r2, #24]
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b4:	6013      	str	r3, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	2220      	movs	r2, #32
    return HAL_OK;
 80031ba:	4618      	mov	r0, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80031bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80031c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80031c8:	e78f      	b.n	80030ea <HAL_I2C_Master_Receive+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e7cc      	b.n	800316e <HAL_I2C_Master_Receive+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d4:	6953      	ldr	r3, [r2, #20]
 80031d6:	07d8      	lsls	r0, r3, #31
 80031d8:	d4ce      	bmi.n	8003178 <HAL_I2C_Master_Receive+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7fe fdc1 	bl	8001d60 <HAL_GetTick>
 80031de:	1b80      	subs	r0, r0, r6
 80031e0:	4285      	cmp	r5, r0
 80031e2:	d30d      	bcc.n	8003200 <HAL_I2C_Master_Receive+0x134>
 80031e4:	b165      	cbz	r5, 8003200 <HAL_I2C_Master_Receive+0x134>
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	e7c1      	b.n	800316e <HAL_I2C_Master_Receive+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	0657      	lsls	r7, r2, #25
 80031f0:	f100 8117 	bmi.w	8003422 <HAL_I2C_Master_Receive+0x356>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	06d0      	lsls	r0, r2, #27
 80031f8:	f100 8163 	bmi.w	80034c2 <HAL_I2C_Master_Receive+0x3f6>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fc:	f7fe fdb0 	bl	8001d60 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003200:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003202:	2320      	movs	r3, #32
          return HAL_ERROR;
 8003204:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003206:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003208:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800320c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003212:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003216:	f043 0320 	orr.w	r3, r3, #32
 800321a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800321c:	b006      	add	sp, #24
 800321e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->State             = HAL_I2C_STATE_READY;
 8003222:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003224:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003228:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800322c:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003230:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003232:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003236:	f043 0320 	orr.w	r3, r3, #32
 800323a:	6423      	str	r3, [r4, #64]	; 0x40
 800323c:	e754      	b.n	80030e8 <HAL_I2C_Master_Receive+0x1c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800323e:	2100      	movs	r1, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003242:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800324c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324e:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003250:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003252:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003256:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800325a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800325c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003266:	2001      	movs	r0, #1
 8003268:	e73f      	b.n	80030ea <HAL_I2C_Master_Receive+0x1e>
    else if (hi2c->XferSize == 1U)
 800326a:	2b01      	cmp	r3, #1
 800326c:	f000 80b6 	beq.w	80033dc <HAL_I2C_Master_Receive+0x310>
    else if (hi2c->XferSize == 2U)
 8003270:	2b02      	cmp	r3, #2
 8003272:	f000 8164 	beq.w	800353e <HAL_I2C_Master_Receive+0x472>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003276:	2000      	movs	r0, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003278:	6811      	ldr	r1, [r2, #0]
 800327a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800327e:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003280:	9004      	str	r0, [sp, #16]
 8003282:	6951      	ldr	r1, [r2, #20]
 8003284:	9104      	str	r1, [sp, #16]
 8003286:	6992      	ldr	r2, [r2, #24]
 8003288:	9204      	str	r2, [sp, #16]
 800328a:	9a04      	ldr	r2, [sp, #16]
    while (hi2c->XferSize > 0U)
 800328c:	2b00      	cmp	r3, #0
 800328e:	d092      	beq.n	80031b6 <HAL_I2C_Master_Receive+0xea>
      if (hi2c->XferSize <= 3U)
 8003290:	2b03      	cmp	r3, #3
 8003292:	f200 80b7 	bhi.w	8003404 <HAL_I2C_Master_Receive+0x338>
        if (hi2c->XferSize == 1U)
 8003296:	2b01      	cmp	r3, #1
 8003298:	f000 8100 	beq.w	800349c <HAL_I2C_Master_Receive+0x3d0>
        else if (hi2c->XferSize == 2U)
 800329c:	2b02      	cmp	r3, #2
 800329e:	f000 8083 	beq.w	80033a8 <HAL_I2C_Master_Receive+0x2dc>
 80032a2:	1c6b      	adds	r3, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a4:	6822      	ldr	r2, [r4, #0]
 80032a6:	f040 80dd 	bne.w	8003464 <HAL_I2C_Master_Receive+0x398>
 80032aa:	6953      	ldr	r3, [r2, #20]
 80032ac:	075f      	lsls	r7, r3, #29
 80032ae:	d5fc      	bpl.n	80032aa <HAL_I2C_Master_Receive+0x1de>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b0:	6813      	ldr	r3, [r2, #0]
 80032b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b6:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032b8:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	6822      	ldr	r2, [r4, #0]
 80032bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032be:	6912      	ldr	r2, [r2, #16]
 80032c0:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80032c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80032c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80032c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80032c8:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80032ca:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80032cc:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80032ce:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80032d0:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80032d2:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80032d4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80032d6:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d8:	6822      	ldr	r2, [r4, #0]
 80032da:	f040 80d1 	bne.w	8003480 <HAL_I2C_Master_Receive+0x3b4>
 80032de:	6953      	ldr	r3, [r2, #20]
 80032e0:	075b      	lsls	r3, r3, #29
 80032e2:	d5fc      	bpl.n	80032de <HAL_I2C_Master_Receive+0x212>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ec:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ee:	6913      	ldr	r3, [r2, #16]
 80032f0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80032f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80032f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80032f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80032fc:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80032fe:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003300:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003302:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003304:	8522      	strh	r2, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003306:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003308:	6822      	ldr	r2, [r4, #0]
 800330a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800330c:	6912      	ldr	r2, [r2, #16]
 800330e:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8003310:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003312:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003314:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8003316:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8003318:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800331a:	3101      	adds	r1, #1
          hi2c->XferCount--;
 800331c:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 800331e:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003320:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8003322:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003324:	8523      	strh	r3, [r4, #40]	; 0x28
 8003326:	e7b1      	b.n	800328c <HAL_I2C_Master_Receive+0x1c0>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003328:	ea4f 18e7 	mov.w	r8, r7, asr #7
 800332c:	f008 0806 	and.w	r8, r8, #6
 8003330:	f048 03f0 	orr.w	r3, r8, #240	; 0xf0
 8003334:	6113      	str	r3, [r2, #16]
 8003336:	1c6b      	adds	r3, r5, #1
 8003338:	d004      	beq.n	8003344 <HAL_I2C_Master_Receive+0x278>
 800333a:	e0ed      	b.n	8003518 <HAL_I2C_Master_Receive+0x44c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800333c:	6953      	ldr	r3, [r2, #20]
 800333e:	0559      	lsls	r1, r3, #21
 8003340:	f53f af7d 	bmi.w	800323e <HAL_I2C_Master_Receive+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003344:	6953      	ldr	r3, [r2, #20]
 8003346:	0718      	lsls	r0, r3, #28
 8003348:	d5f8      	bpl.n	800333c <HAL_I2C_Master_Receive+0x270>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800334a:	b2ff      	uxtb	r7, r7
 800334c:	6117      	str	r7, [r2, #16]
 800334e:	1c69      	adds	r1, r5, #1
 8003350:	d004      	beq.n	800335c <HAL_I2C_Master_Receive+0x290>
 8003352:	e108      	b.n	8003566 <HAL_I2C_Master_Receive+0x49a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003354:	6953      	ldr	r3, [r2, #20]
 8003356:	055f      	lsls	r7, r3, #21
 8003358:	f53f af71 	bmi.w	800323e <HAL_I2C_Master_Receive+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800335c:	6953      	ldr	r3, [r2, #20]
 800335e:	079b      	lsls	r3, r3, #30
 8003360:	d5f8      	bpl.n	8003354 <HAL_I2C_Master_Receive+0x288>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003362:	2300      	movs	r3, #0
 8003364:	9305      	str	r3, [sp, #20]
 8003366:	6953      	ldr	r3, [r2, #20]
 8003368:	9305      	str	r3, [sp, #20]
 800336a:	6993      	ldr	r3, [r2, #24]
 800336c:	9305      	str	r3, [sp, #20]
 800336e:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003370:	6813      	ldr	r3, [r2, #0]
 8003372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	1c69      	adds	r1, r5, #1
 800337a:	f040 8107 	bne.w	800358c <HAL_I2C_Master_Receive+0x4c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800337e:	6953      	ldr	r3, [r2, #20]
 8003380:	07db      	lsls	r3, r3, #31
 8003382:	d5fc      	bpl.n	800337e <HAL_I2C_Master_Receive+0x2b2>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003384:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8003388:	6113      	str	r3, [r2, #16]
 800338a:	e6fe      	b.n	800318a <HAL_I2C_Master_Receive+0xbe>
 800338c:	ffff0000 	.word	0xffff0000
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003390:	6953      	ldr	r3, [r2, #20]
 8003392:	075a      	lsls	r2, r3, #29
 8003394:	d40e      	bmi.n	80033b4 <HAL_I2C_Master_Receive+0x2e8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003396:	f7fe fce3 	bl	8001d60 <HAL_GetTick>
 800339a:	1b80      	subs	r0, r0, r6
 800339c:	4285      	cmp	r5, r0
 800339e:	f4ff af2f 	bcc.w	8003200 <HAL_I2C_Master_Receive+0x134>
 80033a2:	2d00      	cmp	r5, #0
 80033a4:	f43f af2c 	beq.w	8003200 <HAL_I2C_Master_Receive+0x134>
 80033a8:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	d1f0      	bne.n	8003390 <HAL_I2C_Master_Receive+0x2c4>
 80033ae:	6953      	ldr	r3, [r2, #20]
 80033b0:	0759      	lsls	r1, r3, #29
 80033b2:	d5fc      	bpl.n	80033ae <HAL_I2C_Master_Receive+0x2e2>
  __ASM volatile ("cpsid i" : : : "memory");
 80033b4:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b6:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c0:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80033c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80033c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80033cc:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80033ce:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80033d0:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80033d2:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80033d4:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033d6:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80033d8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80033da:	e794      	b.n	8003306 <HAL_I2C_Master_Receive+0x23a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033dc:	6813      	ldr	r3, [r2, #0]
 80033de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e6:	2200      	movs	r2, #0
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	9202      	str	r2, [sp, #8]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	9202      	str	r2, [sp, #8]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	9202      	str	r2, [sp, #8]
 80033f4:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033fe:	b662      	cpsie	i
 8003400:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003402:	e743      	b.n	800328c <HAL_I2C_Master_Receive+0x1c0>
 8003404:	b94d      	cbnz	r5, 800341a <HAL_I2C_Master_Receive+0x34e>
 8003406:	e6f0      	b.n	80031ea <HAL_I2C_Master_Receive+0x11e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	06d2      	lsls	r2, r2, #27
 800340c:	d459      	bmi.n	80034c2 <HAL_I2C_Master_Receive+0x3f6>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fe fca7 	bl	8001d60 <HAL_GetTick>
 8003412:	1b80      	subs	r0, r0, r6
 8003414:	4285      	cmp	r5, r0
 8003416:	f4ff aef3 	bcc.w	8003200 <HAL_I2C_Master_Receive+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	0651      	lsls	r1, r2, #25
 8003420:	d5f2      	bpl.n	8003408 <HAL_I2C_Master_Receive+0x33c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003426:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8003428:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800342a:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 800342c:	3a01      	subs	r2, #1
 800342e:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8003430:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003432:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003434:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 8003436:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003438:	3b01      	subs	r3, #1
 800343a:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 800343c:	1c57      	adds	r7, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800343e:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8003440:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003442:	6267      	str	r7, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003444:	f57f af22 	bpl.w	800328c <HAL_I2C_Master_Receive+0x1c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003448:	690b      	ldr	r3, [r1, #16]
 800344a:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 800344c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800344e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003450:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003452:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8003454:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8003456:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8003458:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 800345a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800345c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800345e:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003460:	6261      	str	r1, [r4, #36]	; 0x24
 8003462:	e713      	b.n	800328c <HAL_I2C_Master_Receive+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003464:	6953      	ldr	r3, [r2, #20]
 8003466:	0758      	lsls	r0, r3, #29
 8003468:	f53f af22 	bmi.w	80032b0 <HAL_I2C_Master_Receive+0x1e4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346c:	f7fe fc78 	bl	8001d60 <HAL_GetTick>
 8003470:	1b80      	subs	r0, r0, r6
 8003472:	4285      	cmp	r5, r0
 8003474:	f4ff aec4 	bcc.w	8003200 <HAL_I2C_Master_Receive+0x134>
 8003478:	2d00      	cmp	r5, #0
 800347a:	f47f af12 	bne.w	80032a2 <HAL_I2C_Master_Receive+0x1d6>
 800347e:	e6bf      	b.n	8003200 <HAL_I2C_Master_Receive+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	6953      	ldr	r3, [r2, #20]
 8003482:	075f      	lsls	r7, r3, #29
 8003484:	f53f af2e 	bmi.w	80032e4 <HAL_I2C_Master_Receive+0x218>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003488:	f7fe fc6a 	bl	8001d60 <HAL_GetTick>
 800348c:	1b80      	subs	r0, r0, r6
 800348e:	4285      	cmp	r5, r0
 8003490:	f4ff aeb6 	bcc.w	8003200 <HAL_I2C_Master_Receive+0x134>
 8003494:	2d00      	cmp	r5, #0
 8003496:	f47f af1e 	bne.w	80032d6 <HAL_I2C_Master_Receive+0x20a>
 800349a:	e6b1      	b.n	8003200 <HAL_I2C_Master_Receive+0x134>
 800349c:	b94d      	cbnz	r5, 80034b2 <HAL_I2C_Master_Receive+0x3e6>
 800349e:	e022      	b.n	80034e6 <HAL_I2C_Master_Receive+0x41a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	06d2      	lsls	r2, r2, #27
 80034a4:	d40d      	bmi.n	80034c2 <HAL_I2C_Master_Receive+0x3f6>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7fe fc5b 	bl	8001d60 <HAL_GetTick>
 80034aa:	1b80      	subs	r0, r0, r6
 80034ac:	4285      	cmp	r5, r0
 80034ae:	f4ff aea7 	bcc.w	8003200 <HAL_I2C_Master_Receive+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	0651      	lsls	r1, r2, #25
 80034b8:	d5f2      	bpl.n	80034a0 <HAL_I2C_Master_Receive+0x3d4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e7c4      	b.n	800344c <HAL_I2C_Master_Receive+0x380>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c2:	f06f 0010 	mvn.w	r0, #16
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c6:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c8:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ca:	6158      	str	r0, [r3, #20]
          return HAL_ERROR;
 80034cc:	2001      	movs	r0, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80034da:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034de:	6423      	str	r3, [r4, #64]	; 0x40
}
 80034e0:	b006      	add	sp, #24
 80034e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	0657      	lsls	r7, r2, #25
 80034ec:	f57f ae82 	bpl.w	80031f4 <HAL_I2C_Master_Receive+0x128>
 80034f0:	e7e3      	b.n	80034ba <HAL_I2C_Master_Receive+0x3ee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f2:	6953      	ldr	r3, [r2, #20]
 80034f4:	0798      	lsls	r0, r3, #30
 80034f6:	f53f ae51 	bmi.w	800319c <HAL_I2C_Master_Receive+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034fa:	6953      	ldr	r3, [r2, #20]
 80034fc:	0558      	lsls	r0, r3, #21
 80034fe:	f53f ae9e 	bmi.w	800323e <HAL_I2C_Master_Receive+0x172>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7fe fc2d 	bl	8001d60 <HAL_GetTick>
 8003506:	1b80      	subs	r0, r0, r6
 8003508:	4285      	cmp	r5, r0
 800350a:	f4ff ae79 	bcc.w	8003200 <HAL_I2C_Master_Receive+0x134>
 800350e:	2d00      	cmp	r5, #0
 8003510:	f43f ae76 	beq.w	8003200 <HAL_I2C_Master_Receive+0x134>
 8003514:	6822      	ldr	r2, [r4, #0]
 8003516:	e638      	b.n	800318a <HAL_I2C_Master_Receive+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003518:	6953      	ldr	r3, [r2, #20]
 800351a:	071b      	lsls	r3, r3, #28
 800351c:	f53f af15 	bmi.w	800334a <HAL_I2C_Master_Receive+0x27e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003520:	6953      	ldr	r3, [r2, #20]
 8003522:	0559      	lsls	r1, r3, #21
 8003524:	f53f ae8b 	bmi.w	800323e <HAL_I2C_Master_Receive+0x172>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003528:	f7fe fc1a 	bl	8001d60 <HAL_GetTick>
 800352c:	1b80      	subs	r0, r0, r6
 800352e:	4285      	cmp	r5, r0
 8003530:	f4ff ae66 	bcc.w	8003200 <HAL_I2C_Master_Receive+0x134>
 8003534:	2d00      	cmp	r5, #0
 8003536:	f43f ae63 	beq.w	8003200 <HAL_I2C_Master_Receive+0x134>
 800353a:	6822      	ldr	r2, [r4, #0]
 800353c:	e6fb      	b.n	8003336 <HAL_I2C_Master_Receive+0x26a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800353e:	6813      	ldr	r3, [r2, #0]
 8003540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003544:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003546:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003548:	2200      	movs	r2, #0
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	9203      	str	r2, [sp, #12]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	9203      	str	r2, [sp, #12]
 8003552:	699a      	ldr	r2, [r3, #24]
 8003554:	9203      	str	r2, [sp, #12]
 8003556:	9a03      	ldr	r2, [sp, #12]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003560:	b662      	cpsie	i
 8003562:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003564:	e692      	b.n	800328c <HAL_I2C_Master_Receive+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003566:	6953      	ldr	r3, [r2, #20]
 8003568:	0798      	lsls	r0, r3, #30
 800356a:	f53f aefa 	bmi.w	8003362 <HAL_I2C_Master_Receive+0x296>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800356e:	6953      	ldr	r3, [r2, #20]
 8003570:	0558      	lsls	r0, r3, #21
 8003572:	f53f ae64 	bmi.w	800323e <HAL_I2C_Master_Receive+0x172>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7fe fbf3 	bl	8001d60 <HAL_GetTick>
 800357a:	1b80      	subs	r0, r0, r6
 800357c:	4285      	cmp	r5, r0
 800357e:	f4ff ae3f 	bcc.w	8003200 <HAL_I2C_Master_Receive+0x134>
 8003582:	2d00      	cmp	r5, #0
 8003584:	f43f ae3c 	beq.w	8003200 <HAL_I2C_Master_Receive+0x134>
 8003588:	6822      	ldr	r2, [r4, #0]
 800358a:	e6e0      	b.n	800334e <HAL_I2C_Master_Receive+0x282>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358c:	6953      	ldr	r3, [r2, #20]
 800358e:	07df      	lsls	r7, r3, #31
 8003590:	f53f aef8 	bmi.w	8003384 <HAL_I2C_Master_Receive+0x2b8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003594:	f7fe fbe4 	bl	8001d60 <HAL_GetTick>
 8003598:	1b80      	subs	r0, r0, r6
 800359a:	4285      	cmp	r5, r0
 800359c:	f4ff ae30 	bcc.w	8003200 <HAL_I2C_Master_Receive+0x134>
 80035a0:	2d00      	cmp	r5, #0
 80035a2:	f43f ae2d 	beq.w	8003200 <HAL_I2C_Master_Receive+0x134>
 80035a6:	6822      	ldr	r2, [r4, #0]
 80035a8:	e6e6      	b.n	8003378 <HAL_I2C_Master_Receive+0x2ac>
 80035aa:	bf00      	nop

080035ac <HAL_I2C_Mem_Read>:
{
 80035ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b0:	4604      	mov	r4, r0
 80035b2:	b087      	sub	sp, #28
 80035b4:	469a      	mov	sl, r3
 80035b6:	460f      	mov	r7, r1
 80035b8:	4690      	mov	r8, r2
 80035ba:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 80035be:	9d12      	ldr	r5, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80035c0:	f7fe fbce 	bl	8001d60 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d004      	beq.n	80035d6 <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 80035cc:	2702      	movs	r7, #2
}
 80035ce:	4638      	mov	r0, r7
 80035d0:	b007      	add	sp, #28
 80035d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d6:	4606      	mov	r6, r0
 80035d8:	e004      	b.n	80035e4 <HAL_I2C_Mem_Read+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035da:	f7fe fbc1 	bl	8001d60 <HAL_GetTick>
 80035de:	1b80      	subs	r0, r0, r6
 80035e0:	2819      	cmp	r0, #25
 80035e2:	d84d      	bhi.n	8003680 <HAL_I2C_Mem_Read+0xd4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	6993      	ldr	r3, [r2, #24]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	f013 0b02 	ands.w	fp, r3, #2
 80035ee:	d0f4      	beq.n	80035da <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 80035f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d0e9      	beq.n	80035cc <HAL_I2C_Mem_Read+0x20>
 80035f8:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035fa:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 80035fc:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003600:	07db      	lsls	r3, r3, #31
 8003602:	d402      	bmi.n	800360a <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	430b      	orrs	r3, r1
 8003608:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800360a:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800360e:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003612:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003614:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003616:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003618:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800361c:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800361e:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003622:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003626:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003628:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800362c:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003630:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 8003632:	9f10      	ldr	r7, [sp, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003634:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 8003638:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800363a:	4642      	mov	r2, r8
 800363c:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003640:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003642:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003646:	4620      	mov	r0, r4
 8003648:	f7ff f9f0 	bl	8002a2c <I2C_RequestMemoryRead>
 800364c:	4607      	mov	r7, r0
 800364e:	b9a8      	cbnz	r0, 800367c <HAL_I2C_Mem_Read+0xd0>
    if (hi2c->XferSize == 0U)
 8003650:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003652:	6822      	ldr	r2, [r4, #0]
 8003654:	bb13      	cbnz	r3, 800369c <HAL_I2C_Mem_Read+0xf0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003656:	9002      	str	r0, [sp, #8]
 8003658:	6953      	ldr	r3, [r2, #20]
 800365a:	9302      	str	r3, [sp, #8]
 800365c:	6993      	ldr	r3, [r2, #24]
 800365e:	9302      	str	r3, [sp, #8]
 8003660:	9b02      	ldr	r3, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003668:	6013      	str	r3, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800366a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800366c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800366e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003672:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003676:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800367a:	e7a8      	b.n	80035ce <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 800367c:	2701      	movs	r7, #1
 800367e:	e7a6      	b.n	80035ce <HAL_I2C_Mem_Read+0x22>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003680:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003682:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003686:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800368a:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800368e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003690:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003694:	f043 0320 	orr.w	r3, r3, #32
 8003698:	6423      	str	r3, [r4, #64]	; 0x40
 800369a:	e797      	b.n	80035cc <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800369c:	2b01      	cmp	r3, #1
 800369e:	d07c      	beq.n	800379a <HAL_I2C_Mem_Read+0x1ee>
    else if (hi2c->XferSize == 2U)
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	f000 811d 	beq.w	80038e0 <HAL_I2C_Mem_Read+0x334>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a6:	6811      	ldr	r1, [r2, #0]
 80036a8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80036ac:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ae:	9005      	str	r0, [sp, #20]
 80036b0:	6951      	ldr	r1, [r2, #20]
 80036b2:	9105      	str	r1, [sp, #20]
 80036b4:	6992      	ldr	r2, [r2, #24]
 80036b6:	9205      	str	r2, [sp, #20]
 80036b8:	9a05      	ldr	r2, [sp, #20]
    while (hi2c->XferSize > 0U)
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0d5      	beq.n	800366a <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d87e      	bhi.n	80037c0 <HAL_I2C_Mem_Read+0x214>
        if (hi2c->XferSize == 1U)
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	f000 80d8 	beq.w	8003878 <HAL_I2C_Mem_Read+0x2cc>
        else if (hi2c->XferSize == 2U)
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d04c      	beq.n	8003766 <HAL_I2C_Mem_Read+0x1ba>
 80036cc:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ce:	6822      	ldr	r2, [r4, #0]
 80036d0:	f040 80a7 	bne.w	8003822 <HAL_I2C_Mem_Read+0x276>
 80036d4:	6953      	ldr	r3, [r2, #20]
 80036d6:	0759      	lsls	r1, r3, #29
 80036d8:	d5fc      	bpl.n	80036d4 <HAL_I2C_Mem_Read+0x128>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036da:	6813      	ldr	r3, [r2, #0]
 80036dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036e2:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e4:	6822      	ldr	r2, [r4, #0]
 80036e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036e8:	6912      	ldr	r2, [r2, #16]
 80036ea:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80036ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80036ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80036f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80036f2:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80036f4:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80036f6:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80036f8:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80036fa:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80036fc:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80036fe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003700:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003702:	6822      	ldr	r2, [r4, #0]
 8003704:	f040 80ab 	bne.w	800385e <HAL_I2C_Mem_Read+0x2b2>
 8003708:	6953      	ldr	r3, [r2, #20]
 800370a:	0759      	lsls	r1, r3, #29
 800370c:	d5fc      	bpl.n	8003708 <HAL_I2C_Mem_Read+0x15c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370e:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003710:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003716:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003718:	6913      	ldr	r3, [r2, #16]
 800371a:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800371c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800371e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003720:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003722:	3b01      	subs	r3, #1
 8003724:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003726:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003728:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800372a:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800372c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800372e:	8522      	strh	r2, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003730:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003732:	6822      	ldr	r2, [r4, #0]
 8003734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003736:	6912      	ldr	r2, [r2, #16]
 8003738:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 800373a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800373c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 800373e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8003740:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8003742:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8003744:	3101      	adds	r1, #1
          hi2c->XferCount--;
 8003746:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8003748:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800374a:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 800374c:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800374e:	8523      	strh	r3, [r4, #40]	; 0x28
 8003750:	e7b3      	b.n	80036ba <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003752:	6953      	ldr	r3, [r2, #20]
 8003754:	075b      	lsls	r3, r3, #29
 8003756:	d40c      	bmi.n	8003772 <HAL_I2C_Mem_Read+0x1c6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003758:	f7fe fb02 	bl	8001d60 <HAL_GetTick>
 800375c:	1b80      	subs	r0, r0, r6
 800375e:	4285      	cmp	r5, r0
 8003760:	d36b      	bcc.n	800383a <HAL_I2C_Mem_Read+0x28e>
 8003762:	2d00      	cmp	r5, #0
 8003764:	d069      	beq.n	800383a <HAL_I2C_Mem_Read+0x28e>
 8003766:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	d1f2      	bne.n	8003752 <HAL_I2C_Mem_Read+0x1a6>
 800376c:	6953      	ldr	r3, [r2, #20]
 800376e:	0759      	lsls	r1, r3, #29
 8003770:	d5fc      	bpl.n	800376c <HAL_I2C_Mem_Read+0x1c0>
  __ASM volatile ("cpsid i" : : : "memory");
 8003772:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003776:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003784:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003786:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003788:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800378a:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800378c:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800378e:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003790:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003792:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003794:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003796:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003798:	e7ca      	b.n	8003730 <HAL_I2C_Mem_Read+0x184>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379a:	6813      	ldr	r3, [r2, #0]
 800379c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	9003      	str	r0, [sp, #12]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	9203      	str	r2, [sp, #12]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	9203      	str	r2, [sp, #12]
 80037b0:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037ba:	b662      	cpsie	i
 80037bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80037be:	e77c      	b.n	80036ba <HAL_I2C_Mem_Read+0x10e>
 80037c0:	b945      	cbnz	r5, 80037d4 <HAL_I2C_Mem_Read+0x228>
 80037c2:	e07e      	b.n	80038c2 <HAL_I2C_Mem_Read+0x316>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	06d1      	lsls	r1, r2, #27
 80037c8:	d468      	bmi.n	800389c <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ca:	f7fe fac9 	bl	8001d60 <HAL_GetTick>
 80037ce:	1b80      	subs	r0, r0, r6
 80037d0:	4285      	cmp	r5, r0
 80037d2:	d332      	bcc.n	800383a <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	0650      	lsls	r0, r2, #25
 80037da:	d5f3      	bpl.n	80037c4 <HAL_I2C_Mem_Read+0x218>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037e0:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 80037e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037e4:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 80037e6:	3a01      	subs	r2, #1
 80037e8:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 80037ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80037ec:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037ee:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 80037f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80037f6:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037fa:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 80037fc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80037fe:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003802:	f57f af5a 	bpl.w	80036ba <HAL_I2C_Mem_Read+0x10e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	690b      	ldr	r3, [r1, #16]
 8003808:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 800380a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800380c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800380e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003810:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8003812:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8003814:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8003816:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8003818:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800381a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800381c:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800381e:	6261      	str	r1, [r4, #36]	; 0x24
 8003820:	e74b      	b.n	80036ba <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003822:	6953      	ldr	r3, [r2, #20]
 8003824:	075b      	lsls	r3, r3, #29
 8003826:	f53f af58 	bmi.w	80036da <HAL_I2C_Mem_Read+0x12e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	f7fe fa99 	bl	8001d60 <HAL_GetTick>
 800382e:	1b80      	subs	r0, r0, r6
 8003830:	4285      	cmp	r5, r0
 8003832:	d302      	bcc.n	800383a <HAL_I2C_Mem_Read+0x28e>
 8003834:	2d00      	cmp	r5, #0
 8003836:	f47f af49 	bne.w	80036cc <HAL_I2C_Mem_Read+0x120>
          return HAL_ERROR;
 800383a:	2701      	movs	r7, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 800383c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800383e:	2320      	movs	r3, #32
}
 8003840:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003842:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003844:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003848:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800384c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800384e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003852:	f043 0320 	orr.w	r3, r3, #32
 8003856:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003858:	b007      	add	sp, #28
 800385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800385e:	6953      	ldr	r3, [r2, #20]
 8003860:	075b      	lsls	r3, r3, #29
 8003862:	f53f af54 	bmi.w	800370e <HAL_I2C_Mem_Read+0x162>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003866:	f7fe fa7b 	bl	8001d60 <HAL_GetTick>
 800386a:	1b80      	subs	r0, r0, r6
 800386c:	4285      	cmp	r5, r0
 800386e:	d3e4      	bcc.n	800383a <HAL_I2C_Mem_Read+0x28e>
 8003870:	2d00      	cmp	r5, #0
 8003872:	f47f af45 	bne.w	8003700 <HAL_I2C_Mem_Read+0x154>
 8003876:	e7e0      	b.n	800383a <HAL_I2C_Mem_Read+0x28e>
 8003878:	b945      	cbnz	r5, 800388c <HAL_I2C_Mem_Read+0x2e0>
 800387a:	e02c      	b.n	80038d6 <HAL_I2C_Mem_Read+0x32a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	06d1      	lsls	r1, r2, #27
 8003880:	d40c      	bmi.n	800389c <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7fe fa6d 	bl	8001d60 <HAL_GetTick>
 8003886:	1b80      	subs	r0, r0, r6
 8003888:	4285      	cmp	r5, r0
 800388a:	d3d6      	bcc.n	800383a <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	0650      	lsls	r0, r2, #25
 8003892:	d5f3      	bpl.n	800387c <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e7b6      	b.n	800380a <HAL_I2C_Mem_Read+0x25e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800389c:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 80038a0:	2701      	movs	r7, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a2:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a4:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a6:	6158      	str	r0, [r3, #20]
}
 80038a8:	4638      	mov	r0, r7
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038aa:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ac:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80038b6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038ba:	6423      	str	r3, [r4, #64]	; 0x40
}
 80038bc:	b007      	add	sp, #28
 80038be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	0652      	lsls	r2, r2, #25
 80038c8:	d488      	bmi.n	80037dc <HAL_I2C_Mem_Read+0x230>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	06d5      	lsls	r5, r2, #27
 80038ce:	d4e5      	bmi.n	800389c <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d0:	f7fe fa46 	bl	8001d60 <HAL_GetTick>
 80038d4:	e7b1      	b.n	800383a <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	0652      	lsls	r2, r2, #25
 80038dc:	d5f5      	bpl.n	80038ca <HAL_I2C_Mem_Read+0x31e>
 80038de:	e7d9      	b.n	8003894 <HAL_I2C_Mem_Read+0x2e8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e0:	6813      	ldr	r3, [r2, #0]
 80038e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038e6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038e8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	9004      	str	r0, [sp, #16]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	9204      	str	r2, [sp, #16]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	9204      	str	r2, [sp, #16]
 80038f6:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003900:	b662      	cpsie	i
 8003902:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003904:	e6d9      	b.n	80036ba <HAL_I2C_Mem_Read+0x10e>
 8003906:	bf00      	nop

08003908 <HAL_I2C_MasterTxCpltCallback>:
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop

0800390c <HAL_I2C_MasterRxCpltCallback>:
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop

08003910 <HAL_I2C_SlaveTxCpltCallback>:
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop

08003914 <HAL_I2C_SlaveRxCpltCallback>:
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop

08003918 <HAL_I2C_AddrCallback>:
}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop

0800391c <HAL_I2C_ListenCpltCallback>:
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop

08003920 <HAL_I2C_MemTxCpltCallback>:
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop

08003924 <HAL_I2C_MemRxCpltCallback>:
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop

08003928 <HAL_I2C_AbortCpltCallback>:
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop

0800392c <I2C_DMAAbort>:
  hi2c->hdmatx->XferCpltCallback = NULL;
 800392c:	2200      	movs	r2, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800392e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003930:	b570      	push	{r4, r5, r6, lr}
  hi2c->hdmarx->XferCpltCallback = NULL;
 8003932:	e9d3 650d 	ldrd	r6, r5, [r3, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003936:	6819      	ldr	r1, [r3, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003938:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393c:	680c      	ldr	r4, [r1, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 800393e:	62b2      	str	r2, [r6, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003940:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmarx->XferCpltCallback = NULL;
 8003944:	62aa      	str	r2, [r5, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003946:	600c      	str	r4, [r1, #0]
  hi2c->XferCount = 0U;
 8003948:	855a      	strh	r2, [r3, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 800394a:	680c      	ldr	r4, [r1, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 800394c:	6372      	str	r2, [r6, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 800394e:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003952:	636a      	str	r2, [r5, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8003954:	600c      	str	r4, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003956:	f893 403d 	ldrb.w	r4, [r3, #61]	; 0x3d
 800395a:	2c60      	cmp	r4, #96	; 0x60
 800395c:	d019      	beq.n	8003992 <I2C_DMAAbort+0x66>
 800395e:	b2c0      	uxtb	r0, r0
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003960:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8003964:	2828      	cmp	r0, #40	; 0x28
 8003966:	d008      	beq.n	800397a <I2C_DMAAbort+0x4e>
      hi2c->State = HAL_I2C_STATE_READY;
 8003968:	2120      	movs	r1, #32
 800396a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003972:	4618      	mov	r0, r3
 8003974:	f004 f9e8 	bl	8007d48 <HAL_I2C_ErrorCallback>
}
 8003978:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_ENABLE(hi2c);
 800397a:	680c      	ldr	r4, [r1, #0]
 800397c:	f044 0401 	orr.w	r4, r4, #1
 8003980:	600c      	str	r4, [r1, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003982:	680c      	ldr	r4, [r1, #0]
 8003984:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8003988:	600c      	str	r4, [r1, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800398c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
 8003990:	e7ef      	b.n	8003972 <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003992:	2120      	movs	r1, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8003994:	4618      	mov	r0, r3
    hi2c->State         = HAL_I2C_STATE_READY;
 8003996:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800399e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80039a0:	f7ff ffc2 	bl	8003928 <HAL_I2C_AbortCpltCallback>
}
 80039a4:	bd70      	pop	{r4, r5, r6, pc}
 80039a6:	bf00      	nop

080039a8 <HAL_I2C_EV_IRQHandler>:
{
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80039ac:	6803      	ldr	r3, [r0, #0]
{
 80039ae:	b08c      	sub	sp, #48	; 0x30
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80039b0:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039b2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039b4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b8:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039bc:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80039be:	2a10      	cmp	r2, #16
 80039c0:	d022      	beq.n	8003a08 <HAL_I2C_EV_IRQHandler+0x60>
 80039c2:	2a40      	cmp	r2, #64	; 0x40
 80039c4:	d020      	beq.n	8003a08 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039c8:	b2c9      	uxtb	r1, r1
 80039ca:	2a00      	cmp	r2, #0
 80039cc:	f000 80cc 	beq.w	8003b68 <HAL_I2C_EV_IRQHandler+0x1c0>
  uint32_t sr2itflags               = 0U;
 80039d0:	2600      	movs	r6, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039d2:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d4:	f3c2 0540 	ubfx	r5, r2, #1, #1
 80039d8:	2d00      	cmp	r5, #0
 80039da:	f000 8089 	beq.w	8003af0 <HAL_I2C_EV_IRQHandler+0x148>
 80039de:	0585      	lsls	r5, r0, #22
 80039e0:	f140 808b 	bpl.w	8003afa <HAL_I2C_EV_IRQHandler+0x152>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039e6:	b102      	cbz	r2, 80039ea <HAL_I2C_EV_IRQHandler+0x42>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039e8:	699e      	ldr	r6, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039ea:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80039ee:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80039f2:	2a28      	cmp	r2, #40	; 0x28
 80039f4:	f000 8244 	beq.w	8003e80 <HAL_I2C_EV_IRQHandler+0x4d8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039f8:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 80039fc:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039fe:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003a00:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8003a04:	b00c      	add	sp, #48	; 0x30
 8003a06:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a08:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a0a:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a0c:	07d6      	lsls	r6, r2, #31
 8003a0e:	d449      	bmi.n	8003aa4 <HAL_I2C_EV_IRQHandler+0xfc>
 8003a10:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8003a14:	d0f6      	beq.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8003a16:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8003a1a:	d0f3      	beq.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a1c:	0716      	lsls	r6, r2, #28
 8003a1e:	f140 80a9 	bpl.w	8003b74 <HAL_I2C_EV_IRQHandler+0x1cc>
 8003a22:	0585      	lsls	r5, r0, #22
 8003a24:	f100 821d 	bmi.w	8003e62 <HAL_I2C_EV_IRQHandler+0x4ba>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a28:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a2c:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a2e:	f000 810e 	beq.w	8003c4e <HAL_I2C_EV_IRQHandler+0x2a6>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a32:	0509      	lsls	r1, r1, #20
 8003a34:	d4e6      	bmi.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a36:	0616      	lsls	r6, r2, #24
 8003a38:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8003a3c:	f140 81b0 	bpl.w	8003da0 <HAL_I2C_EV_IRQHandler+0x3f8>
 8003a40:	0545      	lsls	r5, r0, #21
 8003a42:	f140 81ad 	bpl.w	8003da0 <HAL_I2C_EV_IRQHandler+0x3f8>
 8003a46:	2900      	cmp	r1, #0
 8003a48:	f040 81ad 	bne.w	8003da6 <HAL_I2C_EV_IRQHandler+0x3fe>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a4c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a50:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a52:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a56:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a58:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a5a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	f040 8387 	bne.w	8004170 <HAL_I2C_EV_IRQHandler+0x7c8>
 8003a62:	2a21      	cmp	r2, #33	; 0x21
 8003a64:	f000 842b 	beq.w	80042be <HAL_I2C_EV_IRQHandler+0x916>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003a68:	2940      	cmp	r1, #64	; 0x40
 8003a6a:	d1cb      	bne.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a6c:	2a22      	cmp	r2, #34	; 0x22
 8003a6e:	d1c9      	bne.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->XferCount == 0U)
 8003a70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a72:	b292      	uxth	r2, r2
 8003a74:	2a00      	cmp	r2, #0
 8003a76:	f000 843d 	beq.w	80042f4 <HAL_I2C_EV_IRQHandler+0x94c>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a7a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003a7e:	2a40      	cmp	r2, #64	; 0x40
 8003a80:	f040 80c5 	bne.w	8003c0e <HAL_I2C_EV_IRQHandler+0x266>
        if (hi2c->EventCount == 0U)
 8003a84:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003a86:	2a00      	cmp	r2, #0
 8003a88:	f040 84bd 	bne.w	8004406 <HAL_I2C_EV_IRQHandler+0xa5e>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a8c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003a8e:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a92:	f000 84ca 	beq.w	800442a <HAL_I2C_EV_IRQHandler+0xa82>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a96:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a9a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8003a9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	6523      	str	r3, [r4, #80]	; 0x50
 8003aa2:	e7af      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aa4:	0585      	lsls	r5, r0, #22
 8003aa6:	d562      	bpl.n	8003b6e <HAL_I2C_EV_IRQHandler+0x1c6>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003aa8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003aaa:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8003aae:	f000 81fb 	beq.w	8003ea8 <HAL_I2C_EV_IRQHandler+0x500>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003ab2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ab4:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003ab8:	bf04      	itt	eq
 8003aba:	2208      	moveq	r2, #8
 8003abc:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003abe:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003ac2:	2a40      	cmp	r2, #64	; 0x40
 8003ac4:	f000 81f3 	beq.w	8003eae <HAL_I2C_EV_IRQHandler+0x506>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ac8:	6922      	ldr	r2, [r4, #16]
 8003aca:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003ace:	f000 81b2 	beq.w	8003e36 <HAL_I2C_EV_IRQHandler+0x48e>
      if (hi2c->EventCount == 0U)
 8003ad2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003ad4:	2a00      	cmp	r2, #0
 8003ad6:	f000 81f1 	beq.w	8003ebc <HAL_I2C_EV_IRQHandler+0x514>
      else if (hi2c->EventCount == 1U)
 8003ada:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003adc:	2a01      	cmp	r2, #1
 8003ade:	d191      	bne.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ae0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003ae2:	11d2      	asrs	r2, r2, #7
 8003ae4:	f002 0206 	and.w	r2, r2, #6
 8003ae8:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8003aec:	611a      	str	r2, [r3, #16]
 8003aee:	e789      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003af0:	06d6      	lsls	r6, r2, #27
 8003af2:	d502      	bpl.n	8003afa <HAL_I2C_EV_IRQHandler+0x152>
 8003af4:	0586      	lsls	r6, r0, #22
 8003af6:	f100 80d7 	bmi.w	8003ca8 <HAL_I2C_EV_IRQHandler+0x300>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003afa:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8003afe:	2921      	cmp	r1, #33	; 0x21
 8003b00:	f3c2 0580 	ubfx	r5, r2, #2, #1
 8003b04:	d04e      	beq.n	8003ba4 <HAL_I2C_EV_IRQHandler+0x1fc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b06:	0651      	lsls	r1, r2, #25
 8003b08:	f140 808b 	bpl.w	8003c22 <HAL_I2C_EV_IRQHandler+0x27a>
 8003b0c:	0542      	lsls	r2, r0, #21
 8003b0e:	f140 8088 	bpl.w	8003c22 <HAL_I2C_EV_IRQHandler+0x27a>
 8003b12:	2d00      	cmp	r5, #0
 8003b14:	f040 8088 	bne.w	8003c28 <HAL_I2C_EV_IRQHandler+0x280>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b18:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003b1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b1e:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8003b20:	b292      	uxth	r2, r2
 8003b22:	2a00      	cmp	r2, #0
 8003b24:	f43f af6e 	beq.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b2c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003b2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003b30:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003b3a:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b3c:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003b3e:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f47f af5f 	bne.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8003b46:	292a      	cmp	r1, #42	; 0x2a
 8003b48:	f47f af5c 	bne.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b4c:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b4e:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b50:	6822      	ldr	r2, [r4, #0]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b52:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b54:	6853      	ldr	r3, [r2, #4]
 8003b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b5a:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b5c:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b5e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b62:	f7ff fed7 	bl	8003914 <HAL_I2C_SlaveRxCpltCallback>
 8003b66:	e74d      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b68:	699e      	ldr	r6, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	e732      	b.n	80039d4 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b6e:	0715      	lsls	r5, r2, #28
 8003b70:	f53f af5a 	bmi.w	8003a28 <HAL_I2C_EV_IRQHandler+0x80>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b74:	0796      	lsls	r6, r2, #30
 8003b76:	f57f af57 	bpl.w	8003a28 <HAL_I2C_EV_IRQHandler+0x80>
 8003b7a:	0585      	lsls	r5, r0, #22
 8003b7c:	f57f af54 	bpl.w	8003a28 <HAL_I2C_EV_IRQHandler+0x80>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b80:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b84:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b86:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b88:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b8c:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b8e:	2922      	cmp	r1, #34	; 0x22
 8003b90:	f000 8222 	beq.w	8003fd8 <HAL_I2C_EV_IRQHandler+0x630>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b94:	2200      	movs	r2, #0
 8003b96:	920a      	str	r2, [sp, #40]	; 0x28
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	920a      	str	r2, [sp, #40]	; 0x28
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8003ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ba2:	e72f      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ba4:	0612      	lsls	r2, r2, #24
 8003ba6:	d527      	bpl.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x250>
 8003ba8:	0546      	lsls	r6, r0, #21
 8003baa:	d525      	bpl.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x250>
 8003bac:	bb3d      	cbnz	r5, 8003bfe <HAL_I2C_EV_IRQHandler+0x256>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bae:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003bb2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb4:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	2a00      	cmp	r2, #0
 8003bba:	f43f af23 	beq.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003bc0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003bc4:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8003bc6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003bc8:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003bca:	3a01      	subs	r2, #1
 8003bcc:	b292      	uxth	r2, r2
 8003bce:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	2a00      	cmp	r2, #0
 8003bd6:	f47f af15 	bne.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8003bda:	2829      	cmp	r0, #41	; 0x29
 8003bdc:	f47f af12 	bne.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003be0:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003be2:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003be4:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bec:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bee:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bf2:	f7ff fe8d 	bl	8003910 <HAL_I2C_SlaveTxCpltCallback>
 8003bf6:	e705      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bf8:	2d00      	cmp	r5, #0
 8003bfa:	f43f af03 	beq.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8003bfe:	0580      	lsls	r0, r0, #22
 8003c00:	f57f af00 	bpl.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
  if (hi2c->XferCount != 0U)
 8003c04:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c06:	b292      	uxth	r2, r2
 8003c08:	2a00      	cmp	r2, #0
 8003c0a:	f43f aefb 	beq.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c10:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003c14:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8003c16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003c18:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003c20:	e6f0      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	f43f aeee 	beq.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8003c28:	0586      	lsls	r6, r0, #22
 8003c2a:	f57f aeeb 	bpl.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
  if (hi2c->XferCount != 0U)
 8003c2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c30:	b292      	uxth	r2, r2
 8003c32:	2a00      	cmp	r2, #0
 8003c34:	f43f aee6 	beq.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c3c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003c3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003c40:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003c46:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8003c48:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003c4a:	6262      	str	r2, [r4, #36]	; 0x24
 8003c4c:	e6da      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c4e:	050e      	lsls	r6, r1, #20
 8003c50:	f53f aed8 	bmi.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c54:	0655      	lsls	r5, r2, #25
 8003c56:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8003c5a:	f140 80d2 	bpl.w	8003e02 <HAL_I2C_EV_IRQHandler+0x45a>
 8003c5e:	0542      	lsls	r2, r0, #21
 8003c60:	f140 80cf 	bpl.w	8003e02 <HAL_I2C_EV_IRQHandler+0x45a>
 8003c64:	2900      	cmp	r1, #0
 8003c66:	f040 80cf 	bne.w	8003e08 <HAL_I2C_EV_IRQHandler+0x460>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c6a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003c6e:	2a22      	cmp	r2, #34	; 0x22
 8003c70:	f47f aec8 	bne.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    tmp = hi2c->XferCount;
 8003c74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c76:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8003c78:	2a03      	cmp	r2, #3
 8003c7a:	f240 82f3 	bls.w	8004264 <HAL_I2C_EV_IRQHandler+0x8bc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c82:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003c84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003c86:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003c8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003c90:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8003c96:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8003c98:	f47f aeb4 	bne.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c9c:	6822      	ldr	r2, [r4, #0]
 8003c9e:	6853      	ldr	r3, [r2, #4]
 8003ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ca4:	6053      	str	r3, [r2, #4]
 8003ca6:	e6ad      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ca8:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cac:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cae:	b2f6      	uxtb	r6, r6
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cb4:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003cb6:	950b      	str	r5, [sp, #44]	; 0x2c
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ccc:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	0511      	lsls	r1, r2, #20
 8003cd2:	d522      	bpl.n	8003d1a <HAL_I2C_EV_IRQHandler+0x372>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cd4:	f006 02f7 	and.w	r2, r6, #247	; 0xf7
 8003cd8:	2a22      	cmp	r2, #34	; 0x22
 8003cda:	f000 815b 	beq.w	8003f94 <HAL_I2C_EV_IRQHandler+0x5ec>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003cde:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003ce0:	6802      	ldr	r2, [r0, #0]
 8003ce2:	6852      	ldr	r2, [r2, #4]
 8003ce4:	b292      	uxth	r2, r2
 8003ce6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003ce8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cea:	b292      	uxth	r2, r2
 8003cec:	b11a      	cbz	r2, 8003cf6 <HAL_I2C_EV_IRQHandler+0x34e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003cf0:	f042 0204 	orr.w	r2, r2, #4
 8003cf4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cfc:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cfe:	f7fe fd7f 	bl	8002800 <HAL_DMA_GetState>
 8003d02:	2801      	cmp	r0, #1
 8003d04:	d009      	beq.n	8003d1a <HAL_I2C_EV_IRQHandler+0x372>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d08:	4aa0      	ldr	r2, [pc, #640]	; (8003f8c <HAL_I2C_EV_IRQHandler+0x5e4>)
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d0a:	4618      	mov	r0, r3
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d0e:	f7fe fc95 	bl	800263c <HAL_DMA_Abort_IT>
 8003d12:	b110      	cbz	r0, 8003d1a <HAL_I2C_EV_IRQHandler+0x372>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d14:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003d16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d18:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8003d1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	b313      	cbz	r3, 8003d66 <HAL_I2C_EV_IRQHandler+0x3be>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	0752      	lsls	r2, r2, #29
 8003d26:	d50a      	bpl.n	8003d3e <HAL_I2C_EV_IRQHandler+0x396>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d2c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003d2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d32:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8003d34:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 8003d36:	b292      	uxth	r2, r2
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003d3c:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	0655      	lsls	r5, r2, #25
 8003d42:	d509      	bpl.n	8003d58 <HAL_I2C_EV_IRQHandler+0x3b0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d48:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003d4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003d4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003d52:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8003d54:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003d56:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8003d58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	b11b      	cbz	r3, 8003d66 <HAL_I2C_EV_IRQHandler+0x3be>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d60:	f043 0304 	orr.w	r3, r3, #4
 8003d64:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f040 80b5 	bne.w	8003ed8 <HAL_I2C_EV_IRQHandler+0x530>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d6e:	2e2a      	cmp	r6, #42	; 0x2a
 8003d70:	f000 8165 	beq.w	800403e <HAL_I2C_EV_IRQHandler+0x696>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d74:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003d78:	2b28      	cmp	r3, #40	; 0x28
 8003d7a:	f000 8168 	beq.w	800404e <HAL_I2C_EV_IRQHandler+0x6a6>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d80:	2b22      	cmp	r3, #34	; 0x22
 8003d82:	d002      	beq.n	8003d8a <HAL_I2C_EV_IRQHandler+0x3e2>
 8003d84:	2e22      	cmp	r6, #34	; 0x22
 8003d86:	f47f ae3d 	bne.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d8a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d8e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d90:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003d92:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d9a:	f7ff fdbb 	bl	8003914 <HAL_I2C_SlaveRxCpltCallback>
 8003d9e:	e631      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003da0:	2900      	cmp	r1, #0
 8003da2:	f43f ae2f 	beq.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8003da6:	0582      	lsls	r2, r0, #22
 8003da8:	f57f ae2c 	bpl.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dae:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003db2:	2a21      	cmp	r2, #33	; 0x21
 8003db4:	f47f ae26 	bne.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->XferCount != 0U)
 8003db8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003dba:	b292      	uxth	r2, r2
 8003dbc:	2a00      	cmp	r2, #0
 8003dbe:	f47f af26 	bne.w	8003c0e <HAL_I2C_EV_IRQHandler+0x266>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dc2:	2908      	cmp	r1, #8
 8003dc4:	d005      	beq.n	8003dd2 <HAL_I2C_EV_IRQHandler+0x42a>
 8003dc6:	2920      	cmp	r1, #32
 8003dc8:	d003      	beq.n	8003dd2 <HAL_I2C_EV_IRQHandler+0x42a>
 8003dca:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003dce:	f040 82f9 	bne.w	80043c4 <HAL_I2C_EV_IRQHandler+0xa1c>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	2020      	movs	r0, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003ddc:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	6819      	ldr	r1, [r3, #0]
 8003de0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003de4:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003de6:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003de8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dec:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003df0:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003df2:	2b40      	cmp	r3, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003df8:	f000 82b9 	beq.w	800436e <HAL_I2C_EV_IRQHandler+0x9c6>
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dfc:	f7ff fd84 	bl	8003908 <HAL_I2C_MasterTxCpltCallback>
 8003e00:	e600      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e02:	2900      	cmp	r1, #0
 8003e04:	f43f adfe 	beq.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8003e08:	0586      	lsls	r6, r0, #22
 8003e0a:	f57f adfb 	bpl.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8003e10:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e14:	b292      	uxth	r2, r2
 8003e16:	2a04      	cmp	r2, #4
 8003e18:	f000 815f 	beq.w	80040da <HAL_I2C_EV_IRQHandler+0x732>
  else if (hi2c->XferCount == 3U)
 8003e1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	2a03      	cmp	r2, #3
 8003e22:	f000 8161 	beq.w	80040e8 <HAL_I2C_EV_IRQHandler+0x740>
  else if (hi2c->XferCount == 2U)
 8003e26:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e28:	b292      	uxth	r2, r2
 8003e2a:	2a02      	cmp	r2, #2
 8003e2c:	f000 81da 	beq.w	80041e4 <HAL_I2C_EV_IRQHandler+0x83c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	700b      	strb	r3, [r1, #0]
 8003e34:	e703      	b.n	8003c3e <HAL_I2C_EV_IRQHandler+0x296>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e36:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003e3a:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e3e:	bf16      	itet	ne
 8003e40:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e44:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e48:	b2d2      	uxtbne	r2, r2
 8003e4a:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003e4c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003e4e:	2a00      	cmp	r2, #0
 8003e50:	f000 80f0 	beq.w	8004034 <HAL_I2C_EV_IRQHandler+0x68c>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003e54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e56:	b172      	cbz	r2, 8003e76 <HAL_I2C_EV_IRQHandler+0x4ce>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5e:	605a      	str	r2, [r3, #4]
 8003e60:	e5d0      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e62:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e66:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e68:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003e6a:	2900      	cmp	r1, #0
 8003e6c:	f000 8089 	beq.w	8003f82 <HAL_I2C_EV_IRQHandler+0x5da>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003e70:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e72:	2a00      	cmp	r2, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_I2C_EV_IRQHandler+0x4b0>
 8003e76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e7a:	2a00      	cmp	r2, #0
 8003e7c:	d1ec      	bne.n	8003e58 <HAL_I2C_EV_IRQHandler+0x4b0>
 8003e7e:	e5c1      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003e80:	685a      	ldr	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e82:	ea6f 0196 	mvn.w	r1, r6, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8a:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003e8c:	0633      	lsls	r3, r6, #24
    __HAL_UNLOCK(hi2c);
 8003e8e:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e92:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003e96:	bf54      	ite	pl
 8003e98:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003e9a:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8003e9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f7ff fd39 	bl	8003918 <HAL_I2C_AddrCallback>
 8003ea6:	e5ad      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003eac:	e607      	b.n	8003abe <HAL_I2C_EV_IRQHandler+0x116>
    if (hi2c->EventCount == 0U)
 8003eae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003eb0:	b962      	cbnz	r2, 8003ecc <HAL_I2C_EV_IRQHandler+0x524>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003eb2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003eb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eb8:	611a      	str	r2, [r3, #16]
 8003eba:	e5a3      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ebc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003ebe:	11d2      	asrs	r2, r2, #7
 8003ec0:	f002 0206 	and.w	r2, r2, #6
 8003ec4:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003ec8:	611a      	str	r2, [r3, #16]
 8003eca:	e59b      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ecc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	611a      	str	r2, [r3, #16]
 8003ed6:	e595      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ed8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003edc:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ee0:	b2d2      	uxtb	r2, r2
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ee2:	2910      	cmp	r1, #16
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	f000 80c4 	beq.w	8004072 <HAL_I2C_EV_IRQHandler+0x6ca>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eea:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8003eee:	2928      	cmp	r1, #40	; 0x28
 8003ef0:	f000 80ba 	beq.w	8004068 <HAL_I2C_EV_IRQHandler+0x6c0>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	0509      	lsls	r1, r1, #20
 8003ef8:	d404      	bmi.n	8003f04 <HAL_I2C_EV_IRQHandler+0x55c>
 8003efa:	2a60      	cmp	r2, #96	; 0x60
 8003efc:	d002      	beq.n	8003f04 <HAL_I2C_EV_IRQHandler+0x55c>
      hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	2220      	movs	r2, #32
 8003f00:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f04:	2200      	movs	r2, #0
 8003f06:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003f12:	d07e      	beq.n	8004012 <HAL_I2C_EV_IRQHandler+0x66a>
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f16:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f18:	f891 0021 	ldrb.w	r0, [r1, #33]	; 0x21
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f20:	2801      	cmp	r0, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f22:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f24:	f000 8105 	beq.w	8004132 <HAL_I2C_EV_IRQHandler+0x78a>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f28:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <HAL_I2C_EV_IRQHandler+0x5e4>)
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f2a:	4608      	mov	r0, r1
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f2c:	634b      	str	r3, [r1, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f2e:	f7fe fb85 	bl	800263c <HAL_DMA_Abort_IT>
 8003f32:	b150      	cbz	r0, 8003f4a <HAL_I2C_EV_IRQHandler+0x5a2>
        hi2c->State = HAL_I2C_STATE_READY;
 8003f34:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8003f36:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f38:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003f3a:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f3c:	6b41      	ldr	r1, [r0, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f48:	4788      	blx	r1
  CurrentState = hi2c->State;
 8003f4a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8003f50:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f52:	0751      	lsls	r1, r2, #29
 8003f54:	f57f ad56 	bpl.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8003f58:	2b28      	cmp	r3, #40	; 0x28
 8003f5a:	f47f ad53 	bne.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f5e:	2200      	movs	r2, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f60:	2520      	movs	r5, #32
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f62:	6821      	ldr	r1, [r4, #0]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f64:	4e0a      	ldr	r6, [pc, #40]	; (8003f90 <HAL_I2C_EV_IRQHandler+0x5e8>)
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f66:	684b      	ldr	r3, [r1, #4]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f68:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f6e:	604b      	str	r3, [r1, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f70:	62e6      	str	r6, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f72:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f74:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f78:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f7c:	f7ff fcce 	bl	800391c <HAL_I2C_ListenCpltCallback>
 8003f80:	e540      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003f82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003f84:	2a00      	cmp	r2, #0
 8003f86:	f47f af73 	bne.w	8003e70 <HAL_I2C_EV_IRQHandler+0x4c8>
 8003f8a:	e53b      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8003f8c:	0800392d 	.word	0x0800392d
 8003f90:	ffff0000 	.word	0xffff0000
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003f94:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003f96:	6802      	ldr	r2, [r0, #0]
 8003f98:	6852      	ldr	r2, [r2, #4]
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003f9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003fa0:	b292      	uxth	r2, r2
 8003fa2:	b11a      	cbz	r2, 8003fac <HAL_I2C_EV_IRQHandler+0x604>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fa4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003fa6:	f042 0204 	orr.w	r2, r2, #4
 8003faa:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb2:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fb4:	f7fe fc24 	bl	8002800 <HAL_DMA_GetState>
 8003fb8:	2801      	cmp	r0, #1
 8003fba:	f43f aeae 	beq.w	8003d1a <HAL_I2C_EV_IRQHandler+0x372>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fc0:	4aa4      	ldr	r2, [pc, #656]	; (8004254 <HAL_I2C_EV_IRQHandler+0x8ac>)
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fc2:	4618      	mov	r0, r3
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fc4:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fc6:	f7fe fb39 	bl	800263c <HAL_DMA_Abort_IT>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	f43f aea5 	beq.w	8003d1a <HAL_I2C_EV_IRQHandler+0x372>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fd0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003fd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003fd4:	4798      	blx	r3
 8003fd6:	e6a0      	b.n	8003d1a <HAL_I2C_EV_IRQHandler+0x372>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003fd8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003fda:	b911      	cbnz	r1, 8003fe2 <HAL_I2C_EV_IRQHandler+0x63a>
 8003fdc:	2a40      	cmp	r2, #64	; 0x40
 8003fde:	f000 80cb 	beq.w	8004178 <HAL_I2C_EV_IRQHandler+0x7d0>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003fe2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003fe4:	b922      	cbnz	r2, 8003ff0 <HAL_I2C_EV_IRQHandler+0x648>
 8003fe6:	6921      	ldr	r1, [r4, #16]
 8003fe8:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8003fec:	f000 80cb 	beq.w	8004186 <HAL_I2C_EV_IRQHandler+0x7de>
      if (hi2c->XferCount == 0U)
 8003ff0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ff2:	b292      	uxth	r2, r2
 8003ff4:	2a00      	cmp	r2, #0
 8003ff6:	d148      	bne.n	800408a <HAL_I2C_EV_IRQHandler+0x6e2>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff8:	9202      	str	r2, [sp, #8]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	9202      	str	r2, [sp, #8]
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	9202      	str	r2, [sp, #8]
 8004002:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	6523      	str	r3, [r4, #80]	; 0x50
 8004010:	e4f8      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004012:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8004016:	2960      	cmp	r1, #96	; 0x60
 8004018:	d075      	beq.n	8004106 <HAL_I2C_EV_IRQHandler+0x75e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	0650      	lsls	r0, r2, #25
 800401e:	d505      	bpl.n	800402c <HAL_I2C_EV_IRQHandler+0x684>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004024:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004028:	3301      	adds	r3, #1
 800402a:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800402c:	4620      	mov	r0, r4
 800402e:	f003 fe8b 	bl	8007d48 <HAL_I2C_ErrorCallback>
 8004032:	e78a      	b.n	8003f4a <HAL_I2C_EV_IRQHandler+0x5a2>
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004034:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004036:	2900      	cmp	r1, #0
 8004038:	f47f af0c 	bne.w	8003e54 <HAL_I2C_EV_IRQHandler+0x4ac>
 800403c:	e4e2      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800403e:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8004040:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004042:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004044:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004048:	f7ff fc64 	bl	8003914 <HAL_I2C_SlaveRxCpltCallback>
 800404c:	e692      	b.n	8003d74 <HAL_I2C_EV_IRQHandler+0x3cc>
      hi2c->PreviousState = I2C_STATE_NONE;
 800404e:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8004050:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004052:	4981      	ldr	r1, [pc, #516]	; (8004258 <HAL_I2C_EV_IRQHandler+0x8b0>)
      HAL_I2C_ListenCpltCallback(hi2c);
 8004054:	4620      	mov	r0, r4
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004056:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004058:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800405a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800405e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004062:	f7ff fc5b 	bl	800391c <HAL_I2C_ListenCpltCallback>
 8004066:	e4cd      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004068:	2200      	movs	r2, #0
 800406a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800406c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 8004070:	e74c      	b.n	8003f0c <HAL_I2C_EV_IRQHandler+0x564>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004072:	2a22      	cmp	r2, #34	; 0x22
 8004074:	f47f af39 	bne.w	8003eea <HAL_I2C_EV_IRQHandler+0x542>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800407e:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	0510      	lsls	r0, r2, #20
 8004084:	f57f af3b 	bpl.w	8003efe <HAL_I2C_EV_IRQHandler+0x556>
 8004088:	e73c      	b.n	8003f04 <HAL_I2C_EV_IRQHandler+0x55c>
      else if (hi2c->XferCount == 1U)
 800408a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800408c:	b292      	uxth	r2, r2
 800408e:	2a01      	cmp	r2, #1
 8004090:	f000 8087 	beq.w	80041a2 <HAL_I2C_EV_IRQHandler+0x7fa>
      else if (hi2c->XferCount == 2U)
 8004094:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004096:	b292      	uxth	r2, r2
 8004098:	2a02      	cmp	r2, #2
 800409a:	f000 8131 	beq.w	8004300 <HAL_I2C_EV_IRQHandler+0x958>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040a4:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	0515      	lsls	r5, r2, #20
 80040aa:	d50e      	bpl.n	80040ca <HAL_I2C_EV_IRQHandler+0x722>
 80040ac:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80040b0:	d007      	beq.n	80040c2 <HAL_I2C_EV_IRQHandler+0x71a>
 80040b2:	3801      	subs	r0, #1
 80040b4:	281f      	cmp	r0, #31
 80040b6:	d808      	bhi.n	80040ca <HAL_I2C_EV_IRQHandler+0x722>
 80040b8:	4a68      	ldr	r2, [pc, #416]	; (800425c <HAL_I2C_EV_IRQHandler+0x8b4>)
 80040ba:	fa22 f000 	lsr.w	r0, r2, r0
 80040be:	07c0      	lsls	r0, r0, #31
 80040c0:	d503      	bpl.n	80040ca <HAL_I2C_EV_IRQHandler+0x722>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040c8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ca:	2200      	movs	r2, #0
 80040cc:	9209      	str	r2, [sp, #36]	; 0x24
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	9209      	str	r2, [sp, #36]	; 0x24
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	9309      	str	r3, [sp, #36]	; 0x24
 80040d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d8:	e798      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x664>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e0:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	700b      	strb	r3, [r1, #0]
 80040e6:	e5aa      	b.n	8003c3e <HAL_I2C_EV_IRQHandler+0x296>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040e8:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80040ea:	2804      	cmp	r0, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80040f2:	f43f ae9d 	beq.w	8003e30 <HAL_I2C_EV_IRQHandler+0x488>
 80040f6:	2802      	cmp	r0, #2
 80040f8:	f43f ae9a 	beq.w	8003e30 <HAL_I2C_EV_IRQHandler+0x488>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e694      	b.n	8003e30 <HAL_I2C_EV_IRQHandler+0x488>
    hi2c->State = HAL_I2C_STATE_READY;
 8004106:	2120      	movs	r1, #32
 8004108:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	0655      	lsls	r5, r2, #25
 8004112:	d506      	bpl.n	8004122 <HAL_I2C_EV_IRQHandler+0x77a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004118:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800411a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	3201      	adds	r2, #1
 8004120:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8004122:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004124:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800412c:	f7ff fbfc 	bl	8003928 <HAL_I2C_AbortCpltCallback>
 8004130:	e70b      	b.n	8003f4a <HAL_I2C_EV_IRQHandler+0x5a2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004132:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004134:	4a47      	ldr	r2, [pc, #284]	; (8004254 <HAL_I2C_EV_IRQHandler+0x8ac>)
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004136:	4618      	mov	r0, r3
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004138:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800413a:	f7fe fa7f 	bl	800263c <HAL_DMA_Abort_IT>
 800413e:	2800      	cmp	r0, #0
 8004140:	f43f af03 	beq.w	8003f4a <HAL_I2C_EV_IRQHandler+0x5a2>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	0656      	lsls	r6, r2, #25
 800414a:	d506      	bpl.n	800415a <HAL_I2C_EV_IRQHandler+0x7b2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414c:	691a      	ldr	r2, [r3, #16]
 800414e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004150:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004152:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	3201      	adds	r2, #1
 8004158:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 800415a:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 800415c:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800415e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004166:	6b43      	ldr	r3, [r0, #52]	; 0x34
        hi2c->State = HAL_I2C_STATE_READY;
 8004168:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800416c:	4798      	blx	r3
 800416e:	e6ec      	b.n	8003f4a <HAL_I2C_EV_IRQHandler+0x5a2>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004170:	2a21      	cmp	r2, #33	; 0x21
 8004172:	f43f ac7d 	beq.w	8003a70 <HAL_I2C_EV_IRQHandler+0xc8>
 8004176:	e477      	b.n	8003a68 <HAL_I2C_EV_IRQHandler+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004178:	9100      	str	r1, [sp, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	9200      	str	r2, [sp, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	9b00      	ldr	r3, [sp, #0]
 8004184:	e43e      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004186:	9201      	str	r2, [sp, #4]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	9201      	str	r2, [sp, #4]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	9201      	str	r2, [sp, #4]
 8004190:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004198:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800419a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800419c:	3301      	adds	r3, #1
 800419e:	6523      	str	r3, [r4, #80]	; 0x50
 80041a0:	e430      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80041a2:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80041a6:	f000 80f9 	beq.w	800439c <HAL_I2C_EV_IRQHandler+0x9f4>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041aa:	2808      	cmp	r0, #8
 80041ac:	f000 80e6 	beq.w	800437c <HAL_I2C_EV_IRQHandler+0x9d4>
 80041b0:	2820      	cmp	r0, #32
 80041b2:	f000 80e3 	beq.w	800437c <HAL_I2C_EV_IRQHandler+0x9d4>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041b6:	2d12      	cmp	r5, #18
 80041b8:	f000 80dd 	beq.w	8004376 <HAL_I2C_EV_IRQHandler+0x9ce>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041bc:	2810      	cmp	r0, #16
 80041be:	d805      	bhi.n	80041cc <HAL_I2C_EV_IRQHandler+0x824>
 80041c0:	4a27      	ldr	r2, [pc, #156]	; (8004260 <HAL_I2C_EV_IRQHandler+0x8b8>)
 80041c2:	fa22 f000 	lsr.w	r0, r2, r0
 80041c6:	07c1      	lsls	r1, r0, #31
 80041c8:	f100 8118 	bmi.w	80043fc <HAL_I2C_EV_IRQHandler+0xa54>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d2:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d4:	2200      	movs	r2, #0
 80041d6:	9205      	str	r2, [sp, #20]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	9205      	str	r2, [sp, #20]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	9305      	str	r3, [sp, #20]
 80041e0:	9b05      	ldr	r3, [sp, #20]
 80041e2:	e713      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x664>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041e4:	2801      	cmp	r0, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041e8:	d065      	beq.n	80042b6 <HAL_I2C_EV_IRQHandler+0x90e>
 80041ea:	2810      	cmp	r0, #16
 80041ec:	d063      	beq.n	80042b6 <HAL_I2C_EV_IRQHandler+0x90e>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80041ee:	2804      	cmp	r0, #4
 80041f0:	f000 80f5 	beq.w	80043de <HAL_I2C_EV_IRQHandler+0xa36>
 80041f4:	2802      	cmp	r0, #2
 80041f6:	f000 80f2 	beq.w	80043de <HAL_I2C_EV_IRQHandler+0xa36>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fe:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004200:	2020      	movs	r0, #32
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8004206:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004208:	6822      	ldr	r2, [r4, #0]
    hi2c->XferCount--;
 800420a:	3b01      	subs	r3, #1
 800420c:	b29b      	uxth	r3, r3
 800420e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8004210:	6a63      	ldr	r3, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004212:	6912      	ldr	r2, [r2, #16]
    hi2c->pBuffPtr++;
 8004214:	1c59      	adds	r1, r3, #1
 8004216:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	705a      	strb	r2, [r3, #1]
    hi2c->XferCount--;
 800421a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800421c:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 800421e:	3b01      	subs	r3, #1
 8004220:	b29b      	uxth	r3, r3
 8004222:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004224:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8004226:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->pBuffPtr++;
 800422c:	3201      	adds	r2, #1
 800422e:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004230:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004232:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004236:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d032      	beq.n	80042a4 <HAL_I2C_EV_IRQHandler+0x8fc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800423e:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004240:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004242:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004246:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004248:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800424a:	f7ff fb5f 	bl	800390c <HAL_I2C_MasterRxCpltCallback>
 800424e:	f7ff bbd9 	b.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8004252:	bf00      	nop
 8004254:	0800392d 	.word	0x0800392d
 8004258:	ffff0000 	.word	0xffff0000
 800425c:	80008081 	.word	0x80008081
 8004260:	00010014 	.word	0x00010014
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004264:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004266:	2902      	cmp	r1, #2
 8004268:	f43f abcc 	beq.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 800426c:	2a01      	cmp	r2, #1
 800426e:	f63f abc9 	bhi.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->State = HAL_I2C_STATE_READY;
 8004272:	2120      	movs	r1, #32
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004274:	681a      	ldr	r2, [r3, #0]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004276:	6a60      	ldr	r0, [r4, #36]	; 0x24
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004284:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	7003      	strb	r3, [r0, #0]
      hi2c->XferCount--;
 800428a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800428c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800428e:	3b01      	subs	r3, #1
 8004290:	b29b      	uxth	r3, r3
 8004292:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004294:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004298:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
      hi2c->pBuffPtr++;
 800429c:	3201      	adds	r2, #1
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800429e:	2b40      	cmp	r3, #64	; 0x40
      hi2c->pBuffPtr++;
 80042a0:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042a2:	d1cc      	bne.n	800423e <HAL_I2C_EV_IRQHandler+0x896>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a4:	2300      	movs	r3, #0
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042a6:	4620      	mov	r0, r4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80042ac:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042ae:	f7ff fb39 	bl	8003924 <HAL_I2C_MemRxCpltCallback>
 80042b2:	f7ff bba7 	b.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e7a0      	b.n	8004200 <HAL_I2C_EV_IRQHandler+0x858>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042be:	2d08      	cmp	r5, #8
 80042c0:	f43f ad87 	beq.w	8003dd2 <HAL_I2C_EV_IRQHandler+0x42a>
 80042c4:	2d20      	cmp	r5, #32
 80042c6:	f43f ad84 	beq.w	8003dd2 <HAL_I2C_EV_IRQHandler+0x42a>
 80042ca:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80042ce:	f43f ad80 	beq.w	8003dd2 <HAL_I2C_EV_IRQHandler+0x42a>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042d2:	2611      	movs	r6, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d4:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d8:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80042da:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042e0:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042e2:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e4:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80042e8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80042ec:	f7ff fb0c 	bl	8003908 <HAL_I2C_MasterTxCpltCallback>
 80042f0:	f7ff bb88 	b.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	f7ff bb82 	b.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004300:	2810      	cmp	r0, #16
 8004302:	d923      	bls.n	800434c <HAL_I2C_EV_IRQHandler+0x9a4>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004304:	2100      	movs	r1, #0
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800430c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430e:	9107      	str	r1, [sp, #28]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	9207      	str	r2, [sp, #28]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	9207      	str	r2, [sp, #28]
 8004318:	9a07      	ldr	r2, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004320:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	0512      	lsls	r2, r2, #20
 8004326:	f57f ae71 	bpl.w	800400c <HAL_I2C_EV_IRQHandler+0x664>
 800432a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800432e:	d008      	beq.n	8004342 <HAL_I2C_EV_IRQHandler+0x99a>
 8004330:	3801      	subs	r0, #1
 8004332:	281f      	cmp	r0, #31
 8004334:	f63f ae6a 	bhi.w	800400c <HAL_I2C_EV_IRQHandler+0x664>
 8004338:	4a46      	ldr	r2, [pc, #280]	; (8004454 <HAL_I2C_EV_IRQHandler+0xaac>)
 800433a:	40c2      	lsrs	r2, r0
 800433c:	07d6      	lsls	r6, r2, #31
 800433e:	f57f ae65 	bpl.w	800400c <HAL_I2C_EV_IRQHandler+0x664>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	e65f      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x664>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800434c:	4a42      	ldr	r2, [pc, #264]	; (8004458 <HAL_I2C_EV_IRQHandler+0xab0>)
 800434e:	40c2      	lsrs	r2, r0
 8004350:	43d2      	mvns	r2, r2
 8004352:	f012 0201 	ands.w	r2, r2, #1
 8004356:	d1d5      	bne.n	8004304 <HAL_I2C_EV_IRQHandler+0x95c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004358:	6819      	ldr	r1, [r3, #0]
 800435a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800435e:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004360:	9208      	str	r2, [sp, #32]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	9208      	str	r2, [sp, #32]
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	9208      	str	r2, [sp, #32]
 800436a:	9a08      	ldr	r2, [sp, #32]
 800436c:	e7d9      	b.n	8004322 <HAL_I2C_EV_IRQHandler+0x97a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 800436e:	f7ff fad7 	bl	8003920 <HAL_I2C_MemTxCpltCallback>
 8004372:	f7ff bb47 	b.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004376:	2801      	cmp	r0, #1
 8004378:	f43f af28 	beq.w	80041cc <HAL_I2C_EV_IRQHandler+0x824>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437c:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004384:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004386:	9106      	str	r1, [sp, #24]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	9206      	str	r2, [sp, #24]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	9206      	str	r2, [sp, #24]
 8004390:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e637      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x664>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a2:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80043aa:	d01c      	beq.n	80043e6 <HAL_I2C_EV_IRQHandler+0xa3e>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ac:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b4:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b6:	9103      	str	r1, [sp, #12]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	9203      	str	r2, [sp, #12]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	9303      	str	r3, [sp, #12]
 80043c0:	9b03      	ldr	r3, [sp, #12]
 80043c2:	e623      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x664>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043c4:	2611      	movs	r6, #17
        hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043c8:	6859      	ldr	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80043ca:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043cc:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80043d0:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043d2:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 80043dc:	e50e      	b.n	8003dfc <HAL_I2C_EV_IRQHandler+0x454>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e70c      	b.n	8004200 <HAL_I2C_EV_IRQHandler+0x858>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e6:	9204      	str	r2, [sp, #16]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	9204      	str	r2, [sp, #16]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	9204      	str	r2, [sp, #16]
 80043f0:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e607      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x664>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e6e6      	b.n	80041d4 <HAL_I2C_EV_IRQHandler+0x82c>
        else if (hi2c->EventCount == 1U)
 8004406:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004408:	2a01      	cmp	r2, #1
 800440a:	d01b      	beq.n	8004444 <HAL_I2C_EV_IRQHandler+0xa9c>
        else if (hi2c->EventCount == 2U)
 800440c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800440e:	2a02      	cmp	r2, #2
 8004410:	f47f aaf8 	bne.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004414:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004418:	2a22      	cmp	r2, #34	; 0x22
 800441a:	d00d      	beq.n	8004438 <HAL_I2C_EV_IRQHandler+0xa90>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800441c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004420:	2a21      	cmp	r2, #33	; 0x21
 8004422:	f47f aaef 	bne.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8004426:	f7ff bbf2 	b.w	8003c0e <HAL_I2C_EV_IRQHandler+0x266>
 800442a:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800442c:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 800442e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004430:	3302      	adds	r3, #2
 8004432:	6523      	str	r3, [r4, #80]	; 0x50
 8004434:	f7ff bae6 	b.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	f7ff bae0 	b.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004444:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 800444a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800444c:	3301      	adds	r3, #1
 800444e:	6523      	str	r3, [r4, #80]	; 0x50
 8004450:	f7ff bad8 	b.w	8003a04 <HAL_I2C_EV_IRQHandler+0x5c>
 8004454:	80008081 	.word	0x80008081
 8004458:	00010014 	.word	0x00010014

0800445c <HAL_I2C_ER_IRQHandler>:
{
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800445e:	6803      	ldr	r3, [r0, #0]
{
 8004460:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004462:	695d      	ldr	r5, [r3, #20]
 8004464:	461a      	mov	r2, r3
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004466:	05e8      	lsls	r0, r5, #23
 8004468:	f3c5 2640 	ubfx	r6, r5, #9, #1
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800446c:	6859      	ldr	r1, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800446e:	d572      	bpl.n	8004556 <HAL_I2C_ER_IRQHandler+0xfa>
 8004470:	0a08      	lsrs	r0, r1, #8
 8004472:	07c7      	lsls	r7, r0, #31
 8004474:	d56f      	bpl.n	8004556 <HAL_I2C_ER_IRQHandler+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004476:	f46f 7180 	mvn.w	r1, #256	; 0x100
 800447a:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004482:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004484:	2e00      	cmp	r6, #0
 8004486:	d175      	bne.n	8004574 <HAL_I2C_ER_IRQHandler+0x118>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004488:	056e      	lsls	r6, r5, #21
 800448a:	f140 80c2 	bpl.w	8004612 <HAL_I2C_ER_IRQHandler+0x1b6>
    error |= HAL_I2C_ERROR_BERR;
 800448e:	2601      	movs	r6, #1
    tmp1 = hi2c->Mode;
 8004490:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8004494:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8004496:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800449a:	2820      	cmp	r0, #32
    tmp2 = hi2c->XferCount;
 800449c:	b292      	uxth	r2, r2
    tmp3 = hi2c->State;
 800449e:	b2c9      	uxtb	r1, r1
    tmp4 = hi2c->PreviousState;
 80044a0:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80044a2:	f000 8098 	beq.w	80045d6 <HAL_I2C_ER_IRQHandler+0x17a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044aa:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80044ac:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
      error |= HAL_I2C_ERROR_AF;
 80044b0:	f046 0604 	orr.w	r6, r6, #4
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80044b4:	2a10      	cmp	r2, #16
 80044b6:	d103      	bne.n	80044c0 <HAL_I2C_ER_IRQHandler+0x64>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	461a      	mov	r2, r3
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044c2:	052b      	lsls	r3, r5, #20
 80044c4:	d504      	bpl.n	80044d0 <HAL_I2C_ER_IRQHandler+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044c6:	f46f 6300 	mvn.w	r3, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 80044ca:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044ce:	6153      	str	r3, [r2, #20]
    hi2c->ErrorCode |= error;
 80044d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044d2:	431e      	orrs	r6, r3
 80044d4:	6426      	str	r6, [r4, #64]	; 0x40
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044da:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044de:	b2db      	uxtb	r3, r3
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044e0:	2910      	cmp	r1, #16
 80044e2:	d06e      	beq.n	80045c2 <HAL_I2C_ER_IRQHandler+0x166>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044e4:	f003 0128 	and.w	r1, r3, #40	; 0x28
 80044e8:	2928      	cmp	r1, #40	; 0x28
 80044ea:	d065      	beq.n	80045b8 <HAL_I2C_ER_IRQHandler+0x15c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80044ec:	6851      	ldr	r1, [r2, #4]
 80044ee:	050e      	lsls	r6, r1, #20
 80044f0:	d404      	bmi.n	80044fc <HAL_I2C_ER_IRQHandler+0xa0>
 80044f2:	2b60      	cmp	r3, #96	; 0x60
 80044f4:	d002      	beq.n	80044fc <HAL_I2C_ER_IRQHandler+0xa0>
      hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	2320      	movs	r3, #32
 80044f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004500:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004504:	6853      	ldr	r3, [r2, #4]
 8004506:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800450a:	d044      	beq.n	8004596 <HAL_I2C_ER_IRQHandler+0x13a>
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800450c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800450e:	6853      	ldr	r3, [r2, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004510:	f891 0021 	ldrb.w	r0, [r1, #33]	; 0x21
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004518:	2801      	cmp	r0, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800451a:	6053      	str	r3, [r2, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800451c:	f000 8096 	beq.w	800464c <HAL_I2C_ER_IRQHandler+0x1f0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004520:	4b7c      	ldr	r3, [pc, #496]	; (8004714 <HAL_I2C_ER_IRQHandler+0x2b8>)
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004522:	4608      	mov	r0, r1
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004524:	634b      	str	r3, [r1, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004526:	f7fe f889 	bl	800263c <HAL_DMA_Abort_IT>
 800452a:	b150      	cbz	r0, 8004542 <HAL_I2C_ER_IRQHandler+0xe6>
        hi2c->State = HAL_I2C_STATE_READY;
 800452c:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 800452e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004530:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8004532:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004534:	6b41      	ldr	r1, [r0, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800453c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004540:	4788      	blx	r1
  CurrentState = hi2c->State;
 8004542:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004546:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8004548:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800454a:	0752      	lsls	r2, r2, #29
 800454c:	d502      	bpl.n	8004554 <HAL_I2C_ER_IRQHandler+0xf8>
 800454e:	2b28      	cmp	r3, #40	; 0x28
 8004550:	f000 809b 	beq.w	800468a <HAL_I2C_ER_IRQHandler+0x22e>
}
 8004554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004556:	b116      	cbz	r6, 800455e <HAL_I2C_ER_IRQHandler+0x102>
 8004558:	0a08      	lsrs	r0, r1, #8
 800455a:	07c6      	lsls	r6, r0, #31
 800455c:	d419      	bmi.n	8004592 <HAL_I2C_ER_IRQHandler+0x136>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800455e:	f3c5 2680 	ubfx	r6, r5, #10, #1
 8004562:	b11e      	cbz	r6, 800456c <HAL_I2C_ER_IRQHandler+0x110>
 8004564:	05c8      	lsls	r0, r1, #23
 8004566:	d5f5      	bpl.n	8004554 <HAL_I2C_ER_IRQHandler+0xf8>
 8004568:	2600      	movs	r6, #0
 800456a:	e791      	b.n	8004490 <HAL_I2C_ER_IRQHandler+0x34>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800456c:	0528      	lsls	r0, r5, #20
 800456e:	d5f1      	bpl.n	8004554 <HAL_I2C_ER_IRQHandler+0xf8>
 8004570:	0a08      	lsrs	r0, r1, #8
 8004572:	e007      	b.n	8004584 <HAL_I2C_ER_IRQHandler+0x128>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004574:	2603      	movs	r6, #3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004576:	f46f 7100 	mvn.w	r1, #512	; 0x200
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800457a:	056f      	lsls	r7, r5, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800457c:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800457e:	d487      	bmi.n	8004490 <HAL_I2C_ER_IRQHandler+0x34>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004580:	0529      	lsls	r1, r5, #20
 8004582:	d504      	bpl.n	800458e <HAL_I2C_ER_IRQHandler+0x132>
 8004584:	07c3      	lsls	r3, r0, #31
 8004586:	d49e      	bmi.n	80044c6 <HAL_I2C_ER_IRQHandler+0x6a>
  if (error != HAL_I2C_ERROR_NONE)
 8004588:	2e00      	cmp	r6, #0
 800458a:	d0e3      	beq.n	8004554 <HAL_I2C_ER_IRQHandler+0xf8>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	e79e      	b.n	80044d0 <HAL_I2C_ER_IRQHandler+0x74>
 8004592:	2602      	movs	r6, #2
 8004594:	e7ef      	b.n	8004576 <HAL_I2C_ER_IRQHandler+0x11a>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004596:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800459a:	2960      	cmp	r1, #96	; 0x60
 800459c:	d040      	beq.n	8004620 <HAL_I2C_ER_IRQHandler+0x1c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800459e:	6953      	ldr	r3, [r2, #20]
 80045a0:	0659      	lsls	r1, r3, #25
 80045a2:	d505      	bpl.n	80045b0 <HAL_I2C_ER_IRQHandler+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045a6:	6912      	ldr	r2, [r2, #16]
 80045a8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80045aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045ac:	3301      	adds	r3, #1
 80045ae:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80045b0:	4620      	mov	r0, r4
 80045b2:	f003 fbc9 	bl	8007d48 <HAL_I2C_ErrorCallback>
 80045b6:	e7c4      	b.n	8004542 <HAL_I2C_ER_IRQHandler+0xe6>
    hi2c->PreviousState = I2C_STATE_NONE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045bc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 80045c0:	e7a0      	b.n	8004504 <HAL_I2C_ER_IRQHandler+0xa8>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045c2:	2b22      	cmp	r3, #34	; 0x22
 80045c4:	d18e      	bne.n	80044e4 <HAL_I2C_ER_IRQHandler+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045cc:	6013      	str	r3, [r2, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045ce:	6853      	ldr	r3, [r2, #4]
 80045d0:	051f      	lsls	r7, r3, #20
 80045d2:	d590      	bpl.n	80044f6 <HAL_I2C_ER_IRQHandler+0x9a>
 80045d4:	e792      	b.n	80044fc <HAL_I2C_ER_IRQHandler+0xa0>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80045d6:	2a00      	cmp	r2, #0
 80045d8:	f47f af65 	bne.w	80044a6 <HAL_I2C_ER_IRQHandler+0x4a>
 80045dc:	f001 02f7 	and.w	r2, r1, #247	; 0xf7
 80045e0:	2a21      	cmp	r2, #33	; 0x21
 80045e2:	d005      	beq.n	80045f0 <HAL_I2C_ER_IRQHandler+0x194>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80045e4:	2928      	cmp	r1, #40	; 0x28
 80045e6:	f47f af5e 	bne.w	80044a6 <HAL_I2C_ER_IRQHandler+0x4a>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80045ea:	2f21      	cmp	r7, #33	; 0x21
 80045ec:	f47f af5b 	bne.w	80044a6 <HAL_I2C_ER_IRQHandler+0x4a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045f0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045f6:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80045f8:	2908      	cmp	r1, #8
 80045fa:	d058      	beq.n	80046ae <HAL_I2C_ER_IRQHandler+0x252>
 80045fc:	2920      	cmp	r1, #32
 80045fe:	d056      	beq.n	80046ae <HAL_I2C_ER_IRQHandler+0x252>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004600:	2a21      	cmp	r2, #33	; 0x21
 8004602:	d06d      	beq.n	80046e0 <HAL_I2C_ER_IRQHandler+0x284>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004604:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004608:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800460a:	052f      	lsls	r7, r5, #20
 800460c:	d5bc      	bpl.n	8004588 <HAL_I2C_ER_IRQHandler+0x12c>
 800460e:	6822      	ldr	r2, [r4, #0]
 8004610:	e759      	b.n	80044c6 <HAL_I2C_ER_IRQHandler+0x6a>
 8004612:	0529      	lsls	r1, r5, #20
    error |= HAL_I2C_ERROR_BERR;
 8004614:	f04f 0601 	mov.w	r6, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004618:	f53f af55 	bmi.w	80044c6 <HAL_I2C_ER_IRQHandler+0x6a>
 800461c:	461a      	mov	r2, r3
 800461e:	e757      	b.n	80044d0 <HAL_I2C_ER_IRQHandler+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 8004620:	2120      	movs	r1, #32
 8004622:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004626:	6423      	str	r3, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004628:	6953      	ldr	r3, [r2, #20]
 800462a:	0658      	lsls	r0, r3, #25
 800462c:	d506      	bpl.n	800463c <HAL_I2C_ER_IRQHandler+0x1e0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462e:	6912      	ldr	r2, [r2, #16]
 8004630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004632:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800463c:	6813      	ldr	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800463e:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004646:	f7ff f96f 	bl	8003928 <HAL_I2C_AbortCpltCallback>
 800464a:	e77a      	b.n	8004542 <HAL_I2C_ER_IRQHandler+0xe6>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800464c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800464e:	4a31      	ldr	r2, [pc, #196]	; (8004714 <HAL_I2C_ER_IRQHandler+0x2b8>)
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004650:	4618      	mov	r0, r3
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004652:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004654:	f7fd fff2 	bl	800263c <HAL_DMA_Abort_IT>
 8004658:	2800      	cmp	r0, #0
 800465a:	f43f af72 	beq.w	8004542 <HAL_I2C_ER_IRQHandler+0xe6>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	0655      	lsls	r5, r2, #25
 8004664:	d506      	bpl.n	8004674 <HAL_I2C_ER_IRQHandler+0x218>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800466a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800466c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	3201      	adds	r2, #1
 8004672:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8004674:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8004676:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004678:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004680:	6b43      	ldr	r3, [r0, #52]	; 0x34
        hi2c->State = HAL_I2C_STATE_READY;
 8004682:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004686:	4798      	blx	r3
 8004688:	e75b      	b.n	8004542 <HAL_I2C_ER_IRQHandler+0xe6>
    hi2c->PreviousState = I2C_STATE_NONE;
 800468a:	2200      	movs	r2, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 800468c:	2520      	movs	r5, #32
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800468e:	6821      	ldr	r1, [r4, #0]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004690:	4e21      	ldr	r6, [pc, #132]	; (8004718 <HAL_I2C_ER_IRQHandler+0x2bc>)
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004692:	684b      	ldr	r3, [r1, #4]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004694:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004696:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800469a:	604b      	str	r3, [r1, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800469c:	62e6      	str	r6, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800469e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046a0:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046a4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80046a8:	f7ff f938 	bl	800391c <HAL_I2C_ListenCpltCallback>
}
 80046ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046ae:	2a28      	cmp	r2, #40	; 0x28
 80046b0:	d1a6      	bne.n	8004600 <HAL_I2C_ER_IRQHandler+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b2:	f46f 6780 	mvn.w	r7, #1024	; 0x400
    hi2c->PreviousState = I2C_STATE_NONE;
 80046b6:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80046b8:	2020      	movs	r0, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ba:	4a17      	ldr	r2, [pc, #92]	; (8004718 <HAL_I2C_ER_IRQHandler+0x2bc>)
 80046bc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046c4:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c6:	615f      	str	r7, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	403a      	ands	r2, r7
 80046cc:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80046ce:	6321      	str	r1, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046d0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    HAL_I2C_ListenCpltCallback(hi2c);
 80046d4:	4620      	mov	r0, r4
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046d6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80046da:	f7ff f91f 	bl	800391c <HAL_I2C_ListenCpltCallback>
 80046de:	e794      	b.n	800460a <HAL_I2C_ER_IRQHandler+0x1ae>
    hi2c->State         = HAL_I2C_STATE_READY;
 80046e0:	2720      	movs	r7, #32
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046e2:	2000      	movs	r0, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046e8:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8004718 <HAL_I2C_ER_IRQHandler+0x2bc>
 80046ec:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046f0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046f2:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046f6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046fa:	685a      	ldr	r2, [r3, #4]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046fc:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004702:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004704:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	400a      	ands	r2, r1
 800470a:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800470c:	f7ff f900 	bl	8003910 <HAL_I2C_SlaveTxCpltCallback>
 8004710:	e77b      	b.n	800460a <HAL_I2C_ER_IRQHandler+0x1ae>
 8004712:	bf00      	nop
 8004714:	0800392d 	.word	0x0800392d
 8004718:	ffff0000 	.word	0xffff0000

0800471c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800471c:	2800      	cmp	r0, #0
 800471e:	f000 8155 	beq.w	80049cc <HAL_RCC_OscConfig+0x2b0>
{
 8004722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004726:	6803      	ldr	r3, [r0, #0]
{
 8004728:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472a:	07dd      	lsls	r5, r3, #31
 800472c:	4604      	mov	r4, r0
 800472e:	d535      	bpl.n	800479c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004730:	49a8      	ldr	r1, [pc, #672]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 8004732:	684a      	ldr	r2, [r1, #4]
 8004734:	f002 020c 	and.w	r2, r2, #12
 8004738:	2a04      	cmp	r2, #4
 800473a:	f000 8105 	beq.w	8004948 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800473e:	684a      	ldr	r2, [r1, #4]
 8004740:	f002 020c 	and.w	r2, r2, #12
 8004744:	2a08      	cmp	r2, #8
 8004746:	f000 80fb 	beq.w	8004940 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474a:	6863      	ldr	r3, [r4, #4]
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004750:	d010      	beq.n	8004774 <HAL_RCC_OscConfig+0x58>
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 8120 	beq.w	8004998 <HAL_RCC_OscConfig+0x27c>
 8004758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800475c:	f000 8178 	beq.w	8004a50 <HAL_RCC_OscConfig+0x334>
 8004760:	4b9c      	ldr	r3, [pc, #624]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e004      	b.n	800477e <HAL_RCC_OscConfig+0x62>
 8004774:	4a97      	ldr	r2, [pc, #604]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fd faef 	bl	8001d60 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004782:	4d94      	ldr	r5, [pc, #592]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8004784:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004786:	e005      	b.n	8004794 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004788:	f7fd faea 	bl	8001d60 <HAL_GetTick>
 800478c:	1b80      	subs	r0, r0, r6
 800478e:	2864      	cmp	r0, #100	; 0x64
 8004790:	f200 80f5 	bhi.w	800497e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	039a      	lsls	r2, r3, #14
 8004798:	d5f6      	bpl.n	8004788 <HAL_RCC_OscConfig+0x6c>
 800479a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479c:	079f      	lsls	r7, r3, #30
 800479e:	d44d      	bmi.n	800483c <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a0:	071a      	lsls	r2, r3, #28
 80047a2:	d522      	bpl.n	80047ea <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047a4:	69a3      	ldr	r3, [r4, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80ba 	beq.w	8004920 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ac:	2201      	movs	r2, #1
 80047ae:	4b8a      	ldr	r3, [pc, #552]	; (80049d8 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b0:	4d88      	ldr	r5, [pc, #544]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 80047b2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80047b4:	f7fd fad4 	bl	8001d60 <HAL_GetTick>
 80047b8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ba:	e005      	b.n	80047c8 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047bc:	f7fd fad0 	bl	8001d60 <HAL_GetTick>
 80047c0:	1b80      	subs	r0, r0, r6
 80047c2:	2802      	cmp	r0, #2
 80047c4:	f200 80db 	bhi.w	800497e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047ca:	079b      	lsls	r3, r3, #30
 80047cc:	d5f6      	bpl.n	80047bc <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047ce:	4b83      	ldr	r3, [pc, #524]	; (80049dc <HAL_RCC_OscConfig+0x2c0>)
 80047d0:	4a83      	ldr	r2, [pc, #524]	; (80049e0 <HAL_RCC_OscConfig+0x2c4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	0a5b      	lsrs	r3, r3, #9
 80047da:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80047dc:	bf00      	nop
  }
  while (Delay --);
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	1e5a      	subs	r2, r3, #1
 80047e2:	9201      	str	r2, [sp, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f9      	bne.n	80047dc <HAL_RCC_OscConfig+0xc0>
 80047e8:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ea:	075d      	lsls	r5, r3, #29
 80047ec:	d569      	bpl.n	80048c2 <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ee:	4b79      	ldr	r3, [pc, #484]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	00d0      	lsls	r0, r2, #3
 80047f4:	f100 80ec 	bmi.w	80049d0 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 80047f8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004800:	61da      	str	r2, [r3, #28]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	4b75      	ldr	r3, [pc, #468]	; (80049e4 <HAL_RCC_OscConfig+0x2c8>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	05d1      	lsls	r1, r2, #23
 8004812:	f140 80a3 	bpl.w	800495c <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004816:	68e3      	ldr	r3, [r4, #12]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d037      	beq.n	800488c <HAL_RCC_OscConfig+0x170>
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80e7 	beq.w	80049f0 <HAL_RCC_OscConfig+0x2d4>
 8004822:	2b05      	cmp	r3, #5
 8004824:	4b6b      	ldr	r3, [pc, #428]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 8004826:	6a1a      	ldr	r2, [r3, #32]
 8004828:	f000 811f 	beq.w	8004a6a <HAL_RCC_OscConfig+0x34e>
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	621a      	str	r2, [r3, #32]
 8004832:	6a1a      	ldr	r2, [r3, #32]
 8004834:	f022 0204 	bic.w	r2, r2, #4
 8004838:	621a      	str	r2, [r3, #32]
 800483a:	e02c      	b.n	8004896 <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800483c:	4a65      	ldr	r2, [pc, #404]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 800483e:	6851      	ldr	r1, [r2, #4]
 8004840:	f011 0f0c 	tst.w	r1, #12
 8004844:	d061      	beq.n	800490a <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004846:	6851      	ldr	r1, [r2, #4]
 8004848:	f001 010c 	and.w	r1, r1, #12
 800484c:	2908      	cmp	r1, #8
 800484e:	d059      	beq.n	8004904 <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004850:	6923      	ldr	r3, [r4, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80eb 	beq.w	8004a2e <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8004858:	2201      	movs	r2, #1
 800485a:	4b63      	ldr	r3, [pc, #396]	; (80049e8 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485c:	4d5d      	ldr	r5, [pc, #372]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 800485e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004860:	f7fd fa7e 	bl	8001d60 <HAL_GetTick>
 8004864:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	e005      	b.n	8004874 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004868:	f7fd fa7a 	bl	8001d60 <HAL_GetTick>
 800486c:	1b80      	subs	r0, r0, r6
 800486e:	2802      	cmp	r0, #2
 8004870:	f200 8085 	bhi.w	800497e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	0798      	lsls	r0, r3, #30
 8004878:	d5f6      	bpl.n	8004868 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487a:	682b      	ldr	r3, [r5, #0]
 800487c:	6962      	ldr	r2, [r4, #20]
 800487e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004882:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004886:	602b      	str	r3, [r5, #0]
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	e789      	b.n	80047a0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800488c:	4a51      	ldr	r2, [pc, #324]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 800488e:	6a13      	ldr	r3, [r2, #32]
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8004896:	f7fd fa63 	bl	8001d60 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489a:	4e4e      	ldr	r6, [pc, #312]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 800489c:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489e:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a2:	e005      	b.n	80048b0 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7fd fa5c 	bl	8001d60 <HAL_GetTick>
 80048a8:	eba0 0008 	sub.w	r0, r0, r8
 80048ac:	42b8      	cmp	r0, r7
 80048ae:	d866      	bhi.n	800497e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b0:	6a33      	ldr	r3, [r6, #32]
 80048b2:	079b      	lsls	r3, r3, #30
 80048b4:	d5f6      	bpl.n	80048a4 <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 80048b6:	b125      	cbz	r5, 80048c2 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b8:	4a46      	ldr	r2, [pc, #280]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80048ba:	69d3      	ldr	r3, [r2, #28]
 80048bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c0:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c2:	69e0      	ldr	r0, [r4, #28]
 80048c4:	b1d0      	cbz	r0, 80048fc <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048c6:	4d43      	ldr	r5, [pc, #268]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80048c8:	686a      	ldr	r2, [r5, #4]
 80048ca:	f002 020c 	and.w	r2, r2, #12
 80048ce:	2a08      	cmp	r2, #8
 80048d0:	f000 80d3 	beq.w	8004a7a <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80048d6:	f04f 0100 	mov.w	r1, #0
 80048da:	4a44      	ldr	r2, [pc, #272]	; (80049ec <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048dc:	f000 80de 	beq.w	8004a9c <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 80048e0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80048e2:	f7fd fa3d 	bl	8001d60 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80048e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ea:	e004      	b.n	80048f6 <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fd fa38 	bl	8001d60 <HAL_GetTick>
 80048f0:	1b40      	subs	r0, r0, r5
 80048f2:	2802      	cmp	r0, #2
 80048f4:	d843      	bhi.n	800497e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	019b      	lsls	r3, r3, #6
 80048fa:	d4f7      	bmi.n	80048ec <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 80048fc:	2000      	movs	r0, #0
}
 80048fe:	b002      	add	sp, #8
 8004900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004904:	6852      	ldr	r2, [r2, #4]
 8004906:	03d6      	lsls	r6, r2, #15
 8004908:	d4a2      	bmi.n	8004850 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490a:	4a32      	ldr	r2, [pc, #200]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	0795      	lsls	r5, r2, #30
 8004910:	d539      	bpl.n	8004986 <HAL_RCC_OscConfig+0x26a>
 8004912:	6922      	ldr	r2, [r4, #16]
 8004914:	2a01      	cmp	r2, #1
 8004916:	d036      	beq.n	8004986 <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 8004918:	2001      	movs	r0, #1
}
 800491a:	b002      	add	sp, #8
 800491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004920:	4a2d      	ldr	r2, [pc, #180]	; (80049d8 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004922:	4d2c      	ldr	r5, [pc, #176]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 8004924:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004926:	f7fd fa1b 	bl	8001d60 <HAL_GetTick>
 800492a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492c:	e004      	b.n	8004938 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492e:	f7fd fa17 	bl	8001d60 <HAL_GetTick>
 8004932:	1b80      	subs	r0, r0, r6
 8004934:	2802      	cmp	r0, #2
 8004936:	d822      	bhi.n	800497e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004938:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800493a:	079f      	lsls	r7, r3, #30
 800493c:	d4f7      	bmi.n	800492e <HAL_RCC_OscConfig+0x212>
 800493e:	e753      	b.n	80047e8 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004940:	684a      	ldr	r2, [r1, #4]
 8004942:	03d0      	lsls	r0, r2, #15
 8004944:	f57f af01 	bpl.w	800474a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004948:	4a22      	ldr	r2, [pc, #136]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	0391      	lsls	r1, r2, #14
 800494e:	f57f af25 	bpl.w	800479c <HAL_RCC_OscConfig+0x80>
 8004952:	6862      	ldr	r2, [r4, #4]
 8004954:	2a00      	cmp	r2, #0
 8004956:	f47f af21 	bne.w	800479c <HAL_RCC_OscConfig+0x80>
 800495a:	e7dd      	b.n	8004918 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495e:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004964:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004966:	f7fd f9fb 	bl	8001d60 <HAL_GetTick>
 800496a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	6833      	ldr	r3, [r6, #0]
 800496e:	05da      	lsls	r2, r3, #23
 8004970:	f53f af51 	bmi.w	8004816 <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004974:	f7fd f9f4 	bl	8001d60 <HAL_GetTick>
 8004978:	1bc0      	subs	r0, r0, r7
 800497a:	2864      	cmp	r0, #100	; 0x64
 800497c:	d9f6      	bls.n	800496c <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 800497e:	2003      	movs	r0, #3
}
 8004980:	b002      	add	sp, #8
 8004982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004986:	4913      	ldr	r1, [pc, #76]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 8004988:	6960      	ldr	r0, [r4, #20]
 800498a:	680a      	ldr	r2, [r1, #0]
 800498c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004990:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004994:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004996:	e703      	b.n	80047a0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800499c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80049a0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80049b2:	f7fd f9d5 	bl	8001d60 <HAL_GetTick>
 80049b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b8:	e004      	b.n	80049c4 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ba:	f7fd f9d1 	bl	8001d60 <HAL_GetTick>
 80049be:	1b80      	subs	r0, r0, r6
 80049c0:	2864      	cmp	r0, #100	; 0x64
 80049c2:	d8dc      	bhi.n	800497e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	039b      	lsls	r3, r3, #14
 80049c8:	d4f7      	bmi.n	80049ba <HAL_RCC_OscConfig+0x29e>
 80049ca:	e6e6      	b.n	800479a <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 80049cc:	2001      	movs	r0, #1
}
 80049ce:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80049d0:	2500      	movs	r5, #0
 80049d2:	e71b      	b.n	800480c <HAL_RCC_OscConfig+0xf0>
 80049d4:	40021000 	.word	0x40021000
 80049d8:	42420480 	.word	0x42420480
 80049dc:	20000000 	.word	0x20000000
 80049e0:	10624dd3 	.word	0x10624dd3
 80049e4:	40007000 	.word	0x40007000
 80049e8:	42420000 	.word	0x42420000
 80049ec:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049f4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80049f8:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fa:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	621a      	str	r2, [r3, #32]
 8004a02:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a04:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a08:	f022 0204 	bic.w	r2, r2, #4
 8004a0c:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8004a0e:	f7fd f9a7 	bl	8001d60 <HAL_GetTick>
 8004a12:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a14:	e004      	b.n	8004a20 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fd f9a3 	bl	8001d60 <HAL_GetTick>
 8004a1a:	1bc0      	subs	r0, r0, r7
 8004a1c:	4540      	cmp	r0, r8
 8004a1e:	d8ae      	bhi.n	800497e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a20:	6a33      	ldr	r3, [r6, #32]
 8004a22:	0798      	lsls	r0, r3, #30
 8004a24:	d4f7      	bmi.n	8004a16 <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	f43f af4b 	beq.w	80048c2 <HAL_RCC_OscConfig+0x1a6>
 8004a2c:	e744      	b.n	80048b8 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 8004a2e:	4a34      	ldr	r2, [pc, #208]	; (8004b00 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a30:	4d34      	ldr	r5, [pc, #208]	; (8004b04 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 8004a32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a34:	f7fd f994 	bl	8001d60 <HAL_GetTick>
 8004a38:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3a:	e004      	b.n	8004a46 <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fd f990 	bl	8001d60 <HAL_GetTick>
 8004a40:	1b80      	subs	r0, r0, r6
 8004a42:	2802      	cmp	r0, #2
 8004a44:	d89b      	bhi.n	800497e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a46:	682b      	ldr	r3, [r5, #0]
 8004a48:	0799      	lsls	r1, r3, #30
 8004a4a:	d4f7      	bmi.n	8004a3c <HAL_RCC_OscConfig+0x320>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	e6a7      	b.n	80047a0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a54:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e689      	b.n	800477e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a6a:	f042 0204 	orr.w	r2, r2, #4
 8004a6e:	621a      	str	r2, [r3, #32]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	621a      	str	r2, [r3, #32]
 8004a78:	e70d      	b.n	8004896 <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a7a:	2801      	cmp	r0, #1
 8004a7c:	f43f af4d 	beq.w	800491a <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8004a80:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a82:	6a22      	ldr	r2, [r4, #32]
 8004a84:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004a88:	4291      	cmp	r1, r2
 8004a8a:	f47f af45 	bne.w	8004918 <HAL_RCC_OscConfig+0x1fc>
 8004a8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8004a94:	1a18      	subs	r0, r3, r0
 8004a96:	bf18      	it	ne
 8004a98:	2001      	movne	r0, #1
 8004a9a:	e73e      	b.n	800491a <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 8004a9c:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8004a9e:	f7fd f95f 	bl	8001d60 <HAL_GetTick>
 8004aa2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa4:	e005      	b.n	8004ab2 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa6:	f7fd f95b 	bl	8001d60 <HAL_GetTick>
 8004aaa:	1b80      	subs	r0, r0, r6
 8004aac:	2802      	cmp	r0, #2
 8004aae:	f63f af66 	bhi.w	800497e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	0199      	lsls	r1, r3, #6
 8004ab6:	d4f6      	bmi.n	8004aa6 <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ab8:	6a22      	ldr	r2, [r4, #32]
 8004aba:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004abe:	d105      	bne.n	8004acc <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ac0:	686b      	ldr	r3, [r5, #4]
 8004ac2:	68a1      	ldr	r1, [r4, #8]
 8004ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004acc:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <HAL_RCC_OscConfig+0x3e8>)
 8004ad0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ad2:	6859      	ldr	r1, [r3, #4]
 8004ad4:	4302      	orrs	r2, r0
 8004ad6:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8004ada:	480b      	ldr	r0, [pc, #44]	; (8004b08 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004adc:	430a      	orrs	r2, r1
 8004ade:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8004ae0:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ae2:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8004ae4:	f7fd f93c 	bl	8001d60 <HAL_GetTick>
 8004ae8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aea:	e005      	b.n	8004af8 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fd f938 	bl	8001d60 <HAL_GetTick>
 8004af0:	1b40      	subs	r0, r0, r5
 8004af2:	2802      	cmp	r0, #2
 8004af4:	f63f af43 	bhi.w	800497e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	019a      	lsls	r2, r3, #6
 8004afc:	d5f6      	bpl.n	8004aec <HAL_RCC_OscConfig+0x3d0>
 8004afe:	e6fd      	b.n	80048fc <HAL_RCC_OscConfig+0x1e0>
 8004b00:	42420000 	.word	0x42420000
 8004b04:	40021000 	.word	0x40021000
 8004b08:	42420060 	.word	0x42420060

08004b0c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004b0c:	b178      	cbz	r0, 8004b2e <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b0e:	4a61      	ldr	r2, [pc, #388]	; (8004c94 <HAL_RCC_ClockConfig+0x188>)
 8004b10:	6813      	ldr	r3, [r2, #0]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	428b      	cmp	r3, r1
 8004b18:	d20b      	bcs.n	8004b32 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1a:	6813      	ldr	r3, [r2, #0]
 8004b1c:	f023 0307 	bic.w	r3, r3, #7
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	428b      	cmp	r3, r1
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8004b2e:	2001      	movs	r0, #1
}
 8004b30:	4770      	bx	lr
{
 8004b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b36:	6803      	ldr	r3, [r0, #0]
{
 8004b38:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b3a:	079d      	lsls	r5, r3, #30
 8004b3c:	d514      	bpl.n	8004b68 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3e:	075c      	lsls	r4, r3, #29
 8004b40:	d504      	bpl.n	8004b4c <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b42:	4c55      	ldr	r4, [pc, #340]	; (8004c98 <HAL_RCC_ClockConfig+0x18c>)
 8004b44:	6862      	ldr	r2, [r4, #4]
 8004b46:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004b4a:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4c:	071a      	lsls	r2, r3, #28
 8004b4e:	d504      	bpl.n	8004b5a <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b50:	4c51      	ldr	r4, [pc, #324]	; (8004c98 <HAL_RCC_ClockConfig+0x18c>)
 8004b52:	6862      	ldr	r2, [r4, #4]
 8004b54:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004b58:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b5a:	4c4f      	ldr	r4, [pc, #316]	; (8004c98 <HAL_RCC_ClockConfig+0x18c>)
 8004b5c:	6885      	ldr	r5, [r0, #8]
 8004b5e:	6862      	ldr	r2, [r4, #4]
 8004b60:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004b64:	432a      	orrs	r2, r5
 8004b66:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b68:	07db      	lsls	r3, r3, #31
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	460d      	mov	r5, r1
 8004b6e:	d521      	bpl.n	8004bb4 <HAL_RCC_ClockConfig+0xa8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b70:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b72:	4b49      	ldr	r3, [pc, #292]	; (8004c98 <HAL_RCC_ClockConfig+0x18c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b74:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b76:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b78:	d067      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x13e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b7a:	2a02      	cmp	r2, #2
 8004b7c:	f000 8081 	beq.w	8004c82 <HAL_RCC_ClockConfig+0x176>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b80:	0798      	lsls	r0, r3, #30
 8004b82:	d527      	bpl.n	8004bd4 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b84:	4e44      	ldr	r6, [pc, #272]	; (8004c98 <HAL_RCC_ClockConfig+0x18c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b86:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b8a:	6873      	ldr	r3, [r6, #4]
 8004b8c:	f023 0303 	bic.w	r3, r3, #3
 8004b90:	4313      	orrs	r3, r2
 8004b92:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004b94:	f7fd f8e4 	bl	8001d60 <HAL_GetTick>
 8004b98:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9a:	e004      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f7fd f8e0 	bl	8001d60 <HAL_GetTick>
 8004ba0:	1bc0      	subs	r0, r0, r7
 8004ba2:	4540      	cmp	r0, r8
 8004ba4:	d86b      	bhi.n	8004c7e <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba6:	6873      	ldr	r3, [r6, #4]
 8004ba8:	6862      	ldr	r2, [r4, #4]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004bb2:	d1f3      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x90>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb4:	4a37      	ldr	r2, [pc, #220]	; (8004c94 <HAL_RCC_ClockConfig+0x188>)
 8004bb6:	6813      	ldr	r3, [r2, #0]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	d90d      	bls.n	8004bdc <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc0:	6813      	ldr	r3, [r2, #0]
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	432b      	orrs	r3, r5
 8004bc8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	6813      	ldr	r3, [r2, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	42ab      	cmp	r3, r5
 8004bd2:	d003      	beq.n	8004bdc <HAL_RCC_ClockConfig+0xd0>
    return HAL_ERROR;
 8004bd4:	2001      	movs	r0, #1
}
 8004bd6:	b006      	add	sp, #24
 8004bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	0759      	lsls	r1, r3, #29
 8004be0:	d506      	bpl.n	8004bf0 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be2:	492d      	ldr	r1, [pc, #180]	; (8004c98 <HAL_RCC_ClockConfig+0x18c>)
 8004be4:	68e0      	ldr	r0, [r4, #12]
 8004be6:	684a      	ldr	r2, [r1, #4]
 8004be8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bec:	4302      	orrs	r2, r0
 8004bee:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf0:	071a      	lsls	r2, r3, #28
 8004bf2:	d507      	bpl.n	8004c04 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bf4:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <HAL_RCC_ClockConfig+0x18c>)
 8004bf6:	6921      	ldr	r1, [r4, #16]
 8004bf8:	6853      	ldr	r3, [r2, #4]
 8004bfa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004bfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c02:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c04:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c08:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <HAL_RCC_ClockConfig+0x190>)
 8004c0a:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c0c:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c12:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8004c16:	4920      	ldr	r1, [pc, #128]	; (8004c98 <HAL_RCC_ClockConfig+0x18c>)
 8004c18:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004c1a:	f002 030c 	and.w	r3, r2, #12
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d016      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x144>
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d016      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x148>
      sysclockfreq = HSI_VALUE;
 8004c26:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c28:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_RCC_ClockConfig+0x18c>)
 8004c2a:	481e      	ldr	r0, [pc, #120]	; (8004ca4 <HAL_RCC_ClockConfig+0x198>)
 8004c2c:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8004c2e:	491e      	ldr	r1, [pc, #120]	; (8004ca8 <HAL_RCC_ClockConfig+0x19c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c30:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004c34:	5c80      	ldrb	r0, [r0, r2]
 8004c36:	4a1d      	ldr	r2, [pc, #116]	; (8004cac <HAL_RCC_ClockConfig+0x1a0>)
 8004c38:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8004c3a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c3c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8004c3e:	f7fd f84d 	bl	8001cdc <HAL_InitTick>
  return HAL_OK;
 8004c42:	2000      	movs	r0, #0
}
 8004c44:	b006      	add	sp, #24
 8004c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4a:	039f      	lsls	r7, r3, #14
 8004c4c:	d49a      	bmi.n	8004b84 <HAL_RCC_ClockConfig+0x78>
 8004c4e:	e7c1      	b.n	8004bd4 <HAL_RCC_ClockConfig+0xc8>
      sysclockfreq = HSE_VALUE;
 8004c50:	4b17      	ldr	r3, [pc, #92]	; (8004cb0 <HAL_RCC_ClockConfig+0x1a4>)
 8004c52:	e7e9      	b.n	8004c28 <HAL_RCC_ClockConfig+0x11c>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c54:	a806      	add	r0, sp, #24
 8004c56:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8004c5a:	4403      	add	r3, r0
 8004c5c:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c60:	03d3      	lsls	r3, r2, #15
 8004c62:	d512      	bpl.n	8004c8a <HAL_RCC_ClockConfig+0x17e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c64:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c66:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <HAL_RCC_ClockConfig+0x1a4>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c68:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c6c:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c70:	a906      	add	r1, sp, #24
 8004c72:	440a      	add	r2, r1
 8004c74:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c7c:	e7d4      	b.n	8004c28 <HAL_RCC_ClockConfig+0x11c>
        return HAL_TIMEOUT;
 8004c7e:	2003      	movs	r0, #3
 8004c80:	e7a9      	b.n	8004bd6 <HAL_RCC_ClockConfig+0xca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c82:	019e      	lsls	r6, r3, #6
 8004c84:	f53f af7e 	bmi.w	8004b84 <HAL_RCC_ClockConfig+0x78>
 8004c88:	e7a4      	b.n	8004bd4 <HAL_RCC_ClockConfig+0xc8>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <HAL_RCC_ClockConfig+0x1a8>)
 8004c8c:	fb03 f300 	mul.w	r3, r3, r0
 8004c90:	e7ca      	b.n	8004c28 <HAL_RCC_ClockConfig+0x11c>
 8004c92:	bf00      	nop
 8004c94:	40022000 	.word	0x40022000
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	0800c388 	.word	0x0800c388
 8004ca0:	007a1200 	.word	0x007a1200
 8004ca4:	0800c410 	.word	0x0800c410
 8004ca8:	20000008 	.word	0x20000008
 8004cac:	20000000 	.word	0x20000000
 8004cb0:	017d7840 	.word	0x017d7840
 8004cb4:	003d0900 	.word	0x003d0900

08004cb8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <HAL_RCC_GetPCLK1Freq+0x14>)
 8004cba:	4905      	ldr	r1, [pc, #20]	; (8004cd0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8004cbe:	4a05      	ldr	r2, [pc, #20]	; (8004cd4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cc0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004cc4:	5ccb      	ldrb	r3, [r1, r3]
 8004cc6:	6810      	ldr	r0, [r2, #0]
}
 8004cc8:	40d8      	lsrs	r0, r3
 8004cca:	4770      	bx	lr
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	0800c420 	.word	0x0800c420
 8004cd4:	20000000 	.word	0x20000000

08004cd8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <HAL_RCC_GetPCLK2Freq+0x14>)
 8004cda:	4905      	ldr	r1, [pc, #20]	; (8004cf0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8004cde:	4a05      	ldr	r2, [pc, #20]	; (8004cf4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ce0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004ce4:	5ccb      	ldrb	r3, [r1, r3]
 8004ce6:	6810      	ldr	r0, [r2, #0]
}
 8004ce8:	40d8      	lsrs	r0, r3
 8004cea:	4770      	bx	lr
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	0800c420 	.word	0x0800c420
 8004cf4:	20000000 	.word	0x20000000

08004cf8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d036      	beq.n	8004d6a <HAL_TIM_Base_Init+0x72>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8004d00:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d06:	4604      	mov	r4, r0
 8004d08:	b30b      	cbz	r3, 8004d4e <HAL_TIM_Base_Init+0x56>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0a:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d0e:	4e20      	ldr	r6, [pc, #128]	; (8004d90 <HAL_TIM_Base_Init+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d14:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8004d16:	6813      	ldr	r3, [r2, #0]
 8004d18:	69a5      	ldr	r5, [r4, #24]
 8004d1a:	68e0      	ldr	r0, [r4, #12]
 8004d1c:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d1e:	d026      	beq.n	8004d6e <HAL_TIM_Base_Init+0x76>
 8004d20:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004d24:	d018      	beq.n	8004d58 <HAL_TIM_Base_Init+0x60>
 8004d26:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8004d2a:	42b2      	cmp	r2, r6
 8004d2c:	d014      	beq.n	8004d58 <HAL_TIM_Base_Init+0x60>
 8004d2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d32:	42b2      	cmp	r2, r6
 8004d34:	d010      	beq.n	8004d58 <HAL_TIM_Base_Init+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d3a:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8004d3c:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d3e:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d40:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d42:	2301      	movs	r3, #1
  return HAL_OK;
 8004d44:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004d46:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004d4c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d4e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d52:	f7fc fd2d 	bl	80017b0 <HAL_TIM_Base_MspInit>
 8004d56:	e7d8      	b.n	8004d0a <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8004d58:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d5e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d60:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d66:	4333      	orrs	r3, r6
 8004d68:	e7e5      	b.n	8004d36 <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 8004d6a:	2001      	movs	r0, #1
}
 8004d6c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004d6e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d74:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d76:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d7c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d82:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004d84:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d86:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d88:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004d8a:	6963      	ldr	r3, [r4, #20]
 8004d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d8e:	e7d8      	b.n	8004d42 <HAL_TIM_Base_Init+0x4a>
 8004d90:	40012c00 	.word	0x40012c00

08004d94 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d96:	6801      	ldr	r1, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d9c:	688a      	ldr	r2, [r1, #8]
{
 8004d9e:	4603      	mov	r3, r0
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da4:	2a06      	cmp	r2, #6
 8004da6:	d003      	beq.n	8004db0 <HAL_TIM_Base_Start+0x1c>
    __HAL_TIM_ENABLE(htim);
 8004da8:	680a      	ldr	r2, [r1, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	600a      	str	r2, [r1, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	2201      	movs	r2, #1
}
 8004db2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop

08004dbc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004dbc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d05a      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc4:	2202      	movs	r2, #2
{
 8004dc6:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8004dc8:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8004dca:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004dd0:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004dd2:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004dd8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004ddc:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8004dde:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8004de2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004de4:	d074      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0x114>
 8004de6:	d94a      	bls.n	8004e7e <HAL_TIM_ConfigClockSource+0xc2>
 8004de8:	2c60      	cmp	r4, #96	; 0x60
 8004dea:	d02d      	beq.n	8004e48 <HAL_TIM_ConfigClockSource+0x8c>
 8004dec:	d956      	bls.n	8004e9c <HAL_TIM_ConfigClockSource+0xe0>
 8004dee:	2c70      	cmp	r4, #112	; 0x70
 8004df0:	d01a      	beq.n	8004e28 <HAL_TIM_ConfigClockSource+0x6c>
 8004df2:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8004df6:	d10e      	bne.n	8004e16 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df8:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8004dfc:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004dfe:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e00:	432a      	orrs	r2, r5
 8004e02:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e06:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e0a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e14:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 8004e1a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8004e1c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8004e24:	4618      	mov	r0, r3
}
 8004e26:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e28:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8004e2c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004e2e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e30:	432a      	orrs	r2, r5
 8004e32:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e36:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e3a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004e3c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004e3e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e40:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004e44:	609a      	str	r2, [r3, #8]
      break;
 8004e46:	e7e6      	b.n	8004e16 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e48:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e4a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e50:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e52:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e54:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004e56:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e58:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e60:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e64:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004e68:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e6a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004e6c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e72:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	e7cd      	b.n	8004e16 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004e7a:	2002      	movs	r0, #2
}
 8004e7c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004e7e:	2c10      	cmp	r4, #16
 8004e80:	d004      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0xd0>
 8004e82:	d93d      	bls.n	8004f00 <HAL_TIM_ConfigClockSource+0x144>
 8004e84:	2c20      	cmp	r4, #32
 8004e86:	d001      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0xd0>
 8004e88:	2c30      	cmp	r4, #48	; 0x30
 8004e8a:	d1c4      	bne.n	8004e16 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8004e8c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e8e:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e96:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8004e98:	609c      	str	r4, [r3, #8]
 8004e9a:	e7bc      	b.n	8004e16 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004e9c:	2c50      	cmp	r4, #80	; 0x50
 8004e9e:	d1ba      	bne.n	8004e16 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8004ea0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea4:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea6:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eac:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eae:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eb8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004ebc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8004ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004ec2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ec4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004ecc:	609a      	str	r2, [r3, #8]
 8004ece:	e7a2      	b.n	8004e16 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8004ed0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed4:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed6:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eda:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004edc:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ede:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ee0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ee4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ee8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004eec:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8004eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004ef2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ef4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ef8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004efc:	609a      	str	r2, [r3, #8]
 8004efe:	e78a      	b.n	8004e16 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004f00:	2c00      	cmp	r4, #0
 8004f02:	d0c3      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0xd0>
 8004f04:	e787      	b.n	8004e16 <HAL_TIM_ConfigClockSource+0x5a>
 8004f06:	bf00      	nop

08004f08 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f08:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004f0c:	2a01      	cmp	r2, #1
 8004f0e:	d01a      	beq.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	2202      	movs	r2, #2
{
 8004f12:	b4f0      	push	{r4, r5, r6, r7}
 8004f14:	4603      	mov	r3, r0
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004f16:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	2601      	movs	r6, #1
  tmpcr2 = htim->Instance->CR2;
 8004f1a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004f20:	6860      	ldr	r0, [r4, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f22:	e9d1 2700 	ldrd	r2, r7, [r1]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f26:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f2a:	4311      	orrs	r1, r2
  tmpsmcr = htim->Instance->SMCR;
 8004f2c:	68a2      	ldr	r2, [r4, #8]

  return HAL_OK;
 8004f2e:	4628      	mov	r0, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f34:	433a      	orrs	r2, r7
  htim->Instance->CR2 = tmpcr2;
 8004f36:	6061      	str	r1, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8004f38:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004f3a:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004f3e:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 8004f42:	bcf0      	pop	{r4, r5, r6, r7}
 8004f44:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004f46:	2002      	movs	r0, #2
}
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop

08004f4c <HAL_HalfDuplex_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d062      	beq.n	8005016 <HAL_HalfDuplex_Init+0xca>
{
 8004f50:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f52:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004f56:	4604      	mov	r4, r0
 8004f58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d055      	beq.n	800500c <HAL_HalfDuplex_Init+0xc0>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f60:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f62:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004f64:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004f68:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f6a:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8004f6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f70:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f72:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f74:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f76:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004f7a:	4301      	orrs	r1, r0
 8004f7c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004f7e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f80:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004f84:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f88:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004f8a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f8e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004f90:	430a      	orrs	r2, r1
 8004f92:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	69a0      	ldr	r0, [r4, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004f98:	4921      	ldr	r1, [pc, #132]	; (8005020 <HAL_HalfDuplex_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f9e:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8004fa0:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fa2:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004fa4:	d039      	beq.n	800501a <HAL_HalfDuplex_Init+0xce>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fa6:	f7ff fe87 	bl	8004cb8 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004faa:	6862      	ldr	r2, [r4, #4]
 8004fac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004fb0:	0092      	lsls	r2, r2, #2
 8004fb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004fb6:	fbb0 f0f2 	udiv	r0, r0, r2
 8004fba:	2264      	movs	r2, #100	; 0x64
 8004fbc:	4d19      	ldr	r5, [pc, #100]	; (8005024 <HAL_HalfDuplex_Init+0xd8>)
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	fba5 c100 	umull	ip, r1, r5, r0
 8004fc4:	0949      	lsrs	r1, r1, #5
 8004fc6:	fb02 0211 	mls	r2, r2, r1, r0
 8004fca:	0112      	lsls	r2, r2, #4
 8004fcc:	3232      	adds	r2, #50	; 0x32
 8004fce:	fba5 0202 	umull	r0, r2, r5, r2
 8004fd2:	0109      	lsls	r1, r1, #4
 8004fd4:	eb01 1252 	add.w	r2, r1, r2, lsr #5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd8:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004fda:	2120      	movs	r1, #32
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fdc:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fde:	691a      	ldr	r2, [r3, #16]
  return HAL_OK;
 8004fe0:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004fee:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	f042 0208 	orr.w	r2, r2, #8
 8004ff6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ffe:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005002:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005006:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800500a:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800500c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005010:	f7fc fbfe 	bl	8001810 <HAL_UART_MspInit>
 8005014:	e7a4      	b.n	8004f60 <HAL_HalfDuplex_Init+0x14>
    return HAL_ERROR;
 8005016:	2001      	movs	r0, #1
}
 8005018:	4770      	bx	lr
    pclk = HAL_RCC_GetPCLK2Freq();
 800501a:	f7ff fe5d 	bl	8004cd8 <HAL_RCC_GetPCLK2Freq>
 800501e:	e7c4      	b.n	8004faa <HAL_HalfDuplex_Init+0x5e>
 8005020:	40013800 	.word	0x40013800
 8005024:	51eb851f 	.word	0x51eb851f

08005028 <HAL_UART_Transmit_DMA>:
{
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800502a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800502e:	2b20      	cmp	r3, #32
 8005030:	d12a      	bne.n	8005088 <HAL_UART_Transmit_DMA+0x60>
    if ((pData == NULL) || (Size == 0U))
 8005032:	b359      	cbz	r1, 800508c <HAL_UART_Transmit_DMA+0x64>
 8005034:	b352      	cbz	r2, 800508c <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 8005036:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800503a:	2b01      	cmp	r3, #1
 800503c:	d024      	beq.n	8005088 <HAL_UART_Transmit_DMA+0x60>
 800503e:	4604      	mov	r4, r0
 8005040:	4613      	mov	r3, r2
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005042:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005044:	2221      	movs	r2, #33	; 0x21
    __HAL_LOCK(huart);
 8005046:	2701      	movs	r7, #1
    huart->TxXferCount = Size;
 8005048:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800504a:	4d11      	ldr	r5, [pc, #68]	; (8005090 <HAL_UART_Transmit_DMA+0x68>)
 800504c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504e:	63e6      	str	r6, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005050:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005054:	4a0f      	ldr	r2, [pc, #60]	; (8005094 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize = Size;
 8005056:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8005058:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 800505a:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800505e:	6285      	str	r5, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005060:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005062:	4d0d      	ldr	r5, [pc, #52]	; (8005098 <HAL_UART_Transmit_DMA+0x70>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005064:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8005066:	6346      	str	r6, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005068:	6305      	str	r5, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800506a:	3204      	adds	r2, #4
 800506c:	f7fd faa2 	bl	80025b4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005070:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005074:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8005076:	4630      	mov	r0, r6
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005078:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800507a:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 800507c:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005080:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005084:	615a      	str	r2, [r3, #20]
}
 8005086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005088:	2002      	movs	r0, #2
}
 800508a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800508c:	2001      	movs	r0, #1
}
 800508e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005090:	0800509d 	.word	0x0800509d
 8005094:	080050cd 	.word	0x080050cd
 8005098:	0800514d 	.word	0x0800514d

0800509c <UART_DMATransmitCplt>:
{
 800509c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800509e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f013 0320 	ands.w	r3, r3, #32
 80050a8:	d10a      	bne.n	80050c0 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050aa:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 80050ac:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050ae:	6953      	ldr	r3, [r2, #20]
 80050b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b4:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050b6:	68d3      	ldr	r3, [r2, #12]
 80050b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050bc:	60d3      	str	r3, [r2, #12]
}
 80050be:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80050c0:	f002 fc4e 	bl	8007960 <HAL_UART_TxCpltCallback>
}
 80050c4:	bd08      	pop	{r3, pc}
 80050c6:	bf00      	nop

080050c8 <HAL_UART_TxHalfCpltCallback>:
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop

080050cc <UART_DMATxHalfCplt>:
{
 80050cc:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80050ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80050d0:	f7ff fffa 	bl	80050c8 <HAL_UART_TxHalfCpltCallback>
}
 80050d4:	bd08      	pop	{r3, pc}
 80050d6:	bf00      	nop

080050d8 <HAL_UART_RxCpltCallback>:
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop

080050dc <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80050dc:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80050de:	6884      	ldr	r4, [r0, #8]
 80050e0:	6901      	ldr	r1, [r0, #16]
 80050e2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80050e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80050e8:	6802      	ldr	r2, [r0, #0]
 80050ea:	d020      	beq.n	800512e <UART_Receive_IT.part.1+0x52>
 80050ec:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050ee:	6852      	ldr	r2, [r2, #4]
 80050f0:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80050f2:	b9c9      	cbnz	r1, 8005128 <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050f4:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80050f6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80050fe:	b98b      	cbnz	r3, 8005124 <UART_Receive_IT.part.1+0x48>
      huart->RxState = HAL_UART_STATE_READY;
 8005100:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005102:	6802      	ldr	r2, [r0, #0]
 8005104:	68d1      	ldr	r1, [r2, #12]
 8005106:	f021 0120 	bic.w	r1, r1, #32
 800510a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800510c:	68d1      	ldr	r1, [r2, #12]
 800510e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005112:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005114:	6951      	ldr	r1, [r2, #20]
 8005116:	f021 0101 	bic.w	r1, r1, #1
 800511a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800511c:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005120:	f7ff ffda 	bl	80050d8 <HAL_UART_RxCpltCallback>
}
 8005124:	2000      	movs	r0, #0
 8005126:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005128:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800512c:	e7e2      	b.n	80050f4 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800512e:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005130:	b929      	cbnz	r1, 800513e <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005132:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005136:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 800513a:	6283      	str	r3, [r0, #40]	; 0x28
 800513c:	e7db      	b.n	80050f6 <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8005144:	6283      	str	r3, [r0, #40]	; 0x28
 8005146:	e7d6      	b.n	80050f6 <UART_Receive_IT.part.1+0x1a>

08005148 <HAL_UART_ErrorCallback>:
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop

0800514c <UART_DMAError>:
{
 800514c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800514e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005154:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8005158:	2921      	cmp	r1, #33	; 0x21
 800515a:	d01c      	beq.n	8005196 <UART_DMAError+0x4a>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800515c:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800515e:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8005162:	2922      	cmp	r1, #34	; 0x22
 8005164:	d007      	beq.n	8005176 <UART_DMAError+0x2a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8005168:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800516a:	f042 0210 	orr.w	r2, r2, #16
 800516e:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8005170:	f7ff ffea 	bl	8005148 <HAL_UART_ErrorCallback>
}
 8005174:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005176:	0641      	lsls	r1, r0, #25
 8005178:	d5f5      	bpl.n	8005166 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800517a:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 800517c:	2020      	movs	r0, #32
    huart->RxXferCount = 0x00U;
 800517e:	85d9      	strh	r1, [r3, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005180:	68d1      	ldr	r1, [r2, #12]
 8005182:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8005186:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005188:	6951      	ldr	r1, [r2, #20]
 800518a:	f021 0101 	bic.w	r1, r1, #1
 800518e:	6151      	str	r1, [r2, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8005190:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
 8005194:	e7e7      	b.n	8005166 <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005196:	0600      	lsls	r0, r0, #24
 8005198:	d5e0      	bpl.n	800515c <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800519a:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800519c:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 800519e:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80051a0:	68d1      	ldr	r1, [r2, #12]
 80051a2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80051a6:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80051a8:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
 80051ac:	e7d6      	b.n	800515c <UART_DMAError+0x10>
 80051ae:	bf00      	nop

080051b0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051b0:	6803      	ldr	r3, [r0, #0]
{
 80051b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051b4:	681a      	ldr	r2, [r3, #0]
{
 80051b6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80051b8:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051ba:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051bc:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 80051be:	d04a      	beq.n	8005256 <HAL_UART_IRQHandler+0xa6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051c0:	f011 0101 	ands.w	r1, r1, #1
 80051c4:	d050      	beq.n	8005268 <HAL_UART_IRQHandler+0xb8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051c6:	07d6      	lsls	r6, r2, #31
 80051c8:	d505      	bpl.n	80051d6 <HAL_UART_IRQHandler+0x26>
 80051ca:	05e8      	lsls	r0, r5, #23
 80051cc:	d503      	bpl.n	80051d6 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80051d0:	f040 0001 	orr.w	r0, r0, #1
 80051d4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051d6:	0756      	lsls	r6, r2, #29
 80051d8:	f002 0002 	and.w	r0, r2, #2
 80051dc:	d576      	bpl.n	80052cc <HAL_UART_IRQHandler+0x11c>
 80051de:	b161      	cbz	r1, 80051fa <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80051e2:	f002 0608 	and.w	r6, r2, #8
 80051e6:	f041 0102 	orr.w	r1, r1, #2
 80051ea:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d172      	bne.n	80052d6 <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051f0:	b11e      	cbz	r6, 80051fa <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051f2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80051f4:	f041 0108 	orr.w	r1, r1, #8
 80051f8:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051fa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80051fc:	2900      	cmp	r1, #0
 80051fe:	d032      	beq.n	8005266 <HAL_UART_IRQHandler+0xb6>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005200:	0696      	lsls	r6, r2, #26
 8005202:	d501      	bpl.n	8005208 <HAL_UART_IRQHandler+0x58>
 8005204:	06a8      	lsls	r0, r5, #26
 8005206:	d474      	bmi.n	80052f2 <HAL_UART_IRQHandler+0x142>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005208:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800520a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800520c:	0709      	lsls	r1, r1, #28
 800520e:	d402      	bmi.n	8005216 <HAL_UART_IRQHandler+0x66>
 8005210:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005214:	d07a      	beq.n	800530c <HAL_UART_IRQHandler+0x15c>
  huart->RxState = HAL_UART_STATE_READY;
 8005216:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800521e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005220:	695a      	ldr	r2, [r3, #20]
 8005222:	f022 0201 	bic.w	r2, r2, #1
 8005226:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8005228:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522c:	695a      	ldr	r2, [r3, #20]
 800522e:	0652      	lsls	r2, r2, #25
 8005230:	d55b      	bpl.n	80052ea <HAL_UART_IRQHandler+0x13a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005232:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005234:	6b61      	ldr	r1, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800523c:	2900      	cmp	r1, #0
 800523e:	d054      	beq.n	80052ea <HAL_UART_IRQHandler+0x13a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005240:	4b3b      	ldr	r3, [pc, #236]	; (8005330 <HAL_UART_IRQHandler+0x180>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005242:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005244:	634b      	str	r3, [r1, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005246:	f7fd f9f9 	bl	800263c <HAL_DMA_Abort_IT>
 800524a:	b160      	cbz	r0, 8005266 <HAL_UART_IRQHandler+0xb6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800524c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800524e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005252:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005254:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005256:	0696      	lsls	r6, r2, #26
 8005258:	d509      	bpl.n	800526e <HAL_UART_IRQHandler+0xbe>
 800525a:	06a9      	lsls	r1, r5, #26
 800525c:	d507      	bpl.n	800526e <HAL_UART_IRQHandler+0xbe>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800525e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005262:	2b22      	cmp	r3, #34	; 0x22
 8005264:	d04e      	beq.n	8005304 <HAL_UART_IRQHandler+0x154>
}
 8005266:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005268:	f415 7f90 	tst.w	r5, #288	; 0x120
 800526c:	d1ab      	bne.n	80051c6 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800526e:	0616      	lsls	r6, r2, #24
 8005270:	d40e      	bmi.n	8005290 <HAL_UART_IRQHandler+0xe0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005272:	0651      	lsls	r1, r2, #25
 8005274:	d5f7      	bpl.n	8005266 <HAL_UART_IRQHandler+0xb6>
 8005276:	066a      	lsls	r2, r5, #25
 8005278:	d5f5      	bpl.n	8005266 <HAL_UART_IRQHandler+0xb6>
  huart->gState = HAL_UART_STATE_READY;
 800527a:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800527c:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800527e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005284:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005286:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800528a:	f002 fb69 	bl	8007960 <HAL_UART_TxCpltCallback>
}
 800528e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005290:	0628      	lsls	r0, r5, #24
 8005292:	d5ee      	bpl.n	8005272 <HAL_UART_IRQHandler+0xc2>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005294:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005298:	2a21      	cmp	r2, #33	; 0x21
 800529a:	d1e4      	bne.n	8005266 <HAL_UART_IRQHandler+0xb6>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800529c:	68a1      	ldr	r1, [r4, #8]
 800529e:	6a22      	ldr	r2, [r4, #32]
 80052a0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80052a4:	d037      	beq.n	8005316 <HAL_UART_IRQHandler+0x166>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052a6:	1c51      	adds	r1, r2, #1
 80052a8:	6221      	str	r1, [r4, #32]
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80052ae:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80052b0:	3a01      	subs	r2, #1
 80052b2:	b292      	uxth	r2, r2
 80052b4:	84e2      	strh	r2, [r4, #38]	; 0x26
 80052b6:	2a00      	cmp	r2, #0
 80052b8:	d1d5      	bne.n	8005266 <HAL_UART_IRQHandler+0xb6>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052c0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052c8:	60da      	str	r2, [r3, #12]
}
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052cc:	b140      	cbz	r0, 80052e0 <HAL_UART_IRQHandler+0x130>
 80052ce:	2900      	cmp	r1, #0
 80052d0:	d093      	beq.n	80051fa <HAL_UART_IRQHandler+0x4a>
 80052d2:	f002 0608 	and.w	r6, r2, #8
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80052d8:	f041 0104 	orr.w	r1, r1, #4
 80052dc:	63e1      	str	r1, [r4, #60]	; 0x3c
 80052de:	e787      	b.n	80051f0 <HAL_UART_IRQHandler+0x40>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052e0:	0710      	lsls	r0, r2, #28
 80052e2:	d58a      	bpl.n	80051fa <HAL_UART_IRQHandler+0x4a>
 80052e4:	2900      	cmp	r1, #0
 80052e6:	d184      	bne.n	80051f2 <HAL_UART_IRQHandler+0x42>
 80052e8:	e787      	b.n	80051fa <HAL_UART_IRQHandler+0x4a>
            HAL_UART_ErrorCallback(huart);
 80052ea:	4620      	mov	r0, r4
 80052ec:	f7ff ff2c 	bl	8005148 <HAL_UART_ErrorCallback>
}
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f2:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 80052f6:	2a22      	cmp	r2, #34	; 0x22
 80052f8:	d186      	bne.n	8005208 <HAL_UART_IRQHandler+0x58>
 80052fa:	4620      	mov	r0, r4
 80052fc:	f7ff feee 	bl	80050dc <UART_Receive_IT.part.1>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	e781      	b.n	8005208 <HAL_UART_IRQHandler+0x58>
}
 8005304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005308:	f7ff bee8 	b.w	80050dc <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 800530c:	4620      	mov	r0, r4
 800530e:	f7ff ff1b 	bl	8005148 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005312:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8005314:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005316:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005318:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800531a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800531e:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005320:	b910      	cbnz	r0, 8005328 <HAL_UART_IRQHandler+0x178>
        huart->pTxBuffPtr += 2U;
 8005322:	3202      	adds	r2, #2
 8005324:	6222      	str	r2, [r4, #32]
 8005326:	e7c2      	b.n	80052ae <HAL_UART_IRQHandler+0xfe>
        huart->pTxBuffPtr += 1U;
 8005328:	3201      	adds	r2, #1
 800532a:	6222      	str	r2, [r4, #32]
 800532c:	e7bf      	b.n	80052ae <HAL_UART_IRQHandler+0xfe>
 800532e:	bf00      	nop
 8005330:	08005335 	.word	0x08005335

08005334 <UART_DMAAbortOnError>:
  huart->RxXferCount = 0x00U;
 8005334:	2200      	movs	r2, #0
{
 8005336:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005338:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800533a:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 800533c:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 800533e:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005340:	f7ff ff02 	bl	8005148 <HAL_UART_ErrorCallback>
}
 8005344:	bd08      	pop	{r3, pc}
 8005346:	bf00      	nop

08005348 <_DMax_InitData>:
 *  SYSRANGE_MAX_CONVERGENCE_TIME
 *  SYSRANGE_RANGE_CHECK_ENABLES    mask RANGE_CHECK_RANGE_ENABLE_MASK
 *  range 0xb8-0xbb (0xbb)
 */
static int _DMax_InitData(VL6180xDev_t dev)
{
 8005348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800534c:	b084      	sub	sp, #16

	warning = 0;

	LOG_FUNCTION_START("");
	do {
		status = VL6180x_RdByte(dev, 0x02A, &u8);
 800534e:	f10d 0206 	add.w	r2, sp, #6
 8005352:	212a      	movs	r1, #42	; 0x2a
{
 8005354:	4604      	mov	r4, r0
		status = VL6180x_RdByte(dev, 0x02A, &u8);
 8005356:	f001 f917 	bl	8006588 <VL6180x_RdByte>
		if (status) {
 800535a:	b970      	cbnz	r0, 800537a <_DMax_InitData+0x32>
		    VL6180x_ErrLog("Reg 0x02A rd fail");
		    break;
		}

		if (u8 == 0) {
 800535c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005360:	b173      	cbz	r3, 8005380 <_DMax_InitData+0x38>
 8005362:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8005366:	fb05 f503 	mul.w	r5, r5, r3
	warning = 0;
 800536a:	4606      	mov	r6, r0
		    warning = CALIBRATION_WARNING;
		    u8 = 40; /* use a default average value */
		}
		Reg2A_KCps = Fix7_2_KCPs(u8); /* convert to KCPs */

		status = VL6180x_RdByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, &SysRangeCheckEn);
 800536c:	aa02      	add	r2, sp, #8
 800536e:	212d      	movs	r1, #45	; 0x2d
 8005370:	4620      	mov	r0, r4
 8005372:	09ed      	lsrs	r5, r5, #7
 8005374:	f001 f908 	bl	8006588 <VL6180x_RdByte>
		if (status) {
 8005378:	b178      	cbz	r0, 800539a <_DMax_InitData+0x52>
	} while (0);
	if (!status)
		status = warning;
	LOG_FUNCTION_END(status);
	return status;
}
 800537a:	b004      	add	sp, #16
 800537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    u8 = 40; /* use a default average value */
 8005380:	2328      	movs	r3, #40	; 0x28
		status = VL6180x_RdByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, &SysRangeCheckEn);
 8005382:	aa02      	add	r2, sp, #8
 8005384:	212d      	movs	r1, #45	; 0x2d
 8005386:	4620      	mov	r0, r4
		    u8 = 40; /* use a default average value */
 8005388:	f44f 759c 	mov.w	r5, #312	; 0x138
		    warning = CALIBRATION_WARNING;
 800538c:	2601      	movs	r6, #1
		    u8 = 40; /* use a default average value */
 800538e:	f88d 3006 	strb.w	r3, [sp, #6]
		status = VL6180x_RdByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, &SysRangeCheckEn);
 8005392:	f001 f8f9 	bl	8006588 <VL6180x_RdByte>
		if (status) {
 8005396:	2800      	cmp	r0, #0
 8005398:	d1ef      	bne.n	800537a <_DMax_InitData+0x32>
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &MaxConvTime);
 800539a:	f10d 0207 	add.w	r2, sp, #7
 800539e:	211c      	movs	r1, #28
 80053a0:	4620      	mov	r0, r4
 80053a2:	f001 f8f1 	bl	8006588 <VL6180x_RdByte>
		if (status) {
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d1e7      	bne.n	800537a <_DMax_InitData+0x32>
		status = VL6180x_RdDWord(dev, 0x0B8, &RegB8);
 80053aa:	aa03      	add	r2, sp, #12
 80053ac:	21b8      	movs	r1, #184	; 0xb8
 80053ae:	4620      	mov	r0, r4
 80053b0:	f001 f92a 	bl	8006608 <VL6180x_RdDWord>
		if (status) {
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d1e0      	bne.n	800537a <_DMax_InitData+0x32>
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_AMBIENT_LEVEL_MULT, &snrLimit);
 80053b8:	f10d 0209 	add.w	r2, sp, #9
 80053bc:	212c      	movs	r1, #44	; 0x2c
 80053be:	4620      	mov	r0, r4
 80053c0:	f001 f8e2 	bl	8006588 <VL6180x_RdByte>
		if (status) {
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d1d8      	bne.n	800537a <_DMax_InitData+0x32>
		_DMaxData(snrLimit_K) = (int32_t)16 * 1000 / snrLimit;
 80053c8:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80053cc:	4f35      	ldr	r7, [pc, #212]	; (80054a4 <_DMax_InitData+0x15c>)
 80053ce:	f89d 2009 	ldrb.w	r2, [sp, #9]
		XTalkCompRate_KCps =   VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 80053d2:	f8d7 8004 	ldr.w	r8, [r7, #4]
		_DMaxData(snrLimit_K) = (int32_t)16 * 1000 / snrLimit;
 80053d6:	fb91 f1f2 	sdiv	r1, r1, r2
		if (Reg2A_KCps >= XTalkCompRate_KCps) {
 80053da:	45a8      	cmp	r8, r5
 80053dc:	bf88      	it	hi
 80053de:	2500      	movhi	r5, #0
		if (SysRangeCheckEn&RANGE_CHECK_RANGE_ENABLE_MASK) {
 80053e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
		_DMaxData(snrLimit_K) = (int32_t)16 * 1000 / snrLimit;
 80053e4:	e9c7 512e 	strd	r5, r1, [r7, #184]	; 0xb8
		if (SysRangeCheckEn&RANGE_CHECK_RANGE_ENABLE_MASK) {
 80053e8:	f013 0302 	ands.w	r3, r3, #2
 80053ec:	d13d      	bne.n	800546a <_DMax_InitData+0x122>
		minSignalNeeded = (RegB8 * 256) / ((int32_t)MaxConvTime + (int32_t)MaxConvTimeAdjust);
 80053ee:	9803      	ldr	r0, [sp, #12]
 80053f0:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80053f4:	0200      	lsls	r0, r0, #8
 80053f6:	3c04      	subs	r4, #4
 80053f8:	fbb0 f0f4 	udiv	r0, r0, r4
		if (minSignalNeeded  <= (int32_t)RangeIgnoreThreshold - (int32_t)XTalkCompRate_KCps)
 80053fc:	eba3 0308 	sub.w	r3, r3, r8
		u32 = (minSignalNeeded*(uint32_t)snrLimit) / 16;
 8005400:	4283      	cmp	r3, r0
 8005402:	bfb8      	it	lt
 8005404:	4603      	movlt	r3, r0
 8005406:	fb02 f303 	mul.w	r3, r2, r3
	if (rate > 0) {
 800540a:	091b      	lsrs	r3, r3, #4
	ambTuningWindowFactor_K = _DMaxData(ambTuningWindowFactor_K);
 800540c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
	if (rate > 0) {
 8005410:	d044      	beq.n	800549c <_DMax_InitData+0x154>
		DMaxSq = 400 * 400 * 1000 / rate - (400 * 400 / 330);
 8005412:	4a25      	ldr	r2, [pc, #148]	; (80054a8 <_DMax_InitData+0x160>)
 8005414:	fb92 f3f3 	sdiv	r3, r2, r3
 8005418:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
		if (DMaxSq <= 0) {
 800541c:	2b00      	cmp	r3, #0
 800541e:	dd3b      	ble.n	8005498 <_DMax_InitData+0x150>
		    if (DMaxSq < (2 << 12)) {
 8005420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005424:	4401      	add	r1, r0
				DMaxSq = DMaxSq * retSignalAt400mm /
 8005426:	bfb5      	itete	lt
 8005428:	435d      	mullt	r5, r3
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 800542a:	fbb3 f3f1 	udivge	r3, r3, r1
				DMaxSq = DMaxSq * retSignalAt400mm /
 800542e:	fbb5 f5f1 	udivlt	r5, r5, r1
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 8005432:	435d      	mulge	r5, r3
	while (bit > num)
 8005434:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
		    RawDMax = VL6180x_SqrtUint32(DMaxSq);
 8005438:	4628      	mov	r0, r5
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 800543a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	while (bit > num)
 800543e:	d203      	bcs.n	8005448 <_DMax_InitData+0x100>
		bit >>= 2;
 8005440:	089b      	lsrs	r3, r3, #2
	while (bit > num)
 8005442:	429d      	cmp	r5, r3
 8005444:	d3fc      	bcc.n	8005440 <_DMax_InitData+0xf8>
	while (bit != 0) {
 8005446:	b153      	cbz	r3, 800545e <_DMax_InitData+0x116>
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 8005448:	2200      	movs	r2, #0
		if (num >= res + bit) {
 800544a:	1899      	adds	r1, r3, r2
 800544c:	4281      	cmp	r1, r0
 800544e:	ea4f 0252 	mov.w	r2, r2, lsr #1
		    num -= res + bit;
 8005452:	bf9c      	itt	ls
 8005454:	1a40      	subls	r0, r0, r1
		    res = (res >> 1) + bit;
 8005456:	18d2      	addls	r2, r2, r3
	while (bit != 0) {
 8005458:	089b      	lsrs	r3, r3, #2
 800545a:	d1f6      	bne.n	800544a <_DMax_InitData+0x102>
 800545c:	b293      	uxth	r3, r2
		_DMaxData(ClipSnrLimit) = _DMax_RawValueAtRateKCps(dev, u32);
 800545e:	4630      	mov	r0, r6
 8005460:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
}
 8005464:	b004      	add	sp, #16
 8005466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    status = VL6180x_RdWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &u16);
 800546a:	4620      	mov	r0, r4
 800546c:	f10d 020a 	add.w	r2, sp, #10
 8005470:	2126      	movs	r1, #38	; 0x26
 8005472:	f001 f8a7 	bl	80065c4 <VL6180x_RdWord>
		    if (status) {
 8005476:	2800      	cmp	r0, #0
 8005478:	f47f af7f 	bne.w	800537a <_DMax_InitData+0x32>
		    RangeIgnoreThreshold = Fix7_2_KCPs(u16);
 800547c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005480:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8005484:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8005488:	fb03 f301 	mul.w	r3, r3, r1
 800548c:	f8d7 50b8 	ldr.w	r5, [r7, #184]	; 0xb8
 8005490:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8005494:	09db      	lsrs	r3, r3, #7
 8005496:	e7aa      	b.n	80053ee <_DMax_InitData+0xa6>
		if (DMaxSq <= 0) {
 8005498:	2300      	movs	r3, #0
 800549a:	e7e0      	b.n	800545e <_DMax_InitData+0x116>
	if (rate > 0) {
 800549c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054a0:	e7dd      	b.n	800545e <_DMax_InitData+0x116>
 80054a2:	bf00      	nop
 80054a4:	2000000c 	.word	0x2000000c
 80054a8:	09896800 	.word	0x09896800

080054ac <VL6180x_RangeSetMaxConvergenceTime.part.6>:
int VL6180x_RangeSetMaxConvergenceTime(VL6180xDev_t dev, uint8_t  MaxConTime_msec)
 80054ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t ece_factor_m          = VL6180xDevDataGet(dev, EceFactorM);
 80054b0:	4b2a      	ldr	r3, [pc, #168]	; (800555c <VL6180x_RangeSetMaxConvergenceTime.part.6+0xb0>)
int VL6180x_RangeSetMaxConvergenceTime(VL6180xDev_t dev, uint8_t  MaxConTime_msec)
 80054b2:	b082      	sub	sp, #8
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 80054b4:	f10d 0203 	add.w	r2, sp, #3
 80054b8:	211c      	movs	r1, #28
	uint32_t ece_factor_m          = VL6180xDevDataGet(dev, EceFactorM);
 80054ba:	891e      	ldrh	r6, [r3, #8]
	uint32_t ece_factor_d          = VL6180xDevDataGet(dev, EceFactorD);
 80054bc:	895d      	ldrh	r5, [r3, #10]
int VL6180x_RangeSetMaxConvergenceTime(VL6180xDev_t dev, uint8_t  MaxConTime_msec)
 80054be:	4604      	mov	r4, r0
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 80054c0:	f001 f862 	bl	8006588 <VL6180x_RdByte>
		if (status) {
 80054c4:	b110      	cbz	r0, 80054cc <VL6180x_RangeSetMaxConvergenceTime.part.6+0x20>
}
 80054c6:	b002      	add	sp, #8
 80054c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	status = VL6180x_RdByte(dev, 0x109, &u8);
 80054cc:	aa01      	add	r2, sp, #4
 80054ce:	f240 1109 	movw	r1, #265	; 0x109
 80054d2:	4620      	mov	r0, r4
		maxConv_ms = u8;
 80054d4:	f89d 7003 	ldrb.w	r7, [sp, #3]
	status = VL6180x_RdByte(dev, 0x109, &u8);
 80054d8:	f001 f856 	bl	8006588 <VL6180x_RdByte>
	if (status) {
 80054dc:	2800      	cmp	r0, #0
 80054de:	d13a      	bne.n	8005556 <VL6180x_RangeSetMaxConvergenceTime.part.6+0xaa>
	Samples = u8 & cMeasMask;
 80054e0:	f89d 8004 	ldrb.w	r8, [sp, #4]
	status = VL6180x_RdByte(dev, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 80054e4:	aa01      	add	r2, sp, #4
 80054e6:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80054ea:	4620      	mov	r0, r4
	Samples = u8 & cMeasMask;
 80054ec:	f008 0807 	and.w	r8, r8, #7
	status = VL6180x_RdByte(dev, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 80054f0:	f001 f84a 	bl	8006588 <VL6180x_RdByte>
	if (status) {
 80054f4:	bb78      	cbnz	r0, 8005556 <VL6180x_RangeSetMaxConvergenceTime.part.6+0xaa>
	SamplePeriod = u8;
 80054f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 80054fa:	aa01      	add	r2, sp, #4
	SingleTime_us = cFwOverhead_us + cVcpSetupTime_us + (SamplePeriod * 10);
 80054fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	335e      	adds	r3, #94	; 0x5e
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 8005504:	21b8      	movs	r1, #184	; 0xb8
 8005506:	4620      	mov	r0, r4
	TotalAveTime_us = (Samples + 1) * SingleTime_us + cPLL2_StartupDelay_us;
 8005508:	fb08 3803 	mla	r8, r8, r3, r3
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 800550c:	f001 f87c 	bl	8006608 <VL6180x_RdDWord>
		if (status) {
 8005510:	2800      	cmp	r0, #0
 8005512:	d1d8      	bne.n	80054c6 <VL6180x_RangeSetMaxConvergenceTime.part.6+0x1a>
		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 8005514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 8005518:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 800551c:	fb03 f307 	mul.w	r3, r3, r7
		fineThresh *= 256;
 8005520:	9f01      	ldr	r7, [sp, #4]
		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 8005522:	3bc8      	subs	r3, #200	; 0xc8
		fineThresh *= 256;
 8005524:	023f      	lsls	r7, r7, #8
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 8005526:	fb07 f606 	mul.w	r6, r7, r6
		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 800552a:	eba3 0308 	sub.w	r3, r3, r8
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 800552e:	fb02 f606 	mul.w	r6, r2, r6
 8005532:	fb05 f503 	mul.w	r5, r5, r3
 8005536:	fbb6 f5f5 	udiv	r5, r6, r5
		status = VL6180x_WrWord(dev, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 800553a:	2122      	movs	r1, #34	; 0x22
 800553c:	b2aa      	uxth	r2, r5
 800553e:	4620      	mov	r0, r4
		fineThresh *= 256;
 8005540:	9701      	str	r7, [sp, #4]
		status = VL6180x_WrWord(dev, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 8005542:	f000 ffcb 	bl	80064dc <VL6180x_WrWord>
		if (status) {
 8005546:	2800      	cmp	r0, #0
 8005548:	d1bd      	bne.n	80054c6 <VL6180x_RangeSetMaxConvergenceTime.part.6+0x1a>
		status = _DMax_InitData(dev);
 800554a:	4620      	mov	r0, r4
 800554c:	f7ff fefc 	bl	8005348 <_DMax_InitData>
}
 8005550:	b002      	add	sp, #8
 8005552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005556:	f04f 30ff 	mov.w	r0, #4294967295
 800555a:	e7b4      	b.n	80054c6 <VL6180x_RangeSetMaxConvergenceTime.part.6+0x1a>
 800555c:	2000000c 	.word	0x2000000c

08005560 <VL6180x_RangeGetStatusErrString>:
	if (RangeErrCode > sizeof(VL6180x_RangeStatusErrString) / sizeof(VL6180x_RangeStatusErrString[0]))
 8005560:	2813      	cmp	r0, #19
	return  VL6180x_RangeStatusErrString[RangeErrCode];
 8005562:	bf9a      	itte	ls
 8005564:	4b02      	ldrls	r3, [pc, #8]	; (8005570 <VL6180x_RangeGetStatusErrString+0x10>)
 8005566:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
		return NULL;
 800556a:	2000      	movhi	r0, #0
}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	200000d4 	.word	0x200000d4

08005574 <VL6180x_InitData>:
	VL6180xDevDataSet(dev, UpscaleFactor,  DEF_UPSCALE);
 8005574:	f240 1101 	movw	r1, #257	; 0x101
{
 8005578:	b570      	push	{r4, r5, r6, lr}
	_DMaxData(ambTuningWindowFactor_K) = DEF_AMBIENT_TUNING;
 800557a:	2350      	movs	r3, #80	; 0x50
	VL6180xDevDataSet(dev, RangeIgnore.Enabled, 0);
 800557c:	2600      	movs	r6, #0
	VL6180xDevDataSet(dev, DMaxEnable, DEF_DMAX_ENABLE);
 800557e:	2501      	movs	r5, #1
	VL6180xDevDataSet(dev, EceFactorM, DEF_ECE_FACTOR_M);
 8005580:	4c28      	ldr	r4, [pc, #160]	; (8005624 <VL6180x_InitData+0xb0>)
 8005582:	4a29      	ldr	r2, [pc, #164]	; (8005628 <VL6180x_InitData+0xb4>)
{
 8005584:	b082      	sub	sp, #8
	VL6180xDevDataSet(dev, EceFactorM, DEF_ECE_FACTOR_M);
 8005586:	60a2      	str	r2, [r4, #8]
	VL6180xDevDataSet(dev, UpscaleFactor,  DEF_UPSCALE);
 8005588:	8261      	strh	r1, [r4, #18]
		status = VL6180x_RdByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, (uint8_t *)&offset);
 800558a:	466a      	mov	r2, sp
 800558c:	2124      	movs	r1, #36	; 0x24
	VL6180xDevDataSet(dev, RangeIgnore.Enabled, 0);
 800558e:	7426      	strb	r6, [r4, #16]
	VL6180xDevDataSet(dev, DMaxEnable, DEF_DMAX_ENABLE);
 8005590:	f884 50c4 	strb.w	r5, [r4, #196]	; 0xc4
	_DMaxData(ambTuningWindowFactor_K) = DEF_AMBIENT_TUNING;
 8005594:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
{
 8005598:	4606      	mov	r6, r0
		status = VL6180x_RdByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, (uint8_t *)&offset);
 800559a:	f000 fff5 	bl	8006588 <VL6180x_RdByte>
		if (status) {
 800559e:	4605      	mov	r5, r0
 80055a0:	b110      	cbz	r0, 80055a8 <VL6180x_InitData+0x34>
}
 80055a2:	4628      	mov	r0, r5
 80055a4:	b002      	add	sp, #8
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
		VL6180xDevDataSet(dev, Part2PartOffsetNVM, offset);
 80055a8:	f89d 3000 	ldrb.w	r3, [sp]
		status = VL6180x_RdDWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &CalValue);
 80055ac:	aa01      	add	r2, sp, #4
 80055ae:	2126      	movs	r1, #38	; 0x26
 80055b0:	4630      	mov	r0, r6
		VL6180xDevDataSet(dev, Part2PartOffsetNVM, offset);
 80055b2:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
		status = VL6180x_RdDWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &CalValue);
 80055b6:	f001 f827 	bl	8006608 <VL6180x_RdDWord>
		if (status) {
 80055ba:	4605      	mov	r5, r0
 80055bc:	2800      	cmp	r0, #0
 80055be:	d1f0      	bne.n	80055a2 <VL6180x_InitData+0x2e>
		if ((CalValue&0xFFFF0000) == 0) {
 80055c0:	9d01      	ldr	r5, [sp, #4]
 80055c2:	0c2b      	lsrs	r3, r5, #16
 80055c4:	041b      	lsls	r3, r3, #16
 80055c6:	b913      	cbnz	r3, 80055ce <VL6180x_InitData+0x5a>
			CalValue = 0x00CE03F8;
 80055c8:	4b18      	ldr	r3, [pc, #96]	; (800562c <VL6180x_InitData+0xb8>)
 80055ca:	461d      	mov	r5, r3
 80055cc:	9301      	str	r3, [sp, #4]
		status = VL6180x_RdWord(dev, SYSRANGE_CROSSTALK_COMPENSATION_RATE , &u16);
 80055ce:	f10d 0202 	add.w	r2, sp, #2
 80055d2:	211e      	movs	r1, #30
 80055d4:	4630      	mov	r0, r6
		VL6180xDevDataSet(dev, Part2PartAmbNVM, CalValue);
 80055d6:	6025      	str	r5, [r4, #0]
		status = VL6180x_RdWord(dev, SYSRANGE_CROSSTALK_COMPENSATION_RATE , &u16);
 80055d8:	f000 fff4 	bl	80065c4 <VL6180x_RdWord>
		if (status) {
 80055dc:	4605      	mov	r5, r0
 80055de:	2800      	cmp	r0, #0
 80055e0:	d1df      	bne.n	80055a2 <VL6180x_InitData+0x2e>
		XTalkCompRate_KCps = Fix7_2_KCPs(u16);
 80055e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055e6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		dmax_status = _DMax_InitData(dev);
 80055ea:	4630      	mov	r0, r6
		XTalkCompRate_KCps = Fix7_2_KCPs(u16);
 80055ec:	fb03 f302 	mul.w	r3, r3, r2
 80055f0:	09db      	lsrs	r3, r3, #7
		VL6180xDevDataSet(dev, XTalkCompRate_KCps, XTalkCompRate_KCps);
 80055f2:	6063      	str	r3, [r4, #4]
		dmax_status = _DMax_InitData(dev);
 80055f4:	f7ff fea8 	bl	8005348 <_DMax_InitData>
		if (dmax_status < 0) {
 80055f8:	1e04      	subs	r4, r0, #0
 80055fa:	dbd2      	blt.n	80055a2 <VL6180x_InitData+0x2e>
		status = VL6180x_RdByte(dev, SYSTEM_FRESH_OUT_OF_RESET, &FreshOutReset);
 80055fc:	4630      	mov	r0, r6
 80055fe:	f10d 0201 	add.w	r2, sp, #1
 8005602:	2116      	movs	r1, #22
 8005604:	f000 ffc0 	bl	8006588 <VL6180x_RdByte>
		if (status) {
 8005608:	b928      	cbnz	r0, 8005616 <VL6180x_InitData+0xa2>
		if (FreshOutReset != 1 || dmax_status)
 800560a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d003      	beq.n	800561a <VL6180x_InitData+0xa6>
			status = CALIBRATION_WARNING;
 8005612:	2501      	movs	r5, #1
	return status;
 8005614:	e7c5      	b.n	80055a2 <VL6180x_InitData+0x2e>
 8005616:	4605      	mov	r5, r0
 8005618:	e7c3      	b.n	80055a2 <VL6180x_InitData+0x2e>
			status = CALIBRATION_WARNING;
 800561a:	2c00      	cmp	r4, #0
 800561c:	bf18      	it	ne
 800561e:	2501      	movne	r5, #1
 8005620:	e7bf      	b.n	80055a2 <VL6180x_InitData+0x2e>
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c
 8005628:	00640055 	.word	0x00640055
 800562c:	00ce03f8 	.word	0x00ce03f8

08005630 <VL6180x_RangeGetMeasurement>:
{
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (VL6180xDevDataGet(dev, CacheFilled) == 0) {
 8005634:	4c7d      	ldr	r4, [pc, #500]	; (800582c <VL6180x_RangeGetMeasurement+0x1fc>)
{
 8005636:	b091      	sub	sp, #68	; 0x44
	if (VL6180xDevDataGet(dev, CacheFilled) == 0) {
 8005638:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
{
 800563c:	460e      	mov	r6, r1
 800563e:	4607      	mov	r7, r0
	if (VL6180xDevDataGet(dev, CacheFilled) == 0) {
 8005640:	2b00      	cmp	r3, #0
 8005642:	d05d      	beq.n	8005700 <VL6180x_RangeGetMeasurement+0xd0>
		Upscale = _GetUpscale(dev);
 8005644:	7ca2      	ldrb	r2, [r4, #18]
		*pRange_mm = Upscale * (int32_t)RawRange;
 8005646:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 800564a:	fb03 f302 	mul.w	r3, r3, r2
 800564e:	6033      	str	r3, [r6, #0]
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8005650:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8005654:	2a00      	cmp	r2, #0
 8005656:	d072      	beq.n	800573e <VL6180x_RangeGetMeasurement+0x10e>
 8005658:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
 800565c:	ba5b      	rev16	r3, r3
 800565e:	b299      	uxth	r1, r3
		*pValue = Value;
 8005660:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
			pRangeData->signalRate_mcps = VL6180x_9to7Conv(RawRate);
 8005664:	6071      	str	r1, [r6, #4]
		Value = VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 8005666:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
		*pValue = Value;
 800566a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				pRangeData->errorStatus = RawStatus >> 4;
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	60b3      	str	r3, [r6, #8]
	uint32_t m_rtnConvTime = 0;
 8005672:	2300      	movs	r3, #0
	uint32_t m_rtnSignalCount = 0;
 8005674:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
	uint32_t m_refConvTime = 0;
 8005678:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 800567c:	2a00      	cmp	r2, #0
 800567e:	d07a      	beq.n	8005776 <VL6180x_RangeGetMeasurement+0x146>
 8005680:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005684:	ba1b      	rev	r3, r3
		if (m_rtnSignalCount > cRtnSignalCountMax) {
 8005686:	2b00      	cmp	r3, #0
		*pValue = Value;
 8005688:	930c      	str	r3, [sp, #48]	; 0x30
		if (m_rtnSignalCount > cRtnSignalCountMax) {
 800568a:	f2c0 80ab 	blt.w	80057e4 <VL6180x_RangeGetMeasurement+0x1b4>
 800568e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8005692:	ba12      	rev	r2, r2
 8005694:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8005698:	ba09      	rev	r1, r1
 800569a:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800569e:	ba2d      	rev	r5, r5
 80056a0:	428d      	cmp	r5, r1
 80056a2:	4628      	mov	r0, r5
			calcConvTime = 63000;
 80056a4:	f24f 6c18 	movw	ip, #63000	; 0xf618
 80056a8:	bf38      	it	cc
 80056aa:	4608      	movcc	r0, r1
		m_rtnSignalRate = (m_rtnSignalCount * 1000) / calcConvTime;
 80056ac:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
			calcConvTime = 63000;
 80056b0:	2800      	cmp	r0, #0
 80056b2:	bf08      	it	eq
 80056b4:	4660      	moveq	r0, ip
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 80056b6:	f241 7c70 	movw	ip, #6000	; 0x1770
		m_rtnSignalRate = (m_rtnSignalCount * 1000) / calcConvTime;
 80056ba:	fb09 f303 	mul.w	r3, r9, r3
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 80056be:	fb0c f202 	mul.w	r2, ip, r2
		m_rtnSignalRate = (m_rtnSignalCount * 1000) / calcConvTime;
 80056c2:	fbb3 f9f0 	udiv	r9, r3, r0
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 80056c6:	fbb2 f3f0 	udiv	r3, r2, r0
		pRangeData->rtnAmbRate = m_rtnAmbientRate;
 80056ca:	e9c6 3903 	strd	r3, r9, [r6, #12]
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 80056ce:	9308      	str	r3, [sp, #32]
			if (_IsWrapArroundActive(dev)) {
 80056d0:	7ce3      	ldrb	r3, [r4, #19]
		pRangeData->refConvTime = m_refConvTime;
 80056d2:	e9c6 1505 	strd	r1, r5, [r6, #20]
			if (_IsWrapArroundActive(dev)) {
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f040 8088 	bne.w	80057ec <VL6180x_RangeGetMeasurement+0x1bc>
			status = _GetRateResult(dev, pRangeData);
 80056dc:	2500      	movs	r5, #0
			if (_IsDMaxActive(dev)) {
 80056de:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 80056e2:	b133      	cbz	r3, 80056f2 <VL6180x_RangeGetMeasurement+0xc2>
				_DMax_Compute(dev, pRangeData);
 80056e4:	68f1      	ldr	r1, [r6, #12]
	int scaling;
	uint16_t HwLimitAtScale;
	static const int ROMABLE_DATA rtnAmbLowLimit_KCps = 330 * 1000;

	rtnAmbRate = pRange->rtnAmbRate;
	if (rtnAmbRate  < rtnAmbLowLimit_KCps) {
 80056e6:	4b52      	ldr	r3, [pc, #328]	; (8005830 <VL6180x_RangeGetMeasurement+0x200>)
 80056e8:	4299      	cmp	r1, r3
 80056ea:	f240 821d 	bls.w	8005b28 <VL6180x_RangeGetMeasurement+0x4f8>
		if (DMax > HwLimitAtScale) {
		    DMax = HwLimitAtScale;
		}
		pRange->DMax = DMax;
	} else {
		pRange->DMax = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61f3      	str	r3, [r6, #28]
	VL6180xDevDataSet(dev, CacheFilled, 0);
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4628      	mov	r0, r5
	VL6180xDevDataSet(dev, CacheFilled, 0);
 80056f6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 80056fa:	b011      	add	sp, #68	; 0x44
 80056fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		VL6180xDevDataSet(dev, CacheFilled, 1);
 8005700:	2501      	movs	r5, #1
		status = VL6180x_RdMulti(dev, VL6180x_FIRST_CACHED_INDEX, Buffer, VL6180x_CACHED_REG_CNT);
 8005702:	2338      	movs	r3, #56	; 0x38
 8005704:	f104 0279 	add.w	r2, r4, #121	; 0x79
 8005708:	214d      	movs	r1, #77	; 0x4d
		VL6180xDevDataSet(dev, CacheFilled, 1);
 800570a:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
		status = VL6180x_RdMulti(dev, VL6180x_FIRST_CACHED_INDEX, Buffer, VL6180x_CACHED_REG_CNT);
 800570e:	f000 ff99 	bl	8006644 <VL6180x_RdMulti>
	if (status) {
 8005712:	4605      	mov	r5, r0
 8005714:	2800      	cmp	r0, #0
 8005716:	d1ec      	bne.n	80056f2 <VL6180x_RangeGetMeasurement+0xc2>
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8005718:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 800571c:	2b00      	cmp	r3, #0
 800571e:	d191      	bne.n	8005644 <VL6180x_RangeGetMeasurement+0x14>
		status =  VL6180x_RdByte(dev, index, pValue);
 8005720:	aa0e      	add	r2, sp, #56	; 0x38
 8005722:	2162      	movs	r1, #98	; 0x62
 8005724:	4638      	mov	r0, r7
 8005726:	f000 ff2f 	bl	8006588 <VL6180x_RdByte>
	if (!status) {
 800572a:	4605      	mov	r5, r0
 800572c:	2800      	cmp	r0, #0
 800572e:	d1e0      	bne.n	80056f2 <VL6180x_RangeGetMeasurement+0xc2>
		Upscale = _GetUpscale(dev);
 8005730:	7ca2      	ldrb	r2, [r4, #18]
		*pRange_mm = Upscale * (int32_t)RawRange;
 8005732:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8005736:	fb03 f302 	mul.w	r3, r3, r2
 800573a:	6033      	str	r3, [r6, #0]
 800573c:	e788      	b.n	8005650 <VL6180x_RangeGetMeasurement+0x20>
		status =  VL6180x_RdWord(dev, index, pValue);
 800573e:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 8005742:	2166      	movs	r1, #102	; 0x66
 8005744:	4638      	mov	r0, r7
 8005746:	f000 ff3d 	bl	80065c4 <VL6180x_RdWord>
		if (!status) {
 800574a:	4605      	mov	r5, r0
 800574c:	2800      	cmp	r0, #0
 800574e:	d1d0      	bne.n	80056f2 <VL6180x_RangeGetMeasurement+0xc2>
 8005750:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
			pRangeData->signalRate_mcps = VL6180x_9to7Conv(RawRate);
 8005754:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8005758:	6073      	str	r3, [r6, #4]
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 800575a:	2a00      	cmp	r2, #0
 800575c:	d183      	bne.n	8005666 <VL6180x_RangeGetMeasurement+0x36>
		status =  VL6180x_RdByte(dev, index, pValue);
 800575e:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8005762:	214d      	movs	r1, #77	; 0x4d
 8005764:	4638      	mov	r0, r7
 8005766:	f000 ff0f 	bl	8006588 <VL6180x_RdByte>
			if (!status) {
 800576a:	2800      	cmp	r0, #0
 800576c:	f000 81a8 	beq.w	8005ac0 <VL6180x_RangeGetMeasurement+0x490>
 8005770:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8005774:	e77d      	b.n	8005672 <VL6180x_RangeGetMeasurement+0x42>
		status =  VL6180x_RdDWord(dev, index, pValue);
 8005776:	aa0c      	add	r2, sp, #48	; 0x30
 8005778:	216c      	movs	r1, #108	; 0x6c
 800577a:	4638      	mov	r0, r7
 800577c:	f000 ff44 	bl	8006608 <VL6180x_RdDWord>
		if (status) {
 8005780:	4605      	mov	r5, r0
 8005782:	2800      	cmp	r0, #0
 8005784:	d1b5      	bne.n	80056f2 <VL6180x_RangeGetMeasurement+0xc2>
		if (m_rtnSignalCount > cRtnSignalCountMax) {
 8005786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005788:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 800578c:	2b00      	cmp	r3, #0
 800578e:	db29      	blt.n	80057e4 <VL6180x_RangeGetMeasurement+0x1b4>
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8005790:	2a00      	cmp	r2, #0
 8005792:	f47f af7c 	bne.w	800568e <VL6180x_RangeGetMeasurement+0x5e>
		status =  VL6180x_RdDWord(dev, index, pValue);
 8005796:	aa0d      	add	r2, sp, #52	; 0x34
 8005798:	2174      	movs	r1, #116	; 0x74
 800579a:	4638      	mov	r0, r7
 800579c:	f000 ff34 	bl	8006608 <VL6180x_RdDWord>
		if (status) {
 80057a0:	4605      	mov	r5, r0
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d1a5      	bne.n	80056f2 <VL6180x_RangeGetMeasurement+0xc2>
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 80057a6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f040 8458 	bne.w	8006060 <VL6180x_RangeGetMeasurement+0xa30>
		status =  VL6180x_RdDWord(dev, index, pValue);
 80057b0:	aa0b      	add	r2, sp, #44	; 0x2c
 80057b2:	217c      	movs	r1, #124	; 0x7c
 80057b4:	4638      	mov	r0, r7
 80057b6:	f000 ff27 	bl	8006608 <VL6180x_RdDWord>
		if (status) {
 80057ba:	4605      	mov	r5, r0
 80057bc:	2800      	cmp	r0, #0
 80057be:	d198      	bne.n	80056f2 <VL6180x_RangeGetMeasurement+0xc2>
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 80057c0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f040 8446 	bne.w	8006056 <VL6180x_RangeGetMeasurement+0xa26>
		status =  VL6180x_RdDWord(dev, index, pValue);
 80057ca:	aa0e      	add	r2, sp, #56	; 0x38
 80057cc:	2180      	movs	r1, #128	; 0x80
 80057ce:	4638      	mov	r0, r7
 80057d0:	f000 ff1a 	bl	8006608 <VL6180x_RdDWord>
		if (status) {
 80057d4:	4605      	mov	r5, r0
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d18b      	bne.n	80056f2 <VL6180x_RangeGetMeasurement+0xc2>
 80057da:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80057de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80057e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057e2:	e75d      	b.n	80056a0 <VL6180x_RangeGetMeasurement+0x70>
			m_rtnSignalCount = 0;
 80057e4:	2100      	movs	r1, #0
 80057e6:	460b      	mov	r3, r1
 80057e8:	910c      	str	r1, [sp, #48]	; 0x30
 80057ea:	e7d1      	b.n	8005790 <VL6180x_RangeGetMeasurement+0x160>
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 80057ec:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
	const uint8_t scaler = _GetUpscale(dev);
 80057f0:	f894 b012 	ldrb.w	fp, [r4, #18]
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 81d5 	beq.w	8005ba4 <VL6180x_RangeGetMeasurement+0x574>
		*pValue = Value;
 80057fa:	465b      	mov	r3, fp
		Value = VL6180xDevDataGet(dev, CachedRegs[index - VL6180x_FIRST_CACHED_INDEX]);
 80057fc:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
		*pValue = Value;
 8005800:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		FilteredRange = _filter_Start(dev, pRangeData->range_mm, (m_rawRange_mm * scaler), pRangeData->rtnRate, pRangeData->rtnAmbRate, pRangeData->errorStatus);
 8005804:	8831      	ldrh	r1, [r6, #0]
 8005806:	f8b6 8008 	ldrh.w	r8, [r6, #8]
 800580a:	fb0b fb02 	mul.w	fp, fp, r2
 800580e:	9101      	str	r1, [sp, #4]
	switch (errorCode) {
 8005810:	f1a8 020c 	sub.w	r2, r8, #12
	uint32_t MaxOrInvalidDistance =   255*_GetUpscale(dev);
 8005814:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8005818:	9104      	str	r1, [sp, #16]
	switch (errorCode) {
 800581a:	2a03      	cmp	r2, #3
 800581c:	f200 81d2 	bhi.w	8005bc4 <VL6180x_RangeGetMeasurement+0x594>
 8005820:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005824:	01400008 	.word	0x01400008
 8005828:	01400008 	.word	0x01400008
 800582c:	2000000c 	.word	0x2000000c
 8005830:	0005090f 	.word	0x0005090f
		ValidDistance = 0;
 8005834:	2300      	movs	r3, #0
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8005836:	2210      	movs	r2, #16
	uint16_t bypassFilter = 0;
 8005838:	469a      	mov	sl, r3
		ValidDistance = 0;
 800583a:	9303      	str	r3, [sp, #12]
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 800583c:	9209      	str	r2, [sp, #36]	; 0x24
	SignalRateDMax = (uint32_t)_GetDMaxDataRetSignalAt400mm(dev) ;
 800583e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit)) {
 8005842:	f1bb 0f3b 	cmp.w	fp, #59	; 0x3b
	XTalkCompRate_KCps = VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 8005846:	6865      	ldr	r5, [r4, #4]
	SignalRateDMax = (uint32_t)_GetDMaxDataRetSignalAt400mm(dev) ;
 8005848:	9305      	str	r3, [sp, #20]
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit)) {
 800584a:	f200 8157 	bhi.w	8005afc <VL6180x_RangeGetMeasurement+0x4cc>
	WrapAroundLowReturnRateLimit = WrapAroundLowReturnRateLimit_ROM  + XTalkCompRate_KCps;
 800584e:	f505 7348 	add.w	r3, r5, #800	; 0x320
	uint16_t filterErrorCode = NoError;
 8005852:	454b      	cmp	r3, r9
 8005854:	bf8a      	itet	hi
 8005856:	2310      	movhi	r3, #16
 8005858:	2300      	movls	r3, #0
 800585a:	f04f 0a01 	movhi.w	sl, #1
 800585e:	9302      	str	r3, [sp, #8]
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8005860:	23b4      	movs	r3, #180	; 0xb4
 8005862:	9a05      	ldr	r2, [sp, #20]
 8005864:	fb03 f302 	mul.w	r3, r3, r2
									SignalRateDMax) / 312) +
 8005868:	4aab      	ldr	r2, [pc, #684]	; (8005b18 <VL6180x_RangeGetMeasurement+0x4e8>)
 800586a:	08db      	lsrs	r3, r3, #3
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8005870:	eb05 0393 	add.w	r3, r5, r3, lsr #2
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 8005874:	454b      	cmp	r3, r9
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < (WrapAroundLowReturnRateLimit2 + WrapAroundLowRawRangeLimit2SuspicuousAddedSignalRate))) {
 8005876:	f103 0396 	add.w	r3, r3, #150	; 0x96
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 800587a:	9a02      	ldr	r2, [sp, #8]
 800587c:	bf84      	itt	hi
 800587e:	f04f 0a01 	movhi.w	sl, #1
 8005882:	2210      	movhi	r2, #16
	uint16_t SuspicuousRangingZone = 0;
 8005884:	454b      	cmp	r3, r9
 8005886:	bf94      	ite	ls
 8005888:	2300      	movls	r3, #0
 800588a:	2301      	movhi	r3, #1
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 800588c:	9202      	str	r2, [sp, #8]
	uint16_t SuspicuousRangingZone = 0;
 800588e:	9307      	str	r3, [sp, #28]
	if (m_rtnAmbientRate > WrapAroundMaximumAmbientRateFilterLimit) {
 8005890:	f643 2398 	movw	r3, #15000	; 0x3a98
 8005894:	9a08      	ldr	r2, [sp, #32]
 8005896:	429a      	cmp	r2, r3
	if (_FilterData(LastReturnRates)[0] != 0) {
 8005898:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if (m_rtnAmbientRate > WrapAroundMaximumAmbientRateFilterLimit) {
 800589a:	f200 8116 	bhi.w	8005aca <VL6180x_RangeGetMeasurement+0x49a>
	if (m_rtnSignalRate < MinReturnRateFilterFlush) {
 800589e:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 80058a2:	f240 8112 	bls.w	8005aca <VL6180x_RangeGetMeasurement+0x49a>
	if (_FilterData(LastReturnRates)[0] != 0) {
 80058a6:	b18b      	cbz	r3, 80058cc <VL6180x_RangeGetMeasurement+0x29c>
	uint16_t FlushFilter = 0;
 80058a8:	2100      	movs	r1, #0
			RateChange = (100 *
 80058aa:	2264      	movs	r2, #100	; 0x64
		if (m_rtnSignalRate > _FilterData(LastReturnRates)[0])
 80058ac:	454b      	cmp	r3, r9
						(m_rtnSignalRate - _FilterData(LastReturnRates)[0])) /
 80058ae:	bf34      	ite	cc
 80058b0:	eba9 0003 	subcc.w	r0, r9, r3
						(_FilterData(LastReturnRates)[0] - m_rtnSignalRate)) /
 80058b4:	eba3 0009 	subcs.w	r0, r3, r9
			RateChange = (100 *
 80058b8:	fb02 f200 	mul.w	r2, r2, r0
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
	if (RateChange > MaxReturnRateChangeFilterFlush) {
 80058c0:	2b32      	cmp	r3, #50	; 0x32
 80058c2:	f200 8107 	bhi.w	8005ad4 <VL6180x_RangeGetMeasurement+0x4a4>
	if (FlushFilter == 1) {
 80058c6:	2900      	cmp	r1, #0
 80058c8:	f040 8104 	bne.w	8005ad4 <VL6180x_RangeGetMeasurement+0x4a4>
		_FilterData(MeasurementIndex) = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	4993      	ldr	r1, [pc, #588]	; (8005b1c <VL6180x_RangeGetMeasurement+0x4ec>)
 80058d0:	2212      	movs	r2, #18
 80058d2:	1c88      	adds	r0, r1, #2
 80058d4:	9306      	str	r3, [sp, #24]
 80058d6:	f002 fabc 	bl	8007e52 <memmove>
 80058da:	4991      	ldr	r1, [pc, #580]	; (8005b20 <VL6180x_RangeGetMeasurement+0x4f0>)
 80058dc:	2224      	movs	r2, #36	; 0x24
 80058de:	1d08      	adds	r0, r1, #4
 80058e0:	f002 fab7 	bl	8007e52 <memmove>
 80058e4:	69a2      	ldr	r2, [r4, #24]
 80058e6:	3201      	adds	r2, #1
		_FilterData(LastTrueRange)[0] = FILTER_INVALID_DISTANCE;
 80058e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058ec:	9901      	ldr	r1, [sp, #4]
 80058ee:	9803      	ldr	r0, [sp, #12]
	_FilterData(MeasurementsSinceLastFlush)++;
 80058f0:	61a2      	str	r2, [r4, #24]
		_FilterData(LastTrueRange)[0] = FILTER_INVALID_DISTANCE;
 80058f2:	2800      	cmp	r0, #0
 80058f4:	bf18      	it	ne
 80058f6:	460b      	movne	r3, r1
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 80058f8:	f5bb 7faf 	cmp.w	fp, #350	; 0x15e
 80058fc:	83a3      	strh	r3, [r4, #28]
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 80058fe:	bf34      	ite	cc
 8005900:	f240 3352 	movwcc	r3, #850	; 0x352
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 8005904:	f44f 63af 	movcs.w	r3, #1400	; 0x578
 8005908:	9a05      	ldr	r2, [sp, #20]
	_FilterData(LastReturnRates)[0] = m_rtnSignalRate;
 800590a:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 800590e:	fb03 f302 	mul.w	r3, r3, r2
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8005912:	4a81      	ldr	r2, [pc, #516]	; (8005b18 <VL6180x_RangeGetMeasurement+0x4e8>)
 8005914:	08db      	lsrs	r3, r3, #3
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 800591a:	eb05 0593 	add.w	r5, r5, r3, lsr #2
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 800591e:	454d      	cmp	r5, r9
 8005920:	f240 80f5 	bls.w	8005b0e <VL6180x_RangeGetMeasurement+0x4de>
		if(filterErrorCodeOnRangingErrorCode!=NoError){
 8005924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 8314 	beq.w	8005f54 <VL6180x_RangeGetMeasurement+0x924>
			resetVAVGData = 0;
 800592c:	9a02      	ldr	r2, [sp, #8]
			if((errorCode==Raw_Ranging_Algo_Underflow) || (errorCode==Ranging_Algo_Underflow)) {
 800592e:	f028 0802 	bic.w	r8, r8, #2
			resetVAVGData = 0;
 8005932:	f1b8 0f0c 	cmp.w	r8, #12
 8005936:	bf18      	it	ne
 8005938:	4613      	movne	r3, r2
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	2300      	movs	r3, #0
 800593e:	f04f 0a01 	mov.w	sl, #1
 8005942:	9309      	str	r3, [sp, #36]	; 0x24
	status = VL6180x_RdByte(dev, 0x01AC, &u8);
 8005944:	aa0d      	add	r2, sp, #52	; 0x34
 8005946:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800594a:	4638      	mov	r0, r7
 800594c:	f000 fe1c 	bl	8006588 <VL6180x_RdByte>
	if (status) {
 8005950:	2800      	cmp	r0, #0
 8005952:	f040 830d 	bne.w	8005f70 <VL6180x_RangeGetMeasurement+0x940>
	registerValue = u8;
 8005956:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
	status = VL6180x_RdMulti(dev, 0x10C, MultiReadBuf, 8); /* read only 8 lsb bits */
 800595a:	2308      	movs	r3, #8
 800595c:	aa0e      	add	r2, sp, #56	; 0x38
 800595e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8005962:	4638      	mov	r0, r7
	registerValue = u8;
 8005964:	9505      	str	r5, [sp, #20]
	status = VL6180x_RdMulti(dev, 0x10C, MultiReadBuf, 8); /* read only 8 lsb bits */
 8005966:	f000 fe6d 	bl	8006644 <VL6180x_RdMulti>
	if (status) {
 800596a:	4605      	mov	r5, r0
 800596c:	2800      	cmp	r0, #0
 800596e:	f040 82ff 	bne.w	8005f70 <VL6180x_RangeGetMeasurement+0x940>
			+ ((uint32_t) MultiReadBuf[5] << 16)
 8005972:	f89d 803d 	ldrb.w	r8, [sp, #61]	; 0x3d
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 8005976:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
			+ ((uint32_t) MultiReadBuf[1] << 16)
 800597a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
			+ ((uint32_t) MultiReadBuf[5] << 16)
 800597e:	ea4f 4808 	mov.w	r8, r8, lsl #16
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 8005982:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
			+ ((uint32_t) MultiReadBuf[5] << 16)
 8005986:	eb08 6802 	add.w	r8, r8, r2, lsl #24
			+ ((uint32_t) MultiReadBuf[7] << 0);
 800598a:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
			+ ((uint32_t) MultiReadBuf[1] << 16)
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	eb03 6301 	add.w	r3, r3, r1, lsl #24
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 8005994:	4490      	add	r8, r2
			+ ((uint32_t) MultiReadBuf[3] << 0);
 8005996:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
			+ ((uint32_t) MultiReadBuf[6] << 8)
 800599a:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 800599e:	440b      	add	r3, r1
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 80059a0:	eb08 2802 	add.w	r8, r8, r2, lsl #8
			+ ((uint32_t) MultiReadBuf[2] << 8)
 80059a4:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
	if ((FlushFilter == 1) || ((bypassFilter == 1) && (resetVAVGData == 1))) {
 80059a8:	9a06      	ldr	r2, [sp, #24]
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 80059aa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	if ((FlushFilter == 1) || ((bypassFilter == 1) && (resetVAVGData == 1))) {
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	f040 8113 	bne.w	8005bda <VL6180x_RangeGetMeasurement+0x5aa>
 80059b4:	f1ba 0f01 	cmp.w	sl, #1
 80059b8:	f000 812e 	beq.w	8005c18 <VL6180x_RangeGetMeasurement+0x5e8>
		if (registerValue == 0x3E) {
 80059bc:	9a05      	ldr	r2, [sp, #20]
		status = VL6180x_WrByte(dev, 0x01AC, u8);
 80059be:	4638      	mov	r0, r7
		if (registerValue == 0x3E) {
 80059c0:	2a3e      	cmp	r2, #62	; 0x3e
			_FilterData(Default_VAVGVal) = register32BitsValue2;
 80059c2:	bf0c      	ite	eq
 80059c4:	e9c4 3817 	strdeq	r3, r8, [r4, #92]	; 0x5c
			_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 80059c8:	e9c4 3819 	strdne	r3, r8, [r4, #100]	; 0x64
		if (_FilterData(MeasurementIndex) % WrapAroundNoDelayCheckPeriod == 0) {
 80059cc:	6963      	ldr	r3, [r4, #20]
		status = VL6180x_WrByte(dev, 0x01AC, u8);
 80059ce:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
			u8 = 0x3C;
 80059d2:	f013 0f01 	tst.w	r3, #1
 80059d6:	bf14      	ite	ne
 80059d8:	233e      	movne	r3, #62	; 0x3e
 80059da:	233c      	moveq	r3, #60	; 0x3c
		status = VL6180x_WrByte(dev, 0x01AC, u8);
 80059dc:	461a      	mov	r2, r3
 80059de:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80059e2:	f000 fd6b 	bl	80064bc <VL6180x_WrByte>
		if (status) {
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f040 82c2 	bne.w	8005f70 <VL6180x_RangeGetMeasurement+0x940>
		_FilterData(MeasurementIndex)++;
 80059ec:	6962      	ldr	r2, [r4, #20]
	if (bypassFilter == 1) {
 80059ee:	f1ba 0f01 	cmp.w	sl, #1
		_FilterData(MeasurementIndex)++;
 80059f2:	f102 0201 	add.w	r2, r2, #1
 80059f6:	6162      	str	r2, [r4, #20]
	if (bypassFilter == 1) {
 80059f8:	f000 811a 	beq.w	8005c30 <VL6180x_RangeGetMeasurement+0x600>
	if (_FilterData(Default_VAVGVal) > _FilterData(NoDelay_VAVGVal))
 80059fc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80059fe:	f8d4 c060 	ldr.w	ip, [r4, #96]	; 0x60
 8005a02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a04:	458c      	cmp	ip, r1
		VAVGDiff = 0;
 8005a06:	bf98      	it	ls
 8005a08:	4601      	movls	r1, r0
	if(SuspicuousRangingZone==0)
 8005a0a:	9807      	ldr	r0, [sp, #28]
		VAVGDiff = _FilterData(Default_VAVGVal) - _FilterData(NoDelay_VAVGVal);
 8005a0c:	bf88      	it	hi
 8005a0e:	ebac 0101 	subhi.w	r1, ip, r1
 8005a12:	6e67      	ldr	r7, [r4, #100]	; 0x64
	_FilterData(Previous_VAVGDiff) = VAVGDiff;
 8005a14:	66e1      	str	r1, [r4, #108]	; 0x6c
	if(SuspicuousRangingZone==0)
 8005a16:	2800      	cmp	r0, #0
 8005a18:	f040 80fb 	bne.w	8005c12 <VL6180x_RangeGetMeasurement+0x5e2>
		MAX_VAVGDiff = MAX_VAVGDiff_ROM;
 8005a1c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
	if (_FilterData(Default_ZeroVal) > _FilterData(NoDelay_ZeroVal))
 8005a20:	429f      	cmp	r7, r3
 8005a22:	f080 8112 	bcs.w	8005c4a <VL6180x_RangeGetMeasurement+0x61a>
		IdealVAVGDiff = _FilterData(Default_ZeroVal) - _FilterData(NoDelay_ZeroVal);
 8005a26:	1bdb      	subs	r3, r3, r7
	if (IdealVAVGDiff > MAX_VAVGDiff)
 8005a28:	4283      	cmp	r3, r0
 8005a2a:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
 8005a2e:	f240 8113 	bls.w	8005c58 <VL6180x_RangeGetMeasurement+0x628>
		MinVAVGDiff = IdealVAVGDiff - MAX_VAVGDiff;
 8005a32:	1a1f      	subs	r7, r3, r0
	if (VAVGDiff < MinVAVGDiff || VAVGDiff > MaxVAVGDiff) {
 8005a34:	428f      	cmp	r7, r1
 8005a36:	f240 810f 	bls.w	8005c58 <VL6180x_RangeGetMeasurement+0x628>
 8005a3a:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
	if (ValidDistance == 0) {
 8005a3e:	9a03      	ldr	r2, [sp, #12]
 8005a40:	2a00      	cmp	r2, #0
 8005a42:	f000 825e 	beq.w	8005f02 <VL6180x_RangeGetMeasurement+0x8d2>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) +
 8005a46:	3302      	adds	r3, #2
 8005a48:	b29b      	uxth	r3, r3
			if (_FilterData(StdFilteredReads) > StdMaxFilteredReads)
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	f240 82c7 	bls.w	8005fde <VL6180x_RangeGetMeasurement+0x9ae>
				_FilterData(StdFilteredReads) = StdMaxFilteredReads;
 8005a50:	2304      	movs	r3, #4
 8005a52:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 8005a56:	f1bc 0f00 	cmp.w	ip, #0
 8005a5a:	f040 8273 	bne.w	8005f44 <VL6180x_RangeGetMeasurement+0x914>
					StdDevLimitWithTargetMove = StdDevMovingTargetStdDevForReturnRateLimit;
 8005a5e:	2710      	movs	r7, #16
		filterErrorCode = RangingFiltered;
 8005a60:	9702      	str	r7, [sp, #8]
 8005a62:	f04f 31ff 	mov.w	r1, #4294967295
 8005a66:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <VL6180x_RangeGetMeasurement+0x4f4>)
 8005a68:	f8c4 101e 	str.w	r1, [r4, #30]
 8005a6c:	f103 0016 	add.w	r0, r3, #22
 8005a70:	6059      	str	r1, [r3, #4]
 8005a72:	6099      	str	r1, [r3, #8]
 8005a74:	60d9      	str	r1, [r3, #12]
 8005a76:	8219      	strh	r1, [r3, #16]
 8005a78:	2224      	movs	r2, #36	; 0x24
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	f002 fa02 	bl	8007e84 <memset>
 8005a80:	9b02      	ldr	r3, [sp, #8]
	if(filterErrorCode==RangingFiltered)
 8005a82:	2b10      	cmp	r3, #16
	_FilterData(filterError) = filterErrorCode;
 8005a84:	6767      	str	r7, [r4, #116]	; 0x74
	if(filterErrorCode==RangingFiltered)
 8005a86:	f000 80d8 	beq.w	8005c3a <VL6180x_RangeGetMeasurement+0x60a>
	return m_newTrueRange_mm;
 8005a8a:	9b01      	ldr	r3, [sp, #4]
		pRangeData->FilteredData.rawRange_mm = m_rawRange_mm * scaler;
 8005a8c:	f8a6 b022 	strh.w	fp, [r6, #34]	; 0x22
	return m_newTrueRange_mm;
 8005a90:	9304      	str	r3, [sp, #16]
		pRangeData->FilteredData.range_mm = FilteredRange;
 8005a92:	8433      	strh	r3, [r6, #32]
		pRangeData->FilteredData.filterError= _FilterData(filterError);
 8005a94:	6277      	str	r7, [r6, #36]	; 0x24
					if(pRangeData->FilteredData.filterError != NoError) {
 8005a96:	2f00      	cmp	r7, #0
 8005a98:	f43f ae20 	beq.w	80056dc <VL6180x_RangeGetMeasurement+0xac>
 8005a9c:	9b04      	ldr	r3, [sp, #16]
						pRangeData->errorStatus = pRangeData->FilteredData.filterError;
 8005a9e:	60b7      	str	r7, [r6, #8]
						pRangeData->range_mm = pRangeData->FilteredData.range_mm;
 8005aa0:	6033      	str	r3, [r6, #0]
 8005aa2:	e61c      	b.n	80056de <VL6180x_RangeGetMeasurement+0xae>
		m_trueRange_mm = 200*_GetUpscale(dev);
 8005aa4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005aa8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	9301      	str	r3, [sp, #4]
		ValidDistance = 1;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	9303      	str	r3, [sp, #12]
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8005ab6:	2310      	movs	r3, #16
	uint16_t bypassFilter = 0;
 8005ab8:	f04f 0a00 	mov.w	sl, #0
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8005abc:	9309      	str	r3, [sp, #36]	; 0x24
 8005abe:	e6be      	b.n	800583e <VL6180x_RangeGetMeasurement+0x20e>
 8005ac0:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8005ac4:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8005ac8:	e5d1      	b.n	800566e <VL6180x_RangeGetMeasurement+0x3e>
		bypassFilter = 1;
 8005aca:	f04f 0a01 	mov.w	sl, #1
	if (_FilterData(LastReturnRates)[0] != 0) {
 8005ace:	b10b      	cbz	r3, 8005ad4 <VL6180x_RangeGetMeasurement+0x4a4>
		FlushFilter = 1;
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	e6ea      	b.n	80058aa <VL6180x_RangeGetMeasurement+0x27a>
 8005ad4:	f04f 32ff 	mov.w	r2, #4294967295
		_FilterData(MeasurementIndex) = 0;
 8005ad8:	2000      	movs	r0, #0
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <VL6180x_RangeGetMeasurement+0x4f4>)
 8005adc:	f8c4 201e 	str.w	r2, [r4, #30]
 8005ae0:	4601      	mov	r1, r0
 8005ae2:	6160      	str	r0, [r4, #20]
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	609a      	str	r2, [r3, #8]
 8005ae8:	60da      	str	r2, [r3, #12]
 8005aea:	821a      	strh	r2, [r3, #16]
 8005aec:	f103 0016 	add.w	r0, r3, #22
 8005af0:	2224      	movs	r2, #36	; 0x24
 8005af2:	f002 f9c7 	bl	8007e84 <memset>
 8005af6:	2201      	movs	r2, #1
 8005af8:	9206      	str	r2, [sp, #24]
 8005afa:	e6f5      	b.n	80058e8 <VL6180x_RangeGetMeasurement+0x2b8>
	uint16_t filterErrorCode = NoError;
 8005afc:	2300      	movs	r3, #0
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit2)) {
 8005afe:	f1bb 0fa4 	cmp.w	fp, #164	; 0xa4
	uint16_t filterErrorCode = NoError;
 8005b02:	9302      	str	r3, [sp, #8]
	uint16_t SuspicuousRangingZone = 0;
 8005b04:	bf88      	it	hi
 8005b06:	9307      	strhi	r3, [sp, #28]
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit2)) {
 8005b08:	f63f aec2 	bhi.w	8005890 <VL6180x_RangeGetMeasurement+0x260>
 8005b0c:	e6a8      	b.n	8005860 <VL6180x_RangeGetMeasurement+0x230>
	uint16_t resetVAVGData = 1;
 8005b0e:	f04f 0a01 	mov.w	sl, #1
		bypassFilter = 1;
 8005b12:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005b16:	e715      	b.n	8005944 <VL6180x_RangeGetMeasurement+0x314>
 8005b18:	1a41a41b 	.word	0x1a41a41b
 8005b1c:	20000028 	.word	0x20000028
 8005b20:	2000003c 	.word	0x2000003c
 8005b24:	2000002a 	.word	0x2000002a
 8005b28:	7ca3      	ldrb	r3, [r4, #18]
 8005b2a:	4a49      	ldr	r2, [pc, #292]	; (8005c50 <VL6180x_RangeGetMeasurement+0x620>)
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
	if (rate > 0) {
 8005b32:	2900      	cmp	r1, #0
 8005b34:	f000 8216 	beq.w	8005f64 <VL6180x_RangeGetMeasurement+0x934>
		DMaxSq = 400 * 400 * 1000 / rate - (400 * 400 / 330);
 8005b38:	4b46      	ldr	r3, [pc, #280]	; (8005c54 <VL6180x_RangeGetMeasurement+0x624>)
 8005b3a:	fb93 f3f1 	sdiv	r3, r3, r1
		if (DMaxSq <= 0) {
 8005b3e:	f5b3 72f2 	subs.w	r2, r3, #484	; 0x1e4
 8005b42:	d02a      	beq.n	8005b9a <VL6180x_RangeGetMeasurement+0x56a>
	retSignalAt400mm        = _DMaxData(retSignalAt400mm);
 8005b44:	e9d4 172e 	ldrd	r1, r7, [r4, #184]	; 0xb8
 8005b48:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		    if (DMaxSq < (2 << 12)) {
 8005b4c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005b50:	441f      	add	r7, r3
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 8005b52:	bfad      	iteet	ge
 8005b54:	fbb2 f3f7 	udivge	r3, r2, r7
				DMaxSq = DMaxSq * retSignalAt400mm /
 8005b58:	fb02 f301 	mullt.w	r3, r2, r1
 8005b5c:	fbb3 f2f7 	udivlt	r2, r3, r7
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 8005b60:	fb01 f203 	mulge.w	r2, r1, r3
	while (bit > num)
 8005b64:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
		    RawDMax = VL6180x_SqrtUint32(DMaxSq);
 8005b68:	4617      	mov	r7, r2
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 8005b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	while (bit > num)
 8005b6e:	d205      	bcs.n	8005b7c <VL6180x_RangeGetMeasurement+0x54c>
		bit >>= 2;
 8005b70:	089b      	lsrs	r3, r3, #2
	while (bit > num)
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d3fc      	bcc.n	8005b70 <VL6180x_RangeGetMeasurement+0x540>
	while (bit != 0) {
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8251 	beq.w	800601e <VL6180x_RangeGetMeasurement+0x9ee>
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 8005b7c:	2200      	movs	r2, #0
		if (num >= res + bit) {
 8005b7e:	18d1      	adds	r1, r2, r3
 8005b80:	42b9      	cmp	r1, r7
 8005b82:	ea4f 0252 	mov.w	r2, r2, lsr #1
		    num -= res + bit;
 8005b86:	bf9c      	itt	ls
 8005b88:	1a7f      	subls	r7, r7, r1
		    res = (res >> 1) + bit;
 8005b8a:	18d2      	addls	r2, r2, r3
	while (bit != 0) {
 8005b8c:	089b      	lsrs	r3, r3, #2
 8005b8e:	d1f6      	bne.n	8005b7e <VL6180x_RangeGetMeasurement+0x54e>
		if (DMax > _DMaxData(ClipSnrLimit)) {
 8005b90:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
 8005b94:	429a      	cmp	r2, r3
 8005b96:	bfa8      	it	ge
 8005b98:	461a      	movge	r2, r3
		pRange->DMax = DMax;
 8005b9a:	4282      	cmp	r2, r0
 8005b9c:	bfa8      	it	ge
 8005b9e:	4602      	movge	r2, r0
 8005ba0:	61f2      	str	r2, [r6, #28]
 8005ba2:	e5a6      	b.n	80056f2 <VL6180x_RangeGetMeasurement+0xc2>
		status =  VL6180x_RdByte(dev, index, pValue);
 8005ba4:	aa0c      	add	r2, sp, #48	; 0x30
 8005ba6:	2164      	movs	r1, #100	; 0x64
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f000 fced 	bl	8006588 <VL6180x_RdByte>
		if (status) {
 8005bae:	4605      	mov	r5, r0
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	f47f ad94 	bne.w	80056de <VL6180x_RangeGetMeasurement+0xae>
 8005bb6:	e9d6 3903 	ldrd	r3, r9, [r6, #12]
 8005bba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8005bbe:	9308      	str	r3, [sp, #32]
 8005bc0:	7ca3      	ldrb	r3, [r4, #18]
 8005bc2:	e61f      	b.n	8005804 <VL6180x_RangeGetMeasurement+0x1d4>
		if (m_rawRange_mm >= MaxOrInvalidDistance) {
 8005bc4:	9b04      	ldr	r3, [sp, #16]
 8005bc6:	455b      	cmp	r3, fp
			ValidDistance = 0;
 8005bc8:	f04f 0300 	mov.w	r3, #0
		if (m_rawRange_mm >= MaxOrInvalidDistance) {
 8005bcc:	f200 81c5 	bhi.w	8005f5a <VL6180x_RangeGetMeasurement+0x92a>
			ValidDistance = 0;
 8005bd0:	9303      	str	r3, [sp, #12]
			bypassFilter = 1; /* Bypass the filter in this case as produced distance is not usable (and also the VAVGVal and ZeroVal values) */
 8005bd2:	f04f 0a01 	mov.w	sl, #1
	uint16_t filterErrorCodeOnRangingErrorCode = NoError;
 8005bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd8:	e631      	b.n	800583e <VL6180x_RangeGetMeasurement+0x20e>
		if (registerValue != 0x3E) {
 8005bda:	9a05      	ldr	r2, [sp, #20]
 8005bdc:	2a3e      	cmp	r2, #62	; 0x3e
 8005bde:	d00a      	beq.n	8005bf6 <VL6180x_RangeGetMeasurement+0x5c6>
			status = VL6180x_WrByte(dev, 0x1AC, 0x3E);
 8005be0:	4638      	mov	r0, r7
 8005be2:	223e      	movs	r2, #62	; 0x3e
 8005be4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8005be8:	9305      	str	r3, [sp, #20]
 8005bea:	f000 fc67 	bl	80064bc <VL6180x_WrByte>
			if (status) {
 8005bee:	9b05      	ldr	r3, [sp, #20]
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	f040 81bd 	bne.w	8005f70 <VL6180x_RangeGetMeasurement+0x940>
		_FilterData(MeasurementIndex) = 0;
 8005bf6:	2200      	movs	r2, #0
	if (bypassFilter == 1) {
 8005bf8:	f1ba 0f01 	cmp.w	sl, #1
		_FilterData(Default_VAVGVal) = register32BitsValue2;
 8005bfc:	e9c4 3817 	strd	r3, r8, [r4, #92]	; 0x5c
		_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8005c00:	e9c4 3819 	strd	r3, r8, [r4, #100]	; 0x64
		_FilterData(MeasurementIndex) = 0;
 8005c04:	6162      	str	r2, [r4, #20]
	if (bypassFilter == 1) {
 8005c06:	d013      	beq.n	8005c30 <VL6180x_RangeGetMeasurement+0x600>
	if(SuspicuousRangingZone==0)
 8005c08:	9907      	ldr	r1, [sp, #28]
	_FilterData(Previous_VAVGDiff) = VAVGDiff;
 8005c0a:	66e2      	str	r2, [r4, #108]	; 0x6c
	if(SuspicuousRangingZone==0)
 8005c0c:	b1c9      	cbz	r1, 8005c42 <VL6180x_RangeGetMeasurement+0x612>
 8005c0e:	461f      	mov	r7, r3
		VAVGDiff = 0;
 8005c10:	4611      	mov	r1, r2
		MAX_VAVGDiff = MAX_VAVGDiff_ROM / SuspicuousMAX_VAVGDiffRatio;
 8005c12:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005c16:	e703      	b.n	8005a20 <VL6180x_RangeGetMeasurement+0x3f0>
	if ((FlushFilter == 1) || ((bypassFilter == 1) && (resetVAVGData == 1))) {
 8005c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	f43f aece 	beq.w	80059bc <VL6180x_RangeGetMeasurement+0x38c>
		if (registerValue != 0x3E) {
 8005c20:	9a05      	ldr	r2, [sp, #20]
 8005c22:	2a3e      	cmp	r2, #62	; 0x3e
 8005c24:	d1dc      	bne.n	8005be0 <VL6180x_RangeGetMeasurement+0x5b0>
		_FilterData(Default_VAVGVal) = register32BitsValue2;
 8005c26:	e9c4 3817 	strd	r3, r8, [r4, #92]	; 0x5c
		_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8005c2a:	e9c4 3819 	strd	r3, r8, [r4, #100]	; 0x64
		_FilterData(MeasurementIndex) = 0;
 8005c2e:	6165      	str	r5, [r4, #20]
		_FilterData(filterError) = filterErrorCode;
 8005c30:	9f02      	ldr	r7, [sp, #8]
		if(filterErrorCode==RangingFiltered)
 8005c32:	2f10      	cmp	r7, #16
		_FilterData(filterError) = filterErrorCode;
 8005c34:	6767      	str	r7, [r4, #116]	; 0x74
		if(filterErrorCode==RangingFiltered)
 8005c36:	f47f af28 	bne.w	8005a8a <VL6180x_RangeGetMeasurement+0x45a>
		m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8005c3a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005c3e:	9301      	str	r3, [sp, #4]
 8005c40:	e723      	b.n	8005a8a <VL6180x_RangeGetMeasurement+0x45a>
 8005c42:	460a      	mov	r2, r1
	if(SuspicuousRangingZone==0)
 8005c44:	461f      	mov	r7, r3
		MAX_VAVGDiff = MAX_VAVGDiff_ROM;
 8005c46:	f44f 60e1 	mov.w	r0, #1800	; 0x708
		IdealVAVGDiff = _FilterData(NoDelay_ZeroVal) - _FilterData(Default_ZeroVal);
 8005c4a:	1afb      	subs	r3, r7, r3
 8005c4c:	e6ec      	b.n	8005a28 <VL6180x_RangeGetMeasurement+0x3f8>
 8005c4e:	bf00      	nop
 8005c50:	0800c430 	.word	0x0800c430
 8005c54:	09896800 	.word	0x09896800
	if (VAVGDiff < MinVAVGDiff || VAVGDiff > MaxVAVGDiff) {
 8005c58:	4403      	add	r3, r0
 8005c5a:	4299      	cmp	r1, r3
 8005c5c:	f63f aeed 	bhi.w	8005a3a <VL6180x_RangeGetMeasurement+0x40a>
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES_AFTER_FLUSH_OR_BYPASS;
 8005c60:	2a01      	cmp	r2, #1
 8005c62:	bf8c      	ite	hi
 8005c64:	2303      	movhi	r3, #3
 8005c66:	2305      	movls	r3, #5
	if (AmbientRate > 0)
 8005c68:	9a08      	ldr	r2, [sp, #32]
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES_AFTER_FLUSH_OR_BYPASS;
 8005c6a:	9306      	str	r3, [sp, #24]
	if (AmbientRate > 0)
 8005c6c:	2a00      	cmp	r2, #0
 8005c6e:	f000 817c 	beq.w	8005f6a <VL6180x_RangeGetMeasurement+0x93a>
		SNR = (uint16_t) ((100 * SignalRate) / AmbientRate);
 8005c72:	2364      	movs	r3, #100	; 0x64
 8005c74:	fb03 f309 	mul.w	r3, r3, r9
 8005c78:	fbb3 f3f2 	udiv	r3, r3, r2
	if (SNR >= StdDevLimitLowLightSNR) {
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	2a1d      	cmp	r2, #29
 8005c80:	4613      	mov	r3, r2
 8005c82:	f200 8172 	bhi.w	8005f6a <VL6180x_RangeGetMeasurement+0x93a>
		if (SNR <= StdDevLimitHighLightSNR)
 8005c86:	2a05      	cmp	r2, #5
 8005c88:	f240 81c5 	bls.w	8006016 <VL6180x_RangeGetMeasurement+0x9e6>
									(SNR - StdDevLimitHighLightSNR) *
 8005c8c:	f240 22ee 	movw	r2, #750	; 0x2ee
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8005c90:	2119      	movs	r1, #25
									(SNR - StdDevLimitHighLightSNR) *
 8005c92:	3b05      	subs	r3, #5
 8005c94:	fb02 f303 	mul.w	r3, r2, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8005c98:	fbb3 f3f1 	udiv	r3, r3, r1
			newStdDev = (uint32_t)(StdDevLimitHighLight -
 8005c9c:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 8005ca0:	9305      	str	r3, [sp, #20]
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ca6:	f8b4 901c 	ldrh.w	r9, [r4, #28]
 8005caa:	4599      	cmp	r9, r3
 8005cac:	f000 819e 	beq.w	8005fec <VL6180x_RangeGetMeasurement+0x9bc>
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8005cb0:	4648      	mov	r0, r9
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005cb2:	2301      	movs	r3, #1
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005cb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005cb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005cba:	f8b4 a01e 	ldrh.w	sl, [r4, #30]
 8005cbe:	458a      	cmp	sl, r1
 8005cc0:	d004      	beq.n	8005ccc <VL6180x_RangeGetMeasurement+0x69c>
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005cc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	b29b      	uxth	r3, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8005cc8:	4450      	add	r0, sl
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005cca:	440a      	add	r2, r1
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005ccc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005cd0:	8c27      	ldrh	r7, [r4, #32]
 8005cd2:	428f      	cmp	r7, r1
 8005cd4:	d004      	beq.n	8005ce0 <VL6180x_RangeGetMeasurement+0x6b0>
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005cd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005cd8:	3301      	adds	r3, #1
 8005cda:	b29b      	uxth	r3, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8005cdc:	4438      	add	r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005cde:	440a      	add	r2, r1
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005ce0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ce4:	8c67      	ldrh	r7, [r4, #34]	; 0x22
 8005ce6:	428f      	cmp	r7, r1
 8005ce8:	d004      	beq.n	8005cf4 <VL6180x_RangeGetMeasurement+0x6c4>
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005cea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005cec:	3301      	adds	r3, #1
 8005cee:	b29b      	uxth	r3, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8005cf0:	4438      	add	r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005cf2:	440a      	add	r2, r1
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005cf8:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
 8005cfa:	428f      	cmp	r7, r1
 8005cfc:	d004      	beq.n	8005d08 <VL6180x_RangeGetMeasurement+0x6d8>
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005cfe:	6c21      	ldr	r1, [r4, #64]	; 0x40
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005d00:	3301      	adds	r3, #1
 8005d02:	b29b      	uxth	r3, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8005d04:	4438      	add	r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005d06:	440a      	add	r2, r1
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005d08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d0c:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
 8005d0e:	428f      	cmp	r7, r1
 8005d10:	d006      	beq.n	8005d20 <VL6180x_RangeGetMeasurement+0x6f0>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005d12:	3301      	adds	r3, #1
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005d14:	6c61      	ldr	r1, [r4, #68]	; 0x44
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005d16:	b29b      	uxth	r3, r3
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005d18:	2b06      	cmp	r3, #6
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8005d1a:	4438      	add	r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005d1c:	440a      	add	r2, r1
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005d1e:	d02e      	beq.n	8005d7e <VL6180x_RangeGetMeasurement+0x74e>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005d20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d24:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8005d26:	428f      	cmp	r7, r1
 8005d28:	d006      	beq.n	8005d38 <VL6180x_RangeGetMeasurement+0x708>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005d2a:	3301      	adds	r3, #1
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005d2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005d2e:	b29b      	uxth	r3, r3
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005d30:	2b06      	cmp	r3, #6
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8005d32:	4438      	add	r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005d34:	440a      	add	r2, r1
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005d36:	d022      	beq.n	8005d7e <VL6180x_RangeGetMeasurement+0x74e>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005d38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d3c:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 8005d3e:	428f      	cmp	r7, r1
 8005d40:	d006      	beq.n	8005d50 <VL6180x_RangeGetMeasurement+0x720>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005d42:	3301      	adds	r3, #1
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005d44:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005d46:	b29b      	uxth	r3, r3
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005d48:	2b06      	cmp	r3, #6
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8005d4a:	4438      	add	r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005d4c:	440a      	add	r2, r1
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005d4e:	d016      	beq.n	8005d7e <VL6180x_RangeGetMeasurement+0x74e>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005d50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d54:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8005d56:	428f      	cmp	r7, r1
 8005d58:	d006      	beq.n	8005d68 <VL6180x_RangeGetMeasurement+0x738>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005d5a:	3301      	adds	r3, #1
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005d5c:	6d21      	ldr	r1, [r4, #80]	; 0x50
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005d5e:	b29b      	uxth	r3, r3
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005d60:	2b06      	cmp	r3, #6
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8005d62:	4438      	add	r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005d64:	440a      	add	r2, r1
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005d66:	d00a      	beq.n	8005d7e <VL6180x_RangeGetMeasurement+0x74e>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005d68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d6c:	8de7      	ldrh	r7, [r4, #46]	; 0x2e
 8005d6e:	428f      	cmp	r7, r1
 8005d70:	f000 8157 	beq.w	8006022 <VL6180x_RangeGetMeasurement+0x9f2>
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005d74:	6d61      	ldr	r1, [r4, #84]	; 0x54
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005d76:	3301      	adds	r3, #1
 8005d78:	b29b      	uxth	r3, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8005d7a:	4438      	add	r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8005d7c:	440a      	add	r2, r1
			StdDevDistanceMean = (uint32_t) (StdDevDistanceSum / StdDevSamples);
 8005d7e:	fbb0 f8f3 	udiv	r8, r0, r3
			StdDevRateMean = (uint32_t) (StdDevRateSum / StdDevSamples);
 8005d82:	fbb2 fef3 	udiv	lr, r2, r3
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d8a:	4599      	cmp	r9, r3
 8005d8c:	f000 812a 	beq.w	8005fe4 <VL6180x_RangeGetMeasurement+0x9b4>
									(int) (_FilterData(LastReturnRates)[i] -
 8005d90:	6b23      	ldr	r3, [r4, #48]	; 0x30
									(int)(_FilterData(LastTrueRange)[i] -
 8005d92:	eba9 0708 	sub.w	r7, r9, r8
									(int) (_FilterData(LastReturnRates)[i] -
 8005d96:	eba3 020e 	sub.w	r2, r3, lr
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005d9a:	2301      	movs	r3, #1
											StdDevDistanceMean) *
 8005d9c:	fb07 f707 	mul.w	r7, r7, r7
											StdDevRateMean) *
 8005da0:	fb02 f202 	mul.w	r2, r2, r2
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005da4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005da8:	458a      	cmp	sl, r1
 8005daa:	d00a      	beq.n	8005dc2 <VL6180x_RangeGetMeasurement+0x792>
									(int) (_FilterData(LastReturnRates)[i] -
 8005dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
									(int)(_FilterData(LastTrueRange)[i] -
 8005dae:	ebaa 0008 	sub.w	r0, sl, r8
									(int) (_FilterData(LastReturnRates)[i] -
 8005db2:	eba1 010e 	sub.w	r1, r1, lr
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8005db6:	fb00 7700 	mla	r7, r0, r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8005dba:	fb01 2201 	mla	r2, r1, r1, r2
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	b29b      	uxth	r3, r3
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005dc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005dc6:	8c20      	ldrh	r0, [r4, #32]
 8005dc8:	4288      	cmp	r0, r1
 8005dca:	d00a      	beq.n	8005de2 <VL6180x_RangeGetMeasurement+0x7b2>
									(int) (_FilterData(LastReturnRates)[i] -
 8005dcc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
									(int)(_FilterData(LastTrueRange)[i] -
 8005dce:	eba0 0008 	sub.w	r0, r0, r8
									(int) (_FilterData(LastReturnRates)[i] -
 8005dd2:	eba1 010e 	sub.w	r1, r1, lr
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8005dd6:	fb00 7700 	mla	r7, r0, r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8005dda:	fb01 2201 	mla	r2, r1, r1, r2
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005dde:	3301      	adds	r3, #1
 8005de0:	b29b      	uxth	r3, r3
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005de2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005de6:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8005de8:	4288      	cmp	r0, r1
 8005dea:	d00a      	beq.n	8005e02 <VL6180x_RangeGetMeasurement+0x7d2>
									(int) (_FilterData(LastReturnRates)[i] -
 8005dec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
									(int)(_FilterData(LastTrueRange)[i] -
 8005dee:	eba0 0008 	sub.w	r0, r0, r8
									(int) (_FilterData(LastReturnRates)[i] -
 8005df2:	eba1 010e 	sub.w	r1, r1, lr
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8005df6:	fb00 7700 	mla	r7, r0, r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8005dfa:	fb01 2201 	mla	r2, r1, r1, r2
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005dfe:	3301      	adds	r3, #1
 8005e00:	b29b      	uxth	r3, r3
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005e02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e06:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8005e08:	4288      	cmp	r0, r1
 8005e0a:	d00a      	beq.n	8005e22 <VL6180x_RangeGetMeasurement+0x7f2>
									(int) (_FilterData(LastReturnRates)[i] -
 8005e0c:	6c21      	ldr	r1, [r4, #64]	; 0x40
									(int)(_FilterData(LastTrueRange)[i] -
 8005e0e:	eba0 0008 	sub.w	r0, r0, r8
									(int) (_FilterData(LastReturnRates)[i] -
 8005e12:	eba1 010e 	sub.w	r1, r1, lr
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8005e16:	fb00 7700 	mla	r7, r0, r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8005e1a:	fb01 2201 	mla	r2, r1, r1, r2
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005e1e:	3301      	adds	r3, #1
 8005e20:	b29b      	uxth	r3, r3
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005e22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e26:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8005e28:	4288      	cmp	r0, r1
 8005e2a:	d00d      	beq.n	8005e48 <VL6180x_RangeGetMeasurement+0x818>
									(int) (_FilterData(LastReturnRates)[i] -
 8005e2c:	6c61      	ldr	r1, [r4, #68]	; 0x44
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005e2e:	3301      	adds	r3, #1
 8005e30:	b29b      	uxth	r3, r3
									(int)(_FilterData(LastTrueRange)[i] -
 8005e32:	eba0 0008 	sub.w	r0, r0, r8
									(int) (_FilterData(LastReturnRates)[i] -
 8005e36:	eba1 010e 	sub.w	r1, r1, lr
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005e3a:	2b06      	cmp	r3, #6
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8005e3c:	fb00 7700 	mla	r7, r0, r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8005e40:	fb01 2201 	mla	r2, r1, r1, r2
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005e44:	f000 8098 	beq.w	8005f78 <VL6180x_RangeGetMeasurement+0x948>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005e48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e4c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8005e4e:	4288      	cmp	r0, r1
 8005e50:	d00d      	beq.n	8005e6e <VL6180x_RangeGetMeasurement+0x83e>
									(int) (_FilterData(LastReturnRates)[i] -
 8005e52:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005e54:	3301      	adds	r3, #1
 8005e56:	b29b      	uxth	r3, r3
									(int)(_FilterData(LastTrueRange)[i] -
 8005e58:	eba0 0008 	sub.w	r0, r0, r8
									(int) (_FilterData(LastReturnRates)[i] -
 8005e5c:	eba1 010e 	sub.w	r1, r1, lr
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005e60:	2b06      	cmp	r3, #6
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8005e62:	fb00 7700 	mla	r7, r0, r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8005e66:	fb01 2201 	mla	r2, r1, r1, r2
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005e6a:	f000 8085 	beq.w	8005f78 <VL6180x_RangeGetMeasurement+0x948>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005e6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e72:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8005e74:	4288      	cmp	r0, r1
 8005e76:	d00c      	beq.n	8005e92 <VL6180x_RangeGetMeasurement+0x862>
									(int) (_FilterData(LastReturnRates)[i] -
 8005e78:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	b29b      	uxth	r3, r3
									(int)(_FilterData(LastTrueRange)[i] -
 8005e7e:	eba0 0008 	sub.w	r0, r0, r8
									(int) (_FilterData(LastReturnRates)[i] -
 8005e82:	eba1 010e 	sub.w	r1, r1, lr
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005e86:	2b06      	cmp	r3, #6
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8005e88:	fb00 7700 	mla	r7, r0, r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8005e8c:	fb01 2201 	mla	r2, r1, r1, r2
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005e90:	d072      	beq.n	8005f78 <VL6180x_RangeGetMeasurement+0x948>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005e92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e96:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8005e98:	4288      	cmp	r0, r1
 8005e9a:	d00c      	beq.n	8005eb6 <VL6180x_RangeGetMeasurement+0x886>
									(int) (_FilterData(LastReturnRates)[i] -
 8005e9c:	6d21      	ldr	r1, [r4, #80]	; 0x50
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	b29b      	uxth	r3, r3
									(int)(_FilterData(LastTrueRange)[i] -
 8005ea2:	eba0 0008 	sub.w	r0, r0, r8
									(int) (_FilterData(LastReturnRates)[i] -
 8005ea6:	eba1 010e 	sub.w	r1, r1, lr
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005eaa:	2b06      	cmp	r3, #6
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8005eac:	fb00 7700 	mla	r7, r0, r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8005eb0:	fb01 2201 	mla	r2, r1, r1, r2
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8005eb4:	d060      	beq.n	8005f78 <VL6180x_RangeGetMeasurement+0x948>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8005eb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005eba:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8005ebc:	4288      	cmp	r0, r1
 8005ebe:	d00a      	beq.n	8005ed6 <VL6180x_RangeGetMeasurement+0x8a6>
									(int) (_FilterData(LastReturnRates)[i] -
 8005ec0:	6d61      	ldr	r1, [r4, #84]	; 0x54
									(int)(_FilterData(LastTrueRange)[i] -
 8005ec2:	eba0 0008 	sub.w	r0, r0, r8
									(int) (_FilterData(LastReturnRates)[i] -
 8005ec6:	eba1 010e 	sub.w	r1, r1, lr
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 8005eca:	fb00 7700 	mla	r7, r0, r0, r7
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8005ece:	fb01 2201 	mla	r2, r1, r1, r2
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	b29b      	uxth	r3, r3
		if (StdDevSamples >= StdDevSamplesMinNeeded) {
 8005ed6:	9906      	ldr	r1, [sp, #24]
 8005ed8:	4299      	cmp	r1, r3
 8005eda:	f240 80b5 	bls.w	8006048 <VL6180x_RangeGetMeasurement+0xa18>
	if (ValidDistance == 0) {
 8005ede:	9b03      	ldr	r3, [sp, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f47f adb8 	bne.w	8005a56 <VL6180x_RangeGetMeasurement+0x426>
		if (_FilterData(StdFilteredReads) > 0)
 8005ee6:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 809f 	beq.w	800602e <VL6180x_RangeGetMeasurement+0x9fe>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) - 1);
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 8005ef6:	f1bc 0f00 	cmp.w	ip, #0
 8005efa:	d00b      	beq.n	8005f14 <VL6180x_RangeGetMeasurement+0x8e4>
	_FilterData(filterError) = filterErrorCode;
 8005efc:	2710      	movs	r7, #16
 8005efe:	6767      	str	r7, [r4, #116]	; 0x74
 8005f00:	e69b      	b.n	8005c3a <VL6180x_RangeGetMeasurement+0x60a>
		if (_FilterData(StdFilteredReads) > 0)
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f43f ada7 	beq.w	8005a56 <VL6180x_RangeGetMeasurement+0x426>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) - 1);
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 8005f0e:	f1bc 0f00 	cmp.w	ip, #0
 8005f12:	d117      	bne.n	8005f44 <VL6180x_RangeGetMeasurement+0x914>
 8005f14:	2310      	movs	r3, #16
 8005f16:	9302      	str	r3, [sp, #8]
 8005f18:	9f02      	ldr	r7, [sp, #8]
 8005f1a:	e5a2      	b.n	8005a62 <VL6180x_RangeGetMeasurement+0x432>
					if (StdDevDistance < StdDevLimitWithTargetMove) {
 8005f1c:	4282      	cmp	r2, r0
 8005f1e:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
	if (ValidDistance == 0) {
 8005f22:	9a03      	ldr	r2, [sp, #12]
					if (StdDevDistance < StdDevLimitWithTargetMove) {
 8005f24:	f67f ad8c 	bls.w	8005a40 <VL6180x_RangeGetMeasurement+0x410>
	if (ValidDistance == 0) {
 8005f28:	2a00      	cmp	r2, #0
 8005f2a:	d041      	beq.n	8005fb0 <VL6180x_RangeGetMeasurement+0x980>
				if (_FilterData(StdFilteredReads) > 0) {
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d045      	beq.n	8005fbc <VL6180x_RangeGetMeasurement+0x98c>
					if (_FilterData(StdFilteredReads) > StdFilteredReadsDecrement)
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	f240 8081 	bls.w	8006038 <VL6180x_RangeGetMeasurement+0xa08>
						_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) -
 8005f36:	3b01      	subs	r3, #1
 8005f38:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 8005f3c:	f1bc 0f00 	cmp.w	ip, #0
 8005f40:	f43f ad8d 	beq.w	8005a5e <VL6180x_RangeGetMeasurement+0x42e>
	_FilterData(filterError) = filterErrorCode;
 8005f44:	2710      	movs	r7, #16
		pRangeData->FilteredData.range_mm = FilteredRange;
 8005f46:	9b04      	ldr	r3, [sp, #16]
	_FilterData(filterError) = filterErrorCode;
 8005f48:	6767      	str	r7, [r4, #116]	; 0x74
		pRangeData->FilteredData.filterError= _FilterData(filterError);
 8005f4a:	6277      	str	r7, [r6, #36]	; 0x24
		pRangeData->FilteredData.range_mm = FilteredRange;
 8005f4c:	8433      	strh	r3, [r6, #32]
		pRangeData->FilteredData.rawRange_mm = m_rawRange_mm * scaler;
 8005f4e:	f8a6 b022 	strh.w	fp, [r6, #34]	; 0x22
 8005f52:	e5a4      	b.n	8005a9e <VL6180x_RangeGetMeasurement+0x46e>
	uint16_t resetVAVGData = 1;
 8005f54:	2301      	movs	r3, #1
 8005f56:	9309      	str	r3, [sp, #36]	; 0x24
 8005f58:	e4f4      	b.n	8005944 <VL6180x_RangeGetMeasurement+0x314>
			ValidDistance = 1;
 8005f5a:	2201      	movs	r2, #1
	uint16_t filterErrorCodeOnRangingErrorCode = NoError;
 8005f5c:	9309      	str	r3, [sp, #36]	; 0x24
			ValidDistance = 1;
 8005f5e:	9203      	str	r2, [sp, #12]
	uint16_t bypassFilter = 0;
 8005f60:	469a      	mov	sl, r3
 8005f62:	e46c      	b.n	800583e <VL6180x_RangeGetMeasurement+0x20e>
		if (DMax > _DMaxData(ClipSnrLimit)) {
 8005f64:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
 8005f68:	e617      	b.n	8005b9a <VL6180x_RangeGetMeasurement+0x56a>
		newStdDev = StdDevLimitLowLight;
 8005f6a:	2396      	movs	r3, #150	; 0x96
 8005f6c:	9305      	str	r3, [sp, #20]
 8005f6e:	e698      	b.n	8005ca2 <VL6180x_RangeGetMeasurement+0x672>
 8005f70:	f04f 35ff 	mov.w	r5, #4294967295
 8005f74:	f7ff bbb3 	b.w	80056de <VL6180x_RangeGetMeasurement+0xae>
			StdDevRate = (uint16_t) (StdDevRateSum / StdDevSamples);
 8005f78:	2306      	movs	r3, #6
			StdDevDistance = (uint16_t) (StdDevDistanceSum / StdDevSamples);
 8005f7a:	493b      	ldr	r1, [pc, #236]	; (8006068 <VL6180x_RangeGetMeasurement+0xa38>)
 8005f7c:	fba1 7007 	umull	r7, r0, r1, r7
			StdDevRate = (uint16_t) (StdDevRateSum / StdDevSamples);
 8005f80:	fba1 1202 	umull	r1, r2, r1, r2
 8005f84:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8005f88:	f3c2 028f 	ubfx	r2, r2, #2, #16
				if (StdDevRate < StdDevMovingTargetReturnRateLimit)
 8005f8c:	f640 51ab 	movw	r1, #3499	; 0xdab
 8005f90:	428a      	cmp	r2, r1
 8005f92:	d933      	bls.n	8005ffc <VL6180x_RangeGetMeasurement+0x9cc>
					StdDevLimitWithTargetMove = StdDevMovingTargetStdDevForReturnRateLimit;
 8005f94:	f640 62a6 	movw	r2, #3750	; 0xea6
				if(_FilterData(filterError)==NoError){
 8005f98:	f1bc 0f00 	cmp.w	ip, #0
 8005f9c:	d100      	bne.n	8005fa0 <VL6180x_RangeGetMeasurement+0x970>
					StdDevLimitWithTargetMove = StdDevLimitWithTargetMove * StdDevNoWrapDetectedMultiplier;
 8005f9e:	0092      	lsls	r2, r2, #2
				if (((StdDevDistance * StdDevHighConfidenceSNRLimit) < StdDevLimit) && (StdDevSamples>=FILTER_STDDEV_SAMPLES)) {
 8005fa0:	9905      	ldr	r1, [sp, #20]
 8005fa2:	ebb1 0fc0 	cmp.w	r1, r0, lsl #3
 8005fa6:	d9b9      	bls.n	8005f1c <VL6180x_RangeGetMeasurement+0x8ec>
 8005fa8:	2b06      	cmp	r3, #6
 8005faa:	d1b7      	bne.n	8005f1c <VL6180x_RangeGetMeasurement+0x8ec>
	if (ValidDistance == 0) {
 8005fac:	9b03      	ldr	r3, [sp, #12]
 8005fae:	bb0b      	cbnz	r3, 8005ff4 <VL6180x_RangeGetMeasurement+0x9c4>
		if (_FilterData(StdFilteredReads) > 0)
 8005fb0:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8005fb4:	b113      	cbz	r3, 8005fbc <VL6180x_RangeGetMeasurement+0x98c>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) - 1);
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 8005fbc:	f1bc 0f00 	cmp.w	ip, #0
 8005fc0:	d10a      	bne.n	8005fd8 <VL6180x_RangeGetMeasurement+0x9a8>
 8005fc2:	9b02      	ldr	r3, [sp, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1a7      	bne.n	8005f18 <VL6180x_RangeGetMeasurement+0x8e8>
		pRangeData->FilteredData.range_mm = FilteredRange;
 8005fc8:	9a01      	ldr	r2, [sp, #4]
	_FilterData(filterError) = filterErrorCode;
 8005fca:	6763      	str	r3, [r4, #116]	; 0x74
		pRangeData->FilteredData.range_mm = FilteredRange;
 8005fcc:	8432      	strh	r2, [r6, #32]
		pRangeData->FilteredData.rawRange_mm = m_rawRange_mm * scaler;
 8005fce:	f8a6 b022 	strh.w	fp, [r6, #34]	; 0x22
		pRangeData->FilteredData.filterError= _FilterData(filterError);
 8005fd2:	6273      	str	r3, [r6, #36]	; 0x24
 8005fd4:	f7ff bb82 	b.w	80056dc <VL6180x_RangeGetMeasurement+0xac>
 8005fd8:	9f02      	ldr	r7, [sp, #8]
 8005fda:	463b      	mov	r3, r7
 8005fdc:	e551      	b.n	8005a82 <VL6180x_RangeGetMeasurement+0x452>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) +
 8005fde:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8005fe2:	e538      	b.n	8005a56 <VL6180x_RangeGetMeasurement+0x426>
		StdDevRateSum = 0;
 8005fe4:	2200      	movs	r2, #0
		StdDevDistanceSum = 0;
 8005fe6:	4617      	mov	r7, r2
		StdDevSamples = 0;
 8005fe8:	4613      	mov	r3, r2
 8005fea:	e6db      	b.n	8005da4 <VL6180x_RangeGetMeasurement+0x774>
		StdDevRateSum = 0;
 8005fec:	2200      	movs	r2, #0
		StdDevDistanceSum = 0;
 8005fee:	4610      	mov	r0, r2
		StdDevSamples = 0;
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	e660      	b.n	8005cb6 <VL6180x_RangeGetMeasurement+0x686>
					_FilterData(StdFilteredReads) = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8005ffa:	e7df      	b.n	8005fbc <VL6180x_RangeGetMeasurement+0x98c>
							StdDevLimit) * StdDevRate) /
 8005ffc:	f640 57ac 	movw	r7, #3500	; 0xdac
						(((StdDevMovingTargetStdDevForReturnRateLimit -
 8006000:	9905      	ldr	r1, [sp, #20]
 8006002:	f5c1 616a 	rsb	r1, r1, #3744	; 0xea0
 8006006:	3106      	adds	r1, #6
							StdDevLimit) * StdDevRate) /
 8006008:	fb02 f201 	mul.w	r2, r2, r1
 800600c:	fbb2 f2f7 	udiv	r2, r2, r7
					StdDevLimitWithTargetMove = StdDevLimit +
 8006010:	9905      	ldr	r1, [sp, #20]
 8006012:	440a      	add	r2, r1
 8006014:	e7c0      	b.n	8005f98 <VL6180x_RangeGetMeasurement+0x968>
			newStdDev = StdDevLimitHighLight;
 8006016:	f44f 7361 	mov.w	r3, #900	; 0x384
 800601a:	9305      	str	r3, [sp, #20]
 800601c:	e641      	b.n	8005ca2 <VL6180x_RangeGetMeasurement+0x672>
	uint32_t res = 0;
 800601e:	461a      	mov	r2, r3
 8006020:	e5b6      	b.n	8005b90 <VL6180x_RangeGetMeasurement+0x560>
		if (StdDevSamples > 0) {
 8006022:	2b00      	cmp	r3, #0
 8006024:	f47f aeab 	bne.w	8005d7e <VL6180x_RangeGetMeasurement+0x74e>
		StdDevRateMean = 0;
 8006028:	469e      	mov	lr, r3
		StdDevDistanceMean = 0;
 800602a:	4698      	mov	r8, r3
 800602c:	e6ab      	b.n	8005d86 <VL6180x_RangeGetMeasurement+0x756>
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 800602e:	f1bc 0f00 	cmp.w	ip, #0
 8006032:	f43f af6f 	beq.w	8005f14 <VL6180x_RangeGetMeasurement+0x8e4>
 8006036:	e785      	b.n	8005f44 <VL6180x_RangeGetMeasurement+0x914>
						_FilterData(StdFilteredReads) = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 800603e:	f1bc 0f00 	cmp.w	ip, #0
 8006042:	f43f ad0c 	beq.w	8005a5e <VL6180x_RangeGetMeasurement+0x42e>
 8006046:	e77d      	b.n	8005f44 <VL6180x_RangeGetMeasurement+0x914>
			StdDevDistance = (uint16_t) (StdDevDistanceSum / StdDevSamples);
 8006048:	fbb7 f0f3 	udiv	r0, r7, r3
			StdDevRate = (uint16_t) (StdDevRateSum / StdDevSamples);
 800604c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006050:	b280      	uxth	r0, r0
 8006052:	b292      	uxth	r2, r2
 8006054:	e79a      	b.n	8005f8c <VL6180x_RangeGetMeasurement+0x95c>
 8006056:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006058:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800605c:	f7ff bb1d 	b.w	800569a <VL6180x_RangeGetMeasurement+0x6a>
 8006060:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8006064:	f7ff bb16 	b.w	8005694 <VL6180x_RangeGetMeasurement+0x64>
 8006068:	aaaaaaab 	.word	0xaaaaaaab

0800606c <VL6180x_RangeGetMeasurementIfReady>:
{
 800606c:	b530      	push	{r4, r5, lr}
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 800606e:	4b17      	ldr	r3, [pc, #92]	; (80060cc <VL6180x_RangeGetMeasurementIfReady+0x60>)
{
 8006070:	b083      	sub	sp, #12
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 8006072:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
{
 8006076:	460c      	mov	r4, r1
 8006078:	4605      	mov	r5, r0
	if (VL6180xDevDataGet(dev, CacheFilled) != 0 &&
 800607a:	b1da      	cbz	r2, 80060b4 <VL6180x_RangeGetMeasurementIfReady+0x48>
	*pIntStatus = IntStatus & 0xC7;
 800607c:	f893 007b 	ldrb.w	r0, [r3, #123]	; 0x7b
 8006080:	f000 00c7 	and.w	r0, r0, #199	; 0xc7
		if (IntStatus.status.Range == RES_INT_STAT_GPIO_NEW_SAMPLE_READY ||
 8006084:	f000 0307 	and.w	r3, r0, #7
 8006088:	2b04      	cmp	r3, #4
 800608a:	d006      	beq.n	800609a <VL6180x_RangeGetMeasurementIfReady+0x2e>
 800608c:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 8006090:	d103      	bne.n	800609a <VL6180x_RangeGetMeasurementIfReady+0x2e>
			pRangeData->errorStatus = DataNotReady;
 8006092:	2312      	movs	r3, #18
 8006094:	60a3      	str	r3, [r4, #8]
}
 8006096:	b003      	add	sp, #12
 8006098:	bd30      	pop	{r4, r5, pc}
			status = VL6180x_RangeGetMeasurement(dev, pRangeData);
 800609a:	4621      	mov	r1, r4
 800609c:	4628      	mov	r0, r5
 800609e:	f7ff fac7 	bl	8005630 <VL6180x_RangeGetMeasurement>
			if (status == 0) {
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d1f7      	bne.n	8006096 <VL6180x_RangeGetMeasurementIfReady+0x2a>
		status = VL6180x_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 80060a6:	4628      	mov	r0, r5
 80060a8:	2201      	movs	r2, #1
 80060aa:	2115      	movs	r1, #21
 80060ac:	f000 fa06 	bl	80064bc <VL6180x_WrByte>
}
 80060b0:	b003      	add	sp, #12
 80060b2:	bd30      	pop	{r4, r5, pc}
		status =  VL6180x_RdByte(dev, index, pValue);
 80060b4:	f10d 0207 	add.w	r2, sp, #7
 80060b8:	214f      	movs	r1, #79	; 0x4f
 80060ba:	f000 fa65 	bl	8006588 <VL6180x_RdByte>
	*pIntStatus = IntStatus & 0xC7;
 80060be:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (status == 0) {
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d1e7      	bne.n	8006096 <VL6180x_RangeGetMeasurementIfReady+0x2a>
	*pIntStatus = IntStatus & 0xC7;
 80060c6:	f003 00c7 	and.w	r0, r3, #199	; 0xc7
 80060ca:	e7db      	b.n	8006084 <VL6180x_RangeGetMeasurementIfReady+0x18>
 80060cc:	2000000c 	.word	0x2000000c

080060d0 <VL6180x_FilterSetState>:
	VL6180xDevDataSet(dev, WrapAroundFilterActive, state);
 80060d0:	4b01      	ldr	r3, [pc, #4]	; (80060d8 <VL6180x_FilterSetState+0x8>)
}
 80060d2:	2000      	movs	r0, #0
	VL6180xDevDataSet(dev, WrapAroundFilterActive, state);
 80060d4:	74d9      	strb	r1, [r3, #19]
}
 80060d6:	4770      	bx	lr
 80060d8:	2000000c 	.word	0x2000000c

080060dc <VL6180x_ClearInterrupt>:
	if (IntClear <= 7) {
 80060dc:	2907      	cmp	r1, #7
 80060de:	d803      	bhi.n	80060e8 <VL6180x_ClearInterrupt+0xc>
		status = VL6180x_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 80060e0:	460a      	mov	r2, r1
 80060e2:	2115      	movs	r1, #21
 80060e4:	f000 b9ea 	b.w	80064bc <VL6180x_WrByte>
}
 80060e8:	f06f 0001 	mvn.w	r0, #1
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop

080060f0 <VL6180x_UpscaleRegInit>:
{
 80060f0:	b510      	push	{r4, lr}
 80060f2:	4604      	mov	r4, r0
	VL6180x_WrByte(dev, 0x0207, 0x01);
 80060f4:	2201      	movs	r2, #1
 80060f6:	f240 2107 	movw	r1, #519	; 0x207
 80060fa:	f000 f9df 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0208, 0x01);
 80060fe:	2201      	movs	r2, #1
 8006100:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006104:	4620      	mov	r0, r4
 8006106:	f000 f9d9 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0096, 0x00);
 800610a:	2200      	movs	r2, #0
 800610c:	2196      	movs	r1, #150	; 0x96
 800610e:	4620      	mov	r0, r4
 8006110:	f000 f9d4 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0097, 0x54);
 8006114:	2254      	movs	r2, #84	; 0x54
 8006116:	2197      	movs	r1, #151	; 0x97
 8006118:	4620      	mov	r0, r4
 800611a:	f000 f9cf 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e3, 0x00);
 800611e:	2200      	movs	r2, #0
 8006120:	21e3      	movs	r1, #227	; 0xe3
 8006122:	4620      	mov	r0, r4
 8006124:	f000 f9ca 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e4, 0x04);
 8006128:	2204      	movs	r2, #4
 800612a:	21e4      	movs	r1, #228	; 0xe4
 800612c:	4620      	mov	r0, r4
 800612e:	f000 f9c5 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e5, 0x02);
 8006132:	2202      	movs	r2, #2
 8006134:	21e5      	movs	r1, #229	; 0xe5
 8006136:	4620      	mov	r0, r4
 8006138:	f000 f9c0 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e6, 0x01);
 800613c:	2201      	movs	r2, #1
 800613e:	21e6      	movs	r1, #230	; 0xe6
 8006140:	4620      	mov	r0, r4
 8006142:	f000 f9bb 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00e7, 0x03);
 8006146:	2203      	movs	r2, #3
 8006148:	21e7      	movs	r1, #231	; 0xe7
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f9b6 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00f5, 0x02);
 8006150:	2202      	movs	r2, #2
 8006152:	21f5      	movs	r1, #245	; 0xf5
 8006154:	4620      	mov	r0, r4
 8006156:	f000 f9b1 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00d9, 0x05);
 800615a:	2205      	movs	r2, #5
 800615c:	21d9      	movs	r1, #217	; 0xd9
 800615e:	4620      	mov	r0, r4
 8006160:	f000 f9ac 	bl	80064bc <VL6180x_WrByte>
	CalValue = VL6180xDevDataGet(dev, Part2PartAmbNVM);
 8006164:	4b4d      	ldr	r3, [pc, #308]	; (800629c <VL6180x_UpscaleRegInit+0x1ac>)
	status = VL6180x_WrDWord(dev, 0xDA, CalValue);
 8006166:	21da      	movs	r1, #218	; 0xda
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	4620      	mov	r0, r4
 800616c:	f000 f9ca 	bl	8006504 <VL6180x_WrDWord>
	VL6180x_WrByte(dev, 0x009f, 0x00);
 8006170:	2200      	movs	r2, #0
 8006172:	219f      	movs	r1, #159	; 0x9f
 8006174:	4620      	mov	r0, r4
 8006176:	f000 f9a1 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00a3, 0x28);
 800617a:	2228      	movs	r2, #40	; 0x28
 800617c:	21a3      	movs	r1, #163	; 0xa3
 800617e:	4620      	mov	r0, r4
 8006180:	f000 f99c 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b7, 0x00);
 8006184:	2200      	movs	r2, #0
 8006186:	21b7      	movs	r1, #183	; 0xb7
 8006188:	4620      	mov	r0, r4
 800618a:	f000 f997 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00bb, 0x28);
 800618e:	2228      	movs	r2, #40	; 0x28
 8006190:	21bb      	movs	r1, #187	; 0xbb
 8006192:	4620      	mov	r0, r4
 8006194:	f000 f992 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00b2, 0x09);
 8006198:	2209      	movs	r2, #9
 800619a:	21b2      	movs	r1, #178	; 0xb2
 800619c:	4620      	mov	r0, r4
 800619e:	f000 f98d 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ca, 0x09);
 80061a2:	2209      	movs	r2, #9
 80061a4:	21ca      	movs	r1, #202	; 0xca
 80061a6:	4620      	mov	r0, r4
 80061a8:	f000 f988 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0198, 0x01);
 80061ac:	2201      	movs	r2, #1
 80061ae:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 f982 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01b0, 0x17);
 80061b8:	2217      	movs	r2, #23
 80061ba:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80061be:	4620      	mov	r0, r4
 80061c0:	f000 f97c 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ad, 0x00);
 80061c4:	2200      	movs	r2, #0
 80061c6:	f240 11ad 	movw	r1, #429	; 0x1ad
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 f976 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x00ff, 0x05);
 80061d0:	2205      	movs	r2, #5
 80061d2:	21ff      	movs	r1, #255	; 0xff
 80061d4:	4620      	mov	r0, r4
 80061d6:	f000 f971 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0100, 0x05);
 80061da:	2205      	movs	r2, #5
 80061dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 f96b 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0199, 0x05);
 80061e6:	2205      	movs	r2, #5
 80061e8:	f240 1199 	movw	r1, #409	; 0x199
 80061ec:	4620      	mov	r0, r4
 80061ee:	f000 f965 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a6, 0x1b);
 80061f2:	221b      	movs	r2, #27
 80061f4:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 f95f 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01ac, 0x3e);
 80061fe:	223e      	movs	r2, #62	; 0x3e
 8006200:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8006204:	4620      	mov	r0, r4
 8006206:	f000 f959 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x01a7, 0x1f);
 800620a:	221f      	movs	r2, #31
 800620c:	f240 11a7 	movw	r1, #423	; 0x1a7
 8006210:	4620      	mov	r0, r4
 8006212:	f000 f953 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0030, 0x00);
 8006216:	2200      	movs	r2, #0
 8006218:	2130      	movs	r1, #48	; 0x30
 800621a:	4620      	mov	r0, r4
 800621c:	f000 f94e 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0011, 0x10);
 8006220:	2210      	movs	r2, #16
 8006222:	2111      	movs	r1, #17
 8006224:	4620      	mov	r0, r4
 8006226:	f000 f949 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x010a, 0x30);
 800622a:	2230      	movs	r2, #48	; 0x30
 800622c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006230:	4620      	mov	r0, r4
 8006232:	f000 f943 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003f, 0x46);
 8006236:	2246      	movs	r2, #70	; 0x46
 8006238:	213f      	movs	r1, #63	; 0x3f
 800623a:	4620      	mov	r0, r4
 800623c:	f000 f93e 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0031, 0xFF);
 8006240:	22ff      	movs	r2, #255	; 0xff
 8006242:	2131      	movs	r1, #49	; 0x31
 8006244:	4620      	mov	r0, r4
 8006246:	f000 f939 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0040, 0x63);
 800624a:	2263      	movs	r2, #99	; 0x63
 800624c:	2140      	movs	r1, #64	; 0x40
 800624e:	4620      	mov	r0, r4
 8006250:	f000 f934 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002e, 0x01);
 8006254:	2201      	movs	r2, #1
 8006256:	212e      	movs	r1, #46	; 0x2e
 8006258:	4620      	mov	r0, r4
 800625a:	f000 f92f 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x002c, 0xff);
 800625e:	22ff      	movs	r2, #255	; 0xff
 8006260:	212c      	movs	r1, #44	; 0x2c
 8006262:	4620      	mov	r0, r4
 8006264:	f000 f92a 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x001b, 0x09);
 8006268:	2209      	movs	r2, #9
 800626a:	211b      	movs	r1, #27
 800626c:	4620      	mov	r0, r4
 800626e:	f000 f925 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x003e, 0x31);
 8006272:	2231      	movs	r2, #49	; 0x31
 8006274:	213e      	movs	r1, #62	; 0x3e
 8006276:	4620      	mov	r0, r4
 8006278:	f000 f920 	bl	80064bc <VL6180x_WrByte>
	VL6180x_WrByte(dev, 0x0014, 0x24);
 800627c:	2224      	movs	r2, #36	; 0x24
 800627e:	2114      	movs	r1, #20
 8006280:	4620      	mov	r0, r4
 8006282:	f000 f91b 	bl	80064bc <VL6180x_WrByte>
		status = VL6180x_WrByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 8006286:	4620      	mov	r0, r4
 8006288:	2232      	movs	r2, #50	; 0x32
 800628a:	211c      	movs	r1, #28
 800628c:	f000 f916 	bl	80064bc <VL6180x_WrByte>
		if (status) {
 8006290:	b910      	cbnz	r0, 8006298 <VL6180x_UpscaleRegInit+0x1a8>
 8006292:	4620      	mov	r0, r4
 8006294:	f7ff f90a 	bl	80054ac <VL6180x_RangeSetMaxConvergenceTime.part.6>
}
 8006298:	2000      	movs	r0, #0
 800629a:	bd10      	pop	{r4, pc}
 800629c:	2000000c 	.word	0x2000000c

080062a0 <VL6180x_UpscaleSetScaling>:
	if (scaling >= min_scaling  && scaling <= max_scaling) {
 80062a0:	1e4b      	subs	r3, r1, #1
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	2a02      	cmp	r2, #2
 80062a6:	d83e      	bhi.n	8006326 <VL6180x_UpscaleSetScaling+0x86>
{
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	460c      	mov	r4, r1
		Scaler = ScalerLookUP[scaling - 1];
 80062ac:	4a1f      	ldr	r2, [pc, #124]	; (800632c <VL6180x_UpscaleSetScaling+0x8c>)
		_SetUpscale(dev, scaling);
 80062ae:	4d20      	ldr	r5, [pc, #128]	; (8006330 <VL6180x_UpscaleSetScaling+0x90>)
		status = VL6180x_WrWord(dev, RANGE_SCALER, Scaler);
 80062b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80062b4:	2196      	movs	r1, #150	; 0x96
 80062b6:	4606      	mov	r6, r0
 80062b8:	f000 f910 	bl	80064dc <VL6180x_WrWord>
		Offset = VL6180xDevDataGet(dev, Part2PartOffsetNVM) / scaling;
 80062bc:	f995 20c5 	ldrsb.w	r2, [r5, #197]	; 0xc5
		status = VL6180x_WrByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, Offset);
 80062c0:	2124      	movs	r1, #36	; 0x24
		Offset = VL6180xDevDataGet(dev, Part2PartOffsetNVM) / scaling;
 80062c2:	fb92 f2f4 	sdiv	r2, r2, r4
		status = VL6180x_WrByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, Offset);
 80062c6:	4630      	mov	r0, r6
 80062c8:	b2d2      	uxtb	r2, r2
		_SetUpscale(dev, scaling);
 80062ca:	74ac      	strb	r4, [r5, #18]
		status = VL6180x_WrByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, Offset);
 80062cc:	f000 f8f6 	bl	80064bc <VL6180x_WrByte>
		if (status == 0) {
 80062d0:	b100      	cbz	r0, 80062d4 <VL6180x_UpscaleSetScaling+0x34>
}
 80062d2:	bd70      	pop	{r4, r5, r6, pc}
									DEF_CROSS_TALK_VALID_HEIGHT_VALUE /  scaling);
 80062d4:	2214      	movs	r2, #20
			status = VL6180x_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
 80062d6:	2121      	movs	r1, #33	; 0x21
 80062d8:	fb92 f2f4 	sdiv	r2, r2, r4
 80062dc:	4630      	mov	r0, r6
 80062de:	f000 f8ed 	bl	80064bc <VL6180x_WrByte>
		if( status == 0){
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d1f5      	bne.n	80062d2 <VL6180x_UpscaleSetScaling+0x32>
			if(  VL6180xDevDataGet(dev, RangeIgnore.Enabled) !=0 ){
 80062e6:	7c2b      	ldrb	r3, [r5, #16]
 80062e8:	b16b      	cbz	r3, 8006306 <VL6180x_UpscaleSetScaling+0x66>
				ValidHeight  /= _GetUpscale(dev);
 80062ea:	89aa      	ldrh	r2, [r5, #12]
 80062ec:	7cab      	ldrb	r3, [r5, #18]
				status = VL6180x_WrByte(dev, SYSRANGE_RANGE_IGNORE_VALID_HEIGHT,
 80062ee:	2125      	movs	r1, #37	; 0x25
				ValidHeight  /= _GetUpscale(dev);
 80062f0:	fb92 f2f3 	sdiv	r2, r2, r3
				status = VL6180x_WrByte(dev, SYSRANGE_RANGE_IGNORE_VALID_HEIGHT,
 80062f4:	2aff      	cmp	r2, #255	; 0xff
 80062f6:	bfa8      	it	ge
 80062f8:	22ff      	movge	r2, #255	; 0xff
 80062fa:	4630      	mov	r0, r6
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	f000 f8dd 	bl	80064bc <VL6180x_WrByte>
		if (status == 0) {
 8006302:	2800      	cmp	r0, #0
 8006304:	d1e5      	bne.n	80062d2 <VL6180x_UpscaleSetScaling+0x32>
	status = VL6180x_UpdateByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, ~RANGE_CHECK_ECE_ENABLE_MASK, or_mask);
 8006306:	f1a4 0301 	sub.w	r3, r4, #1
 800630a:	fab3 f383 	clz	r3, r3
 800630e:	4630      	mov	r0, r6
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	22fe      	movs	r2, #254	; 0xfe
 8006314:	212d      	movs	r1, #45	; 0x2d
 8006316:	f000 f90f 	bl	8006538 <VL6180x_UpdateByte>
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 800631a:	2800      	cmp	r0, #0
 800631c:	d1d9      	bne.n	80062d2 <VL6180x_UpscaleSetScaling+0x32>
			status = NOT_GUARANTEED ;
 800631e:	2c01      	cmp	r4, #1
 8006320:	bf18      	it	ne
 8006322:	2003      	movne	r0, #3
}
 8006324:	bd70      	pop	{r4, r5, r6, pc}
		status = INVALID_PARAMS;
 8006326:	f06f 0001 	mvn.w	r0, #1
}
 800632a:	4770      	bx	lr
 800632c:	0800c428 	.word	0x0800c428
 8006330:	2000000c 	.word	0x2000000c

08006334 <VL6180x_Prepare>:
{
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	4605      	mov	r5, r0
		status = VL6180x_UpscaleRegInit(dev);
 8006338:	f7ff feda 	bl	80060f0 <VL6180x_UpscaleRegInit>
	if (!status) {
 800633c:	b950      	cbnz	r0, 8006354 <VL6180x_Prepare+0x20>
 800633e:	4604      	mov	r4, r0
		status = VL6180x_UpscaleSetScaling(dev, _GetUpscale(dev));
 8006340:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <VL6180x_Prepare+0x94>)
 8006342:	4628      	mov	r0, r5
 8006344:	7c99      	ldrb	r1, [r3, #18]
 8006346:	f7ff ffab 	bl	80062a0 <VL6180x_UpscaleSetScaling>
		VL6180x_WrByte(dev, 0x016, 0x00); /* change fresh out of set status to 0 */
 800634a:	4622      	mov	r2, r4
 800634c:	2116      	movs	r1, #22
 800634e:	4628      	mov	r0, r5
 8006350:	f000 f8b4 	bl	80064bc <VL6180x_WrByte>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO,
 8006354:	2304      	movs	r3, #4
 8006356:	22f8      	movs	r2, #248	; 0xf8
 8006358:	2114      	movs	r1, #20
 800635a:	4628      	mov	r0, r5
 800635c:	f000 f8ec 	bl	8006538 <VL6180x_UpdateByte>
		if (status)
 8006360:	4604      	mov	r4, r0
 8006362:	b108      	cbz	r0, 8006368 <VL6180x_Prepare+0x34>
}
 8006364:	4620      	mov	r0, r4
 8006366:	bd70      	pop	{r4, r5, r6, pc}
	status = VL6180x_WrByte(dev, SYSRANGE_THRESH_HIGH, high);
 8006368:	22c8      	movs	r2, #200	; 0xc8
 800636a:	2119      	movs	r1, #25
 800636c:	4628      	mov	r0, r5
 800636e:	f000 f8a5 	bl	80064bc <VL6180x_WrByte>
	if (!status) {
 8006372:	4604      	mov	r4, r0
 8006374:	2800      	cmp	r0, #0
 8006376:	d1f5      	bne.n	8006364 <VL6180x_Prepare+0x30>
		status = VL6180x_WrByte(dev, SYSRANGE_THRESH_LOW, low);
 8006378:	220a      	movs	r2, #10
 800637a:	211a      	movs	r1, #26
 800637c:	4628      	mov	r0, r5
 800637e:	f000 f89d 	bl	80064bc <VL6180x_WrByte>
		if (status) {
 8006382:	4604      	mov	r4, r0
 8006384:	2800      	cmp	r0, #0
 8006386:	d1ed      	bne.n	8006364 <VL6180x_Prepare+0x30>
 8006388:	f04f 33ff 	mov.w	r3, #4294967295
	_FilterData(MeasurementIndex) = 0;
 800638c:	4e0e      	ldr	r6, [pc, #56]	; (80063c8 <VL6180x_Prepare+0x94>)
 800638e:	4621      	mov	r1, r4
 8006390:	2228      	movs	r2, #40	; 0x28
 8006392:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8006396:	6174      	str	r4, [r6, #20]
	_FilterData(Default_VAVGVal) = 0;
 8006398:	e9c6 4417 	strd	r4, r4, [r6, #92]	; 0x5c
	_FilterData(NoDelay_VAVGVal) = 0;
 800639c:	e9c6 4419 	strd	r4, r4, [r6, #100]	; 0x64
	_FilterData(Previous_VAVGDiff) = 0;
 80063a0:	66f4      	str	r4, [r6, #108]	; 0x6c
	_FilterData(StdFilteredReads) = 0;
 80063a2:	f8a6 4058 	strh.w	r4, [r6, #88]	; 0x58
	_FilterData(FilteringOnGoingConsecutiveStates) = 0;
 80063a6:	6734      	str	r4, [r6, #112]	; 0x70
 80063a8:	e9c6 3308 	strd	r3, r3, [r6, #32]
 80063ac:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
 80063b0:	61f3      	str	r3, [r6, #28]
 80063b2:	f001 fd67 	bl	8007e84 <memset>
		status = VL6180x_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 80063b6:	4628      	mov	r0, r5
	_FilterData(MeasurementsSinceLastFlush)=0;
 80063b8:	61b4      	str	r4, [r6, #24]
		status = VL6180x_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 80063ba:	2207      	movs	r2, #7
}
 80063bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		status = VL6180x_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 80063c0:	2115      	movs	r1, #21
 80063c2:	f000 b87b 	b.w	80064bc <VL6180x_WrByte>
 80063c6:	bf00      	nop
 80063c8:	2000000c 	.word	0x2000000c

080063cc <VL6180x_SetupGPIO1>:
	if (((pin == 0) || (pin == 1))  && IsValidGPIOFunction(IntFunction)) {
 80063cc:	f011 0ff7 	tst.w	r1, #247	; 0xf7
 80063d0:	d10a      	bne.n	80063e8 <VL6180x_SetupGPIO1+0x1c>
		if (ActiveHigh)
 80063d2:	2a00      	cmp	r2, #0
 80063d4:	bf14      	ite	ne
 80063d6:	2220      	movne	r2, #32
 80063d8:	2200      	moveq	r2, #0
		value |=  IntFunction << GPIOx_FUNCTIONALITY_SELECT_SHIFT;
 80063da:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
		status = VL6180x_WrByte(dev, RegIndex, value);
 80063de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063e2:	2111      	movs	r1, #17
 80063e4:	f000 b86a 	b.w	80064bc <VL6180x_WrByte>
}
 80063e8:	f06f 0001 	mvn.w	r0, #1
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop

080063f0 <VL6180x_RangeSetMaxConvergenceTime>:
{
 80063f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		status = VL6180x_WrByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 80063f4:	460a      	mov	r2, r1
{
 80063f6:	b082      	sub	sp, #8
		status = VL6180x_WrByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 80063f8:	211c      	movs	r1, #28
{
 80063fa:	4604      	mov	r4, r0
		status = VL6180x_WrByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 80063fc:	f000 f85e 	bl	80064bc <VL6180x_WrByte>
		if (status) {
 8006400:	b110      	cbz	r0, 8006408 <VL6180x_RangeSetMaxConvergenceTime+0x18>
}
 8006402:	b002      	add	sp, #8
 8006404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t ece_factor_m          = VL6180xDevDataGet(dev, EceFactorM);
 8006408:	4b29      	ldr	r3, [pc, #164]	; (80064b0 <VL6180x_RangeSetMaxConvergenceTime+0xc0>)
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 800640a:	f10d 0203 	add.w	r2, sp, #3
 800640e:	211c      	movs	r1, #28
 8006410:	4620      	mov	r0, r4
	uint32_t ece_factor_m          = VL6180xDevDataGet(dev, EceFactorM);
 8006412:	891e      	ldrh	r6, [r3, #8]
	uint32_t ece_factor_d          = VL6180xDevDataGet(dev, EceFactorD);
 8006414:	895d      	ldrh	r5, [r3, #10]
		status = VL6180x_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 8006416:	f000 f8b7 	bl	8006588 <VL6180x_RdByte>
		if (status) {
 800641a:	2800      	cmp	r0, #0
 800641c:	d1f1      	bne.n	8006402 <VL6180x_RangeSetMaxConvergenceTime+0x12>
	status = VL6180x_RdByte(dev, 0x109, &u8);
 800641e:	aa01      	add	r2, sp, #4
 8006420:	f240 1109 	movw	r1, #265	; 0x109
 8006424:	4620      	mov	r0, r4
		maxConv_ms = u8;
 8006426:	f89d 7003 	ldrb.w	r7, [sp, #3]
	status = VL6180x_RdByte(dev, 0x109, &u8);
 800642a:	f000 f8ad 	bl	8006588 <VL6180x_RdByte>
	if (status) {
 800642e:	2800      	cmp	r0, #0
 8006430:	d13a      	bne.n	80064a8 <VL6180x_RangeSetMaxConvergenceTime+0xb8>
	Samples = u8 & cMeasMask;
 8006432:	f89d 8004 	ldrb.w	r8, [sp, #4]
	status = VL6180x_RdByte(dev, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 8006436:	aa01      	add	r2, sp, #4
 8006438:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800643c:	4620      	mov	r0, r4
	Samples = u8 & cMeasMask;
 800643e:	f008 0807 	and.w	r8, r8, #7
	status = VL6180x_RdByte(dev, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 8006442:	f000 f8a1 	bl	8006588 <VL6180x_RdByte>
	if (status) {
 8006446:	bb78      	cbnz	r0, 80064a8 <VL6180x_RangeSetMaxConvergenceTime+0xb8>
	SamplePeriod = u8;
 8006448:	f89d 3004 	ldrb.w	r3, [sp, #4]
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 800644c:	aa01      	add	r2, sp, #4
	SingleTime_us = cFwOverhead_us + cVcpSetupTime_us + (SamplePeriod * 10);
 800644e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	335e      	adds	r3, #94	; 0x5e
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 8006456:	21b8      	movs	r1, #184	; 0xb8
 8006458:	4620      	mov	r0, r4
	TotalAveTime_us = (Samples + 1) * SingleTime_us + cPLL2_StartupDelay_us;
 800645a:	fb08 3803 	mla	r8, r8, r3, r3
		status = VL6180x_RdDWord(dev, 0xB8, &fineThresh);
 800645e:	f000 f8d3 	bl	8006608 <VL6180x_RdDWord>
		if (status) {
 8006462:	2800      	cmp	r0, #0
 8006464:	d1cd      	bne.n	8006402 <VL6180x_RangeSetMaxConvergenceTime+0x12>
		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 8006466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 800646a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 800646e:	fb03 f307 	mul.w	r3, r3, r7
		fineThresh *= 256;
 8006472:	9f01      	ldr	r7, [sp, #4]
		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 8006474:	3bc8      	subs	r3, #200	; 0xc8
		fineThresh *= 256;
 8006476:	023f      	lsls	r7, r7, #8
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 8006478:	fb07 f606 	mul.w	r6, r7, r6
		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 800647c:	eba3 0308 	sub.w	r3, r3, r8
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 8006480:	fb02 f606 	mul.w	r6, r2, r6
 8006484:	fb05 f503 	mul.w	r5, r5, r3
 8006488:	fbb6 f5f5 	udiv	r5, r6, r5
		status = VL6180x_WrWord(dev, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 800648c:	2122      	movs	r1, #34	; 0x22
 800648e:	b2aa      	uxth	r2, r5
 8006490:	4620      	mov	r0, r4
		fineThresh *= 256;
 8006492:	9701      	str	r7, [sp, #4]
		status = VL6180x_WrWord(dev, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 8006494:	f000 f822 	bl	80064dc <VL6180x_WrWord>
		if (status) {
 8006498:	2800      	cmp	r0, #0
 800649a:	d1b2      	bne.n	8006402 <VL6180x_RangeSetMaxConvergenceTime+0x12>
		status = _DMax_InitData(dev);
 800649c:	4620      	mov	r0, r4
 800649e:	f7fe ff53 	bl	8005348 <_DMax_InitData>
}
 80064a2:	b002      	add	sp, #8
 80064a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	e7a9      	b.n	8006402 <VL6180x_RangeSetMaxConvergenceTime+0x12>
 80064ae:	bf00      	nop
 80064b0:	2000000c 	.word	0x2000000c

080064b4 <VL6180x_RangeStartSingleShot>:
		status = VL6180x_WrByte(dev, SYSRANGE_START, mode);
 80064b4:	2201      	movs	r2, #1
 80064b6:	2118      	movs	r1, #24
 80064b8:	f000 b800 	b.w	80064bc <VL6180x_WrByte>

080064bc <VL6180x_WrByte>:
#else
#error "invalid I2C_BUFFER_CONFIG "
#endif


int VL6180x_WrByte(VL6180xDev_t dev, uint16_t index, uint8_t data){
 80064bc:	460b      	mov	r3, r1
 80064be:	b510      	push	{r4, lr}
 80064c0:	b082      	sub	sp, #8
    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
    buffer[0]=index>>8;
    buffer[1]=index&0xFF;
    buffer[2]=data;
 80064c2:	f88d 2002 	strb.w	r2, [sp, #2]
    buffer[0]=index>>8;
 80064c6:	0a0c      	lsrs	r4, r1, #8

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)3);
 80064c8:	2203      	movs	r2, #3
 80064ca:	4669      	mov	r1, sp
    buffer[1]=index&0xFF;
 80064cc:	f88d 3001 	strb.w	r3, [sp, #1]
    buffer[0]=index>>8;
 80064d0:	f88d 4000 	strb.w	r4, [sp]
    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)3);
 80064d4:	f001 f9f2 	bl	80078bc <VL6180x_I2CWrite>
    VL6180x_DoneI2CAcces(dev);
    return status;
}
 80064d8:	b002      	add	sp, #8
 80064da:	bd10      	pop	{r4, pc}

080064dc <VL6180x_WrWord>:

int VL6180x_WrWord(VL6180xDev_t dev, uint16_t index, uint16_t data){
 80064dc:	4613      	mov	r3, r2
 80064de:	b530      	push	{r4, r5, lr}
 80064e0:	b083      	sub	sp, #12
    VL6180x_I2C_USER_VAR

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,4);
    buffer[0]=index>>8;
 80064e2:	0a0d      	lsrs	r5, r1, #8
    buffer[1]=index&0xFF;
    buffer[2]=data>>8;
 80064e4:	0a14      	lsrs	r4, r2, #8
    buffer[1]=index&0xFF;
 80064e6:	f88d 1001 	strb.w	r1, [sp, #1]
    buffer[3]=data&0xFF;

    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)4);
 80064ea:	2204      	movs	r2, #4
 80064ec:	4669      	mov	r1, sp
    buffer[0]=index>>8;
 80064ee:	f88d 5000 	strb.w	r5, [sp]
    buffer[3]=data&0xFF;
 80064f2:	f88d 3003 	strb.w	r3, [sp, #3]
    buffer[2]=data>>8;
 80064f6:	f88d 4002 	strb.w	r4, [sp, #2]
    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)4);
 80064fa:	f001 f9df 	bl	80078bc <VL6180x_I2CWrite>
    VL6180x_DoneI2CAcces(dev);
    return status;
}
 80064fe:	b003      	add	sp, #12
 8006500:	bd30      	pop	{r4, r5, pc}
 8006502:	bf00      	nop

08006504 <VL6180x_WrDWord>:

int VL6180x_WrDWord(VL6180xDev_t dev, uint16_t index, uint32_t data){
 8006504:	4613      	mov	r3, r2
 8006506:	b570      	push	{r4, r5, r6, lr}
    uint8_t *buffer;


    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,6);
    buffer[0]=index>>8;
 8006508:	0a0a      	lsrs	r2, r1, #8
int VL6180x_WrDWord(VL6180xDev_t dev, uint16_t index, uint32_t data){
 800650a:	b082      	sub	sp, #8
    buffer[1]=index&0xFF;
    buffer[2]=data>>24;
 800650c:	0e1e      	lsrs	r6, r3, #24
    buffer[3]=(data>>16)&0xFF;
 800650e:	0c1d      	lsrs	r5, r3, #16
    buffer[1]=index&0xFF;
 8006510:	f88d 1001 	strb.w	r1, [sp, #1]
    buffer[4]=(data>>8)&0xFF;;
 8006514:	0a1c      	lsrs	r4, r3, #8
    buffer[0]=index>>8;
 8006516:	f88d 2000 	strb.w	r2, [sp]
    buffer[5]=data&0xFF;
    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)6);
 800651a:	4669      	mov	r1, sp
 800651c:	2206      	movs	r2, #6
    buffer[5]=data&0xFF;
 800651e:	f88d 3005 	strb.w	r3, [sp, #5]
    buffer[2]=data>>24;
 8006522:	f88d 6002 	strb.w	r6, [sp, #2]
    buffer[3]=(data>>16)&0xFF;
 8006526:	f88d 5003 	strb.w	r5, [sp, #3]
    buffer[4]=(data>>8)&0xFF;;
 800652a:	f88d 4004 	strb.w	r4, [sp, #4]
    status=VL6180x_I2CWrite(dev, buffer,(uint8_t)6);
 800652e:	f001 f9c5 	bl	80078bc <VL6180x_I2CWrite>
    VL6180x_DoneI2CAcces(dev);

    return status;
}
 8006532:	b002      	add	sp, #8
 8006534:	bd70      	pop	{r4, r5, r6, pc}
 8006536:	bf00      	nop

08006538 <VL6180x_UpdateByte>:

int VL6180x_UpdateByte(VL6180xDev_t dev, uint16_t index, uint8_t AndData, uint8_t OrData){
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	460c      	mov	r4, r1
 800653c:	b082      	sub	sp, #8
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,3);
    buffer[0]=index>>8;
 800653e:	0a0d      	lsrs	r5, r1, #8
int VL6180x_UpdateByte(VL6180xDev_t dev, uint16_t index, uint8_t AndData, uint8_t OrData){
 8006540:	4616      	mov	r6, r2
    buffer[1]=index&0xFF;

    status=VL6180x_I2CWrite(dev, (uint8_t *)buffer,(uint8_t)2);
 8006542:	4669      	mov	r1, sp
 8006544:	2202      	movs	r2, #2
    buffer[1]=index&0xFF;
 8006546:	f88d 4001 	strb.w	r4, [sp, #1]
    buffer[0]=index>>8;
 800654a:	f88d 5000 	strb.w	r5, [sp]
int VL6180x_UpdateByte(VL6180xDev_t dev, uint16_t index, uint8_t AndData, uint8_t OrData){
 800654e:	4604      	mov	r4, r0
 8006550:	461d      	mov	r5, r3
    status=VL6180x_I2CWrite(dev, (uint8_t *)buffer,(uint8_t)2);
 8006552:	f001 f9b3 	bl	80078bc <VL6180x_I2CWrite>
    if( !status ){
 8006556:	b108      	cbz	r0, 800655c <VL6180x_UpdateByte+0x24>
    }

    VL6180x_DoneI2CAcces(dev);

    return status;
}
 8006558:	b002      	add	sp, #8
 800655a:	bd70      	pop	{r4, r5, r6, pc}
        status=VL6180x_I2CRead(dev, &buffer[2],1);
 800655c:	2201      	movs	r2, #1
 800655e:	f10d 0102 	add.w	r1, sp, #2
 8006562:	4620      	mov	r0, r4
 8006564:	f001 f9b8 	bl	80078d8 <VL6180x_I2CRead>
        if( !status ){
 8006568:	2800      	cmp	r0, #0
 800656a:	d1f5      	bne.n	8006558 <VL6180x_UpdateByte+0x20>
            buffer[2]=(buffer[2]&AndData)|OrData;
 800656c:	f89d 3002 	ldrb.w	r3, [sp, #2]
            status=VL6180x_I2CWrite(dev, buffer, (uint8_t)3);
 8006570:	4669      	mov	r1, sp
            buffer[2]=(buffer[2]&AndData)|OrData;
 8006572:	401e      	ands	r6, r3
            status=VL6180x_I2CWrite(dev, buffer, (uint8_t)3);
 8006574:	4620      	mov	r0, r4
            buffer[2]=(buffer[2]&AndData)|OrData;
 8006576:	4335      	orrs	r5, r6
            status=VL6180x_I2CWrite(dev, buffer, (uint8_t)3);
 8006578:	2203      	movs	r2, #3
            buffer[2]=(buffer[2]&AndData)|OrData;
 800657a:	f88d 5002 	strb.w	r5, [sp, #2]
            status=VL6180x_I2CWrite(dev, buffer, (uint8_t)3);
 800657e:	f001 f99d 	bl	80078bc <VL6180x_I2CWrite>
}
 8006582:	b002      	add	sp, #8
 8006584:	bd70      	pop	{r4, r5, r6, pc}
 8006586:	bf00      	nop

08006588 <VL6180x_RdByte>:

int VL6180x_RdByte(VL6180xDev_t dev, uint16_t index, uint8_t *data){
 8006588:	460b      	mov	r3, r1
 800658a:	b530      	push	{r4, r5, lr}
 800658c:	b083      	sub	sp, #12
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);
    buffer[0]=index>>8;
 800658e:	0a0c      	lsrs	r4, r1, #8
int VL6180x_RdByte(VL6180xDev_t dev, uint16_t index, uint8_t *data){
 8006590:	4615      	mov	r5, r2
    buffer[1]=index&0xFF;

    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);
 8006592:	4669      	mov	r1, sp
 8006594:	2202      	movs	r2, #2
    buffer[0]=index>>8;
 8006596:	f88d 4000 	strb.w	r4, [sp]
    buffer[1]=index&0xFF;
 800659a:	f88d 3001 	strb.w	r3, [sp, #1]
int VL6180x_RdByte(VL6180xDev_t dev, uint16_t index, uint8_t *data){
 800659e:	4604      	mov	r4, r0
    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);
 80065a0:	f001 f98c 	bl	80078bc <VL6180x_I2CWrite>
    if( !status ){
 80065a4:	b108      	cbz	r0, 80065aa <VL6180x_RdByte+0x22>
        }
    }
    VL6180x_DoneI2CAcces(dev);

    return status;
}
 80065a6:	b003      	add	sp, #12
 80065a8:	bd30      	pop	{r4, r5, pc}
        status=VL6180x_I2CRead(dev, buffer,1);
 80065aa:	4669      	mov	r1, sp
 80065ac:	4620      	mov	r0, r4
 80065ae:	2201      	movs	r2, #1
 80065b0:	f001 f992 	bl	80078d8 <VL6180x_I2CRead>
        if( !status ){
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d1f6      	bne.n	80065a6 <VL6180x_RdByte+0x1e>
            *data=buffer[0];
 80065b8:	f89d 3000 	ldrb.w	r3, [sp]
 80065bc:	702b      	strb	r3, [r5, #0]
}
 80065be:	b003      	add	sp, #12
 80065c0:	bd30      	pop	{r4, r5, pc}
 80065c2:	bf00      	nop

080065c4 <VL6180x_RdWord>:

int VL6180x_RdWord(VL6180xDev_t dev, uint16_t index, uint16_t *data){
 80065c4:	460b      	mov	r3, r1
 80065c6:	b530      	push	{r4, r5, lr}
 80065c8:	b083      	sub	sp, #12
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);

    buffer=VL6180x_GetI2cBuffer(dev,2);
    buffer[0]=index>>8;
 80065ca:	0a0c      	lsrs	r4, r1, #8
int VL6180x_RdWord(VL6180xDev_t dev, uint16_t index, uint16_t *data){
 80065cc:	4615      	mov	r5, r2
    buffer[1]=index&0xFF;

    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);
 80065ce:	4669      	mov	r1, sp
 80065d0:	2202      	movs	r2, #2
    buffer[0]=index>>8;
 80065d2:	f88d 4000 	strb.w	r4, [sp]
    buffer[1]=index&0xFF;
 80065d6:	f88d 3001 	strb.w	r3, [sp, #1]
int VL6180x_RdWord(VL6180xDev_t dev, uint16_t index, uint16_t *data){
 80065da:	4604      	mov	r4, r0
    status=VL6180x_I2CWrite(dev, buffer, (uint8_t)2);
 80065dc:	f001 f96e 	bl	80078bc <VL6180x_I2CWrite>
    if( !status){
 80065e0:	b108      	cbz	r0, 80065e6 <VL6180x_RdWord+0x22>
            *data=((uint16_t)buffer[0]<<8)|(uint16_t)buffer[1];
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
}
 80065e2:	b003      	add	sp, #12
 80065e4:	bd30      	pop	{r4, r5, pc}
        status=VL6180x_I2CRead(dev, buffer,2);
 80065e6:	4669      	mov	r1, sp
 80065e8:	4620      	mov	r0, r4
 80065ea:	2202      	movs	r2, #2
 80065ec:	f001 f974 	bl	80078d8 <VL6180x_I2CRead>
        if( !status ){
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d1f6      	bne.n	80065e2 <VL6180x_RdWord+0x1e>
            *data=((uint16_t)buffer[0]<<8)|(uint16_t)buffer[1];
 80065f4:	f89d 2000 	ldrb.w	r2, [sp]
 80065f8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80065fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006600:	802b      	strh	r3, [r5, #0]
}
 8006602:	b003      	add	sp, #12
 8006604:	bd30      	pop	{r4, r5, pc}
 8006606:	bf00      	nop

08006608 <VL6180x_RdDWord>:

int  VL6180x_RdDWord(VL6180xDev_t dev, uint16_t index, uint32_t *data){
 8006608:	460b      	mov	r3, r1
 800660a:	b530      	push	{r4, r5, lr}
 800660c:	b083      	sub	sp, #12
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,4);

    buffer[0]=index>>8;
 800660e:	0a0c      	lsrs	r4, r1, #8
int  VL6180x_RdDWord(VL6180xDev_t dev, uint16_t index, uint32_t *data){
 8006610:	4615      	mov	r5, r2
    buffer[1]=index&0xFF;

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 8006612:	4669      	mov	r1, sp
 8006614:	2202      	movs	r2, #2
    buffer[0]=index>>8;
 8006616:	f88d 4000 	strb.w	r4, [sp]
    buffer[1]=index&0xFF;
 800661a:	f88d 3001 	strb.w	r3, [sp, #1]
int  VL6180x_RdDWord(VL6180xDev_t dev, uint16_t index, uint32_t *data){
 800661e:	4604      	mov	r4, r0
    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 8006620:	f001 f94c 	bl	80078bc <VL6180x_I2CWrite>
    if( !status ){
 8006624:	b108      	cbz	r0, 800662a <VL6180x_RdDWord+0x22>
            *data=((uint32_t)buffer[0]<<24)|((uint32_t)buffer[1]<<16)|((uint32_t)buffer[2]<<8)|((uint32_t)buffer[3]);
        }
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
}
 8006626:	b003      	add	sp, #12
 8006628:	bd30      	pop	{r4, r5, pc}
        status=VL6180x_I2CRead(dev, buffer,4);
 800662a:	4669      	mov	r1, sp
 800662c:	4620      	mov	r0, r4
 800662e:	2204      	movs	r2, #4
 8006630:	f001 f952 	bl	80078d8 <VL6180x_I2CRead>
        if( !status ){
 8006634:	2800      	cmp	r0, #0
 8006636:	d1f6      	bne.n	8006626 <VL6180x_RdDWord+0x1e>
 8006638:	9b00      	ldr	r3, [sp, #0]
 800663a:	ba1b      	rev	r3, r3
            *data=((uint32_t)buffer[0]<<24)|((uint32_t)buffer[1]<<16)|((uint32_t)buffer[2]<<8)|((uint32_t)buffer[3]);
 800663c:	602b      	str	r3, [r5, #0]
}
 800663e:	b003      	add	sp, #12
 8006640:	bd30      	pop	{r4, r5, pc}
 8006642:	bf00      	nop

08006644 <VL6180x_RdMulti>:


int  VL6180x_RdMulti(VL6180xDev_t dev, uint16_t index, uint8_t *data, int nData){
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	460c      	mov	r4, r1
 8006648:	b082      	sub	sp, #8
    DECL_I2C_BUFFER

    VL6180x_GetI2CAccess(dev);
    buffer=VL6180x_GetI2cBuffer(dev,2);

    buffer[0]=index>>8;
 800664a:	0a0d      	lsrs	r5, r1, #8
int  VL6180x_RdMulti(VL6180xDev_t dev, uint16_t index, uint8_t *data, int nData){
 800664c:	4616      	mov	r6, r2
    buffer[1]=index&0xFF;

    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 800664e:	4669      	mov	r1, sp
 8006650:	2202      	movs	r2, #2
    buffer[1]=index&0xFF;
 8006652:	f88d 4001 	strb.w	r4, [sp, #1]
    buffer[0]=index>>8;
 8006656:	f88d 5000 	strb.w	r5, [sp]
int  VL6180x_RdMulti(VL6180xDev_t dev, uint16_t index, uint8_t *data, int nData){
 800665a:	4604      	mov	r4, r0
 800665c:	461d      	mov	r5, r3
    status=VL6180x_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 800665e:	f001 f92d 	bl	80078bc <VL6180x_I2CWrite>
    if( !status ){
 8006662:	b920      	cbnz	r0, 800666e <VL6180x_RdMulti+0x2a>
        status=VL6180x_I2CRead(dev, data, nData);
 8006664:	b2ea      	uxtb	r2, r5
 8006666:	4631      	mov	r1, r6
 8006668:	4620      	mov	r0, r4
 800666a:	f001 f935 	bl	80078d8 <VL6180x_I2CRead>
    }
    VL6180x_DoneI2CAcces(dev);
    return status;
}
 800666e:	b002      	add	sp, #8
 8006670:	bd70      	pop	{r4, r5, r6, pc}
 8006672:	bf00      	nop

08006674 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006674:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006676:	f000 f9c3 	bl	8006a00 <vTaskStartScheduler>
  
  return osOK;
}
 800667a:	2000      	movs	r0, #0
 800667c:	bd08      	pop	{r3, pc}
 800667e:	bf00      	nop

08006680 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006680:	b5f0      	push	{r4, r5, r6, r7, lr}
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006682:	e9d0 5605 	ldrd	r5, r6, [r0, #20]
 8006686:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800668a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800668c:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800668e:	bf0c      	ite	eq
 8006690:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8006692:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006694:	6902      	ldr	r2, [r0, #16]
{
 8006696:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006698:	e9d0 1700 	ldrd	r1, r7, [r0]
 800669c:	9400      	str	r4, [sp, #0]
 800669e:	4638      	mov	r0, r7
 80066a0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80066a4:	f000 f982 	bl	80069ac <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80066a8:	b005      	add	sp, #20
 80066aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066ac <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066ac:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066b0:	2200      	movs	r2, #0
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066b2:	f100 0308 	add.w	r3, r0, #8
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066b6:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066b8:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ba:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066bc:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop

080066c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop

080066cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80066cc:	6843      	ldr	r3, [r0, #4]
{
 80066ce:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066d0:	689c      	ldr	r4, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80066d2:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066d4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066d6:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80066d8:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 80066da:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066dc:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066de:	6099      	str	r1, [r3, #8]
}
 80066e0:	bc10      	pop	{r4}
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066e2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80066e4:	6002      	str	r2, [r0, #0]
}
 80066e6:	4770      	bx	lr

080066e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066e8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066ea:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066ec:	1c6b      	adds	r3, r5, #1
 80066ee:	d011      	beq.n	8006714 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066f0:	f100 0208 	add.w	r2, r0, #8
 80066f4:	e000      	b.n	80066f8 <vListInsert+0x10>
 80066f6:	461a      	mov	r2, r3
 80066f8:	6853      	ldr	r3, [r2, #4]
 80066fa:	681c      	ldr	r4, [r3, #0]
 80066fc:	42ac      	cmp	r4, r5
 80066fe:	d9fa      	bls.n	80066f6 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006700:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006702:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8006704:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006706:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006708:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800670a:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800670c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800670e:	6004      	str	r4, [r0, #0]
}
 8006710:	bc30      	pop	{r4, r5}
 8006712:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006714:	6902      	ldr	r2, [r0, #16]
 8006716:	6853      	ldr	r3, [r2, #4]
 8006718:	e7f2      	b.n	8006700 <vListInsert+0x18>
 800671a:	bf00      	nop

0800671c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800671c:	6903      	ldr	r3, [r0, #16]
{
 800671e:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006720:	e9d0 2101 	ldrd	r2, r1, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006724:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006726:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006728:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800672a:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800672c:	604a      	str	r2, [r1, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800672e:	bf08      	it	eq
 8006730:	6059      	streq	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006732:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8006734:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pvContainer = NULL;
 8006736:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006738:	3a01      	subs	r2, #1
 800673a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800673c:	6818      	ldr	r0, [r3, #0]
}
 800673e:	bc10      	pop	{r4}
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop

08006744 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006744:	b580      	push	{r7, lr}
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8006746:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 800674a:	4c11      	ldr	r4, [pc, #68]	; (8006790 <prvIdleTask+0x4c>)
 800674c:	4e11      	ldr	r6, [pc, #68]	; (8006794 <prvIdleTask+0x50>)
 800674e:	4d12      	ldr	r5, [pc, #72]	; (8006798 <prvIdleTask+0x54>)
 8006750:	4f12      	ldr	r7, [pc, #72]	; (800679c <prvIdleTask+0x58>)
 8006752:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80067a0 <prvIdleTask+0x5c>
 8006756:	e00e      	b.n	8006776 <prvIdleTask+0x32>

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 8006758:	f000 fbd4 	bl	8006f04 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800675c:	68f3      	ldr	r3, [r6, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800675e:	68d8      	ldr	r0, [r3, #12]
 8006760:	3004      	adds	r0, #4
 8006762:	f7ff ffdb 	bl	800671c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006766:	682b      	ldr	r3, [r5, #0]
 8006768:	3b01      	subs	r3, #1
 800676a:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	3b01      	subs	r3, #1
 8006770:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8006772:	f000 fbe9 	bl	8006f48 <vPortExitCritical>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1ed      	bne.n	8006758 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d9f9      	bls.n	8006776 <prvIdleTask+0x32>
				taskYIELD();
 8006782:	f8c8 9000 	str.w	r9, [r8]
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	e7f2      	b.n	8006776 <prvIdleTask+0x32>
 8006790:	20000998 	.word	0x20000998
 8006794:	20000a08 	.word	0x20000a08
 8006798:	20000994 	.word	0x20000994
 800679c:	20000908 	.word	0x20000908
 80067a0:	e000ed04 	.word	0xe000ed04

080067a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067a6:	4b1b      	ldr	r3, [pc, #108]	; (8006814 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067a8:	4e1b      	ldr	r6, [pc, #108]	; (8006818 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80067aa:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ac:	6833      	ldr	r3, [r6, #0]
{
 80067ae:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b0:	1d18      	adds	r0, r3, #4
{
 80067b2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b4:	f7ff ffb2 	bl	800671c <uxListRemove>
 80067b8:	b940      	cbnz	r0, 80067cc <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80067ba:	2201      	movs	r2, #1
 80067bc:	6833      	ldr	r3, [r6, #0]
 80067be:	4917      	ldr	r1, [pc, #92]	; (800681c <prvAddCurrentTaskToDelayedList+0x78>)
 80067c0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80067c2:	680b      	ldr	r3, [r1, #0]
 80067c4:	4082      	lsls	r2, r0
 80067c6:	ea23 0302 	bic.w	r3, r3, r2
 80067ca:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067cc:	1c6b      	adds	r3, r5, #1
 80067ce:	d017      	beq.n	8006800 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067d0:	6833      	ldr	r3, [r6, #0]
 80067d2:	1964      	adds	r4, r4, r5
 80067d4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80067d6:	d20b      	bcs.n	80067f0 <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067d8:	4b11      	ldr	r3, [pc, #68]	; (8006820 <prvAddCurrentTaskToDelayedList+0x7c>)
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	6831      	ldr	r1, [r6, #0]
 80067de:	3104      	adds	r1, #4
 80067e0:	f7ff ff82 	bl	80066e8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80067e4:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <prvAddCurrentTaskToDelayedList+0x80>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 80067ea:	bf88      	it	hi
 80067ec:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067f0:	4b0d      	ldr	r3, [pc, #52]	; (8006828 <prvAddCurrentTaskToDelayedList+0x84>)
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	6831      	ldr	r1, [r6, #0]
}
 80067f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067fa:	3104      	adds	r1, #4
 80067fc:	f7ff bf74 	b.w	80066e8 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006800:	2f00      	cmp	r7, #0
 8006802:	d0e5      	beq.n	80067d0 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006804:	6831      	ldr	r1, [r6, #0]
 8006806:	4809      	ldr	r0, [pc, #36]	; (800682c <prvAddCurrentTaskToDelayedList+0x88>)
 8006808:	3104      	adds	r1, #4
}
 800680a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800680e:	f7ff bf5d 	b.w	80066cc <vListInsertEnd>
 8006812:	bf00      	nop
 8006814:	20000a1c 	.word	0x20000a1c
 8006818:	200008fc 	.word	0x200008fc
 800681c:	200009a8 	.word	0x200009a8
 8006820:	20000900 	.word	0x20000900
 8006824:	200009d4 	.word	0x200009d4
 8006828:	20000904 	.word	0x20000904
 800682c:	200009f4 	.word	0x200009f4

08006830 <xTaskCreateStatic.part.5>:
	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	4680      	mov	r8, r0
 8006836:	4699      	mov	r9, r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006838:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 800683c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006840:	3a01      	subs	r2, #1
 8006842:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 8006846:	9d08      	ldr	r5, [sp, #32]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006848:	f022 0607 	bic.w	r6, r2, #7
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800684c:	6323      	str	r3, [r4, #48]	; 0x30
 800684e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8006852:	1e4b      	subs	r3, r1, #1
 8006854:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006856:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800685a:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 800685e:	7818      	ldrb	r0, [r3, #0]
 8006860:	b108      	cbz	r0, 8006866 <xTaskCreateStatic.part.5+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006862:	428b      	cmp	r3, r1
 8006864:	d1f7      	bne.n	8006856 <xTaskCreateStatic.part.5+0x26>
 8006866:	2d06      	cmp	r5, #6
 8006868:	bf28      	it	cs
 800686a:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800686c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006870:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8006872:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006874:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006876:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006878:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800687c:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006880:	f7ff ff20 	bl	80066c4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006884:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006888:	f104 0018 	add.w	r0, r4, #24
 800688c:	f7ff ff1a 	bl	80066c4 <vListInitialiseItem>
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006890:	4641      	mov	r1, r8
 8006892:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006894:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8006896:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800689a:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800689c:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800689e:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068a2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068a4:	f000 fb0a 	bl	8006ebc <pxPortInitialiseStack>
 80068a8:	6020      	str	r0, [r4, #0]
	taskENTER_CRITICAL();
 80068aa:	f000 fb2b 	bl	8006f04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80068ae:	4b31      	ldr	r3, [pc, #196]	; (8006974 <xTaskCreateStatic.part.5+0x144>)
		if( pxCurrentTCB == NULL )
 80068b0:	4931      	ldr	r1, [pc, #196]	; (8006978 <xTaskCreateStatic.part.5+0x148>)
		uxCurrentNumberOfTasks++;
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	460e      	mov	r6, r1
 80068b6:	3201      	adds	r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80068ba:	680d      	ldr	r5, [r1, #0]
 80068bc:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80069a0 <xTaskCreateStatic.part.5+0x170>
 80068c0:	bb25      	cbnz	r5, 800690c <xTaskCreateStatic.part.5+0xdc>
			pxCurrentTCB = pxNewTCB;
 80068c2:	600c      	str	r4, [r1, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d129      	bne.n	800691e <xTaskCreateStatic.part.5+0xee>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068ca:	f04f 0914 	mov.w	r9, #20
 80068ce:	fb09 8005 	mla	r0, r9, r5, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068d2:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068d4:	f7ff feea 	bl	80066ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068d8:	2d07      	cmp	r5, #7
 80068da:	d1f8      	bne.n	80068ce <xTaskCreateStatic.part.5+0x9e>
	vListInitialise( &xDelayedTaskList1 );
 80068dc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80069a4 <xTaskCreateStatic.part.5+0x174>
	vListInitialise( &xDelayedTaskList2 );
 80068e0:	4d26      	ldr	r5, [pc, #152]	; (800697c <xTaskCreateStatic.part.5+0x14c>)
	vListInitialise( &xDelayedTaskList1 );
 80068e2:	4648      	mov	r0, r9
 80068e4:	f7ff fee2 	bl	80066ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068e8:	4628      	mov	r0, r5
 80068ea:	f7ff fedf 	bl	80066ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068ee:	4824      	ldr	r0, [pc, #144]	; (8006980 <xTaskCreateStatic.part.5+0x150>)
 80068f0:	f7ff fedc 	bl	80066ac <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80068f4:	4823      	ldr	r0, [pc, #140]	; (8006984 <xTaskCreateStatic.part.5+0x154>)
 80068f6:	f7ff fed9 	bl	80066ac <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80068fa:	4823      	ldr	r0, [pc, #140]	; (8006988 <xTaskCreateStatic.part.5+0x158>)
 80068fc:	f7ff fed6 	bl	80066ac <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006900:	4a22      	ldr	r2, [pc, #136]	; (800698c <xTaskCreateStatic.part.5+0x15c>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006902:	4b23      	ldr	r3, [pc, #140]	; (8006990 <xTaskCreateStatic.part.5+0x160>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8006904:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006908:	601d      	str	r5, [r3, #0]
 800690a:	e008      	b.n	800691e <xTaskCreateStatic.part.5+0xee>
			if( xSchedulerRunning == pdFALSE )
 800690c:	4b21      	ldr	r3, [pc, #132]	; (8006994 <xTaskCreateStatic.part.5+0x164>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	b92b      	cbnz	r3, 800691e <xTaskCreateStatic.part.5+0xee>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006912:	680b      	ldr	r3, [r1, #0]
 8006914:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800691a:	bf28      	it	cs
 800691c:	600c      	strcs	r4, [r1, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800691e:	2301      	movs	r3, #1
 8006920:	2014      	movs	r0, #20
 8006922:	f8df c084 	ldr.w	ip, [pc, #132]	; 80069a8 <xTaskCreateStatic.part.5+0x178>
 8006926:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		uxTaskNumber++;
 8006928:	4d1b      	ldr	r5, [pc, #108]	; (8006998 <xTaskCreateStatic.part.5+0x168>)
		prvAddTaskToReadyList( pxNewTCB );
 800692a:	f8dc e000 	ldr.w	lr, [ip]
 800692e:	fb00 8002 	mla	r0, r0, r2, r8
 8006932:	4093      	lsls	r3, r2
		uxTaskNumber++;
 8006934:	682a      	ldr	r2, [r5, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006936:	ea43 030e 	orr.w	r3, r3, lr
		uxTaskNumber++;
 800693a:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 800693c:	4639      	mov	r1, r7
 800693e:	f8cc 3000 	str.w	r3, [ip]
		uxTaskNumber++;
 8006942:	602a      	str	r2, [r5, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006944:	f7ff fec2 	bl	80066cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006948:	f000 fafe 	bl	8006f48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800694c:	4b11      	ldr	r3, [pc, #68]	; (8006994 <xTaskCreateStatic.part.5+0x164>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	b163      	cbz	r3, 800696c <xTaskCreateStatic.part.5+0x13c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006952:	6832      	ldr	r2, [r6, #0]
 8006954:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006956:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006958:	429a      	cmp	r2, r3
 800695a:	d207      	bcs.n	800696c <xTaskCreateStatic.part.5+0x13c>
			taskYIELD_IF_USING_PREEMPTION();
 800695c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006960:	4b0e      	ldr	r3, [pc, #56]	; (800699c <xTaskCreateStatic.part.5+0x16c>)
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	f3bf 8f6f 	isb	sy
	}
 800696c:	4620      	mov	r0, r4
 800696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006972:	bf00      	nop
 8006974:	20000994 	.word	0x20000994
 8006978:	200008fc 	.word	0x200008fc
 800697c:	200009c0 	.word	0x200009c0
 8006980:	200009dc 	.word	0x200009dc
 8006984:	20000a08 	.word	0x20000a08
 8006988:	200009f4 	.word	0x200009f4
 800698c:	20000900 	.word	0x20000900
 8006990:	20000904 	.word	0x20000904
 8006994:	200009f0 	.word	0x200009f0
 8006998:	200009a4 	.word	0x200009a4
 800699c:	e000ed04 	.word	0xe000ed04
 80069a0:	20000908 	.word	0x20000908
 80069a4:	200009ac 	.word	0x200009ac
 80069a8:	200009a8 	.word	0x200009a8

080069ac <xTaskCreateStatic>:
	{
 80069ac:	b430      	push	{r4, r5}
 80069ae:	b082      	sub	sp, #8
 80069b0:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
		configASSERT( puxStackBuffer != NULL );
 80069b4:	b1bd      	cbz	r5, 80069e6 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80069b6:	b16c      	cbz	r4, 80069d4 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80069b8:	2454      	movs	r4, #84	; 0x54
 80069ba:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069bc:	9c01      	ldr	r4, [sp, #4]
 80069be:	2c54      	cmp	r4, #84	; 0x54
 80069c0:	d01a      	beq.n	80069f8 <xTaskCreateStatic+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	e7fe      	b.n	80069d2 <xTaskCreateStatic+0x26>
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	e7fe      	b.n	80069e4 <xTaskCreateStatic+0x38>
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	e7fe      	b.n	80069f6 <xTaskCreateStatic+0x4a>
	}
 80069f8:	b002      	add	sp, #8
 80069fa:	bc30      	pop	{r4, r5}
 80069fc:	f7ff bf18 	b.w	8006830 <xTaskCreateStatic.part.5>

08006a00 <vTaskStartScheduler>:
{
 8006a00:	b530      	push	{r4, r5, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a02:	2400      	movs	r4, #0
{
 8006a04:	b089      	sub	sp, #36	; 0x24
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a06:	a905      	add	r1, sp, #20
 8006a08:	aa06      	add	r2, sp, #24
 8006a0a:	a804      	add	r0, sp, #16
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a0c:	e9cd 4404 	strd	r4, r4, [sp, #16]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a10:	f7fa fcc0 	bl	8001394 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a14:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
		configASSERT( puxStackBuffer != NULL );
 8006a18:	b1c3      	cbz	r3, 8006a4c <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 8006a1a:	b171      	cbz	r1, 8006a3a <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a1c:	2254      	movs	r2, #84	; 0x54
 8006a1e:	9207      	str	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a20:	9807      	ldr	r0, [sp, #28]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a22:	9a06      	ldr	r2, [sp, #24]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a24:	2854      	cmp	r0, #84	; 0x54
 8006a26:	d01a      	beq.n	8006a5e <vTaskStartScheduler+0x5e>
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	e7fe      	b.n	8006a38 <vTaskStartScheduler+0x38>
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	e7fe      	b.n	8006a4a <vTaskStartScheduler+0x4a>
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	e7fe      	b.n	8006a5c <vTaskStartScheduler+0x5c>
 8006a5e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8006a62:	9400      	str	r4, [sp, #0]
 8006a64:	4623      	mov	r3, r4
 8006a66:	490d      	ldr	r1, [pc, #52]	; (8006a9c <vTaskStartScheduler+0x9c>)
 8006a68:	480d      	ldr	r0, [pc, #52]	; (8006aa0 <vTaskStartScheduler+0xa0>)
 8006a6a:	f7ff fee1 	bl	8006830 <xTaskCreateStatic.part.5>
		if( xIdleTaskHandle != NULL )
 8006a6e:	b190      	cbz	r0, 8006a96 <vTaskStartScheduler+0x96>
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a80:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 8006a84:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a86:	4807      	ldr	r0, [pc, #28]	; (8006aa4 <vTaskStartScheduler+0xa4>)
		xSchedulerRunning = pdTRUE;
 8006a88:	4a07      	ldr	r2, [pc, #28]	; (8006aa8 <vTaskStartScheduler+0xa8>)
		xTickCount = ( TickType_t ) 0U;
 8006a8a:	4b08      	ldr	r3, [pc, #32]	; (8006aac <vTaskStartScheduler+0xac>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a8c:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 8006a8e:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a90:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006a92:	f000 fac3 	bl	800701c <xPortStartScheduler>
}
 8006a96:	b009      	add	sp, #36	; 0x24
 8006a98:	bd30      	pop	{r4, r5, pc}
 8006a9a:	bf00      	nop
 8006a9c:	0800c59c 	.word	0x0800c59c
 8006aa0:	08006745 	.word	0x08006745
 8006aa4:	200009d4 	.word	0x200009d4
 8006aa8:	200009f0 	.word	0x200009f0
 8006aac:	20000a1c 	.word	0x20000a1c

08006ab0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006ab0:	4b01      	ldr	r3, [pc, #4]	; (8006ab8 <xTaskGetTickCount+0x8>)
 8006ab2:	6818      	ldr	r0, [r3, #0]
}
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	20000a1c 	.word	0x20000a1c

08006abc <xTaskIncrementTick>:
{
 8006abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ac0:	4b49      	ldr	r3, [pc, #292]	; (8006be8 <xTaskIncrementTick+0x12c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	b9cb      	cbnz	r3, 8006afa <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ac6:	4b49      	ldr	r3, [pc, #292]	; (8006bec <xTaskIncrementTick+0x130>)
 8006ac8:	681e      	ldr	r6, [r3, #0]
 8006aca:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006acc:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ace:	b30e      	cbz	r6, 8006b14 <xTaskIncrementTick+0x58>
 8006ad0:	f8df b138 	ldr.w	fp, [pc, #312]	; 8006c0c <xTaskIncrementTick+0x150>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ad4:	f8db 2000 	ldr.w	r2, [fp]
BaseType_t xSwitchRequired = pdFALSE;
 8006ad8:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ada:	42b2      	cmp	r2, r6
 8006adc:	d928      	bls.n	8006b30 <xTaskIncrementTick+0x74>
 8006ade:	4f44      	ldr	r7, [pc, #272]	; (8006bf0 <xTaskIncrementTick+0x134>)
 8006ae0:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8006c10 <xTaskIncrementTick+0x154>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	bf28      	it	cs
 8006af6:	2501      	movcs	r5, #1
 8006af8:	e004      	b.n	8006b04 <xTaskIncrementTick+0x48>
BaseType_t xSwitchRequired = pdFALSE;
 8006afa:	2500      	movs	r5, #0
		++uxPendedTicks;
 8006afc:	4a3d      	ldr	r2, [pc, #244]	; (8006bf4 <xTaskIncrementTick+0x138>)
 8006afe:	6813      	ldr	r3, [r2, #0]
 8006b00:	3301      	adds	r3, #1
 8006b02:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8006b04:	4b3c      	ldr	r3, [pc, #240]	; (8006bf8 <xTaskIncrementTick+0x13c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006b08:	2b00      	cmp	r3, #0
}
 8006b0a:	bf0c      	ite	eq
 8006b0c:	4628      	moveq	r0, r5
 8006b0e:	2001      	movne	r0, #1
 8006b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006b14:	4c39      	ldr	r4, [pc, #228]	; (8006bfc <xTaskIncrementTick+0x140>)
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d047      	beq.n	8006bae <xTaskIncrementTick+0xf2>
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	e7fe      	b.n	8006b2e <xTaskIncrementTick+0x72>
 8006b30:	4c32      	ldr	r4, [pc, #200]	; (8006bfc <xTaskIncrementTick+0x140>)
 8006b32:	4f2f      	ldr	r7, [pc, #188]	; (8006bf0 <xTaskIncrementTick+0x134>)
 8006b34:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8006c10 <xTaskIncrementTick+0x154>
 8006b38:	e02d      	b.n	8006b96 <xTaskIncrementTick+0xda>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	68d2      	ldr	r2, [r2, #12]
 8006b3e:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b42:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b46:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8006b4a:	428e      	cmp	r6, r1
 8006b4c:	d32c      	bcc.n	8006ba8 <xTaskIncrementTick+0xec>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b4e:	4650      	mov	r0, sl
 8006b50:	f7ff fde4 	bl	800671c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b54:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b58:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b5c:	b109      	cbz	r1, 8006b62 <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b5e:	f7ff fddd 	bl	800671c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b62:	2101      	movs	r1, #1
 8006b64:	4a26      	ldr	r2, [pc, #152]	; (8006c00 <xTaskIncrementTick+0x144>)
 8006b66:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8006b6a:	6813      	ldr	r3, [r2, #0]
 8006b6c:	fa01 fc00 	lsl.w	ip, r1, r0
 8006b70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006b74:	4651      	mov	r1, sl
 8006b76:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006b7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8006b7e:	f8c2 c000 	str.w	ip, [r2]
 8006b82:	f7ff fda3 	bl	80066cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b86:	f8d8 0000 	ldr.w	r0, [r8]
 8006b8a:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8006b8e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006b90:	4291      	cmp	r1, r2
 8006b92:	bf28      	it	cs
 8006b94:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	d1cd      	bne.n	8006b3a <xTaskIncrementTick+0x7e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba2:	f8cb 2000 	str.w	r2, [fp]
					break;
 8006ba6:	e79d      	b.n	8006ae4 <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 8006ba8:	f8cb 1000 	str.w	r1, [fp]
						break;
 8006bac:	e79a      	b.n	8006ae4 <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 8006bae:	4b15      	ldr	r3, [pc, #84]	; (8006c04 <xTaskIncrementTick+0x148>)
 8006bb0:	6821      	ldr	r1, [r4, #0]
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	4a14      	ldr	r2, [pc, #80]	; (8006c08 <xTaskIncrementTick+0x14c>)
 8006bb6:	6020      	str	r0, [r4, #0]
 8006bb8:	6019      	str	r1, [r3, #0]
 8006bba:	6813      	ldr	r3, [r2, #0]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	b933      	cbnz	r3, 8006bd4 <xTaskIncrementTick+0x118>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bca:	f8df b040 	ldr.w	fp, [pc, #64]	; 8006c0c <xTaskIncrementTick+0x150>
 8006bce:	f8cb 2000 	str.w	r2, [fp]
 8006bd2:	e77f      	b.n	8006ad4 <xTaskIncrementTick+0x18>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bd4:	6822      	ldr	r2, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bd6:	f8df b034 	ldr.w	fp, [pc, #52]	; 8006c0c <xTaskIncrementTick+0x150>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bda:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bdc:	68d2      	ldr	r2, [r2, #12]
 8006bde:	6852      	ldr	r2, [r2, #4]
 8006be0:	f8cb 2000 	str.w	r2, [fp]
 8006be4:	e776      	b.n	8006ad4 <xTaskIncrementTick+0x18>
 8006be6:	bf00      	nop
 8006be8:	200009a0 	.word	0x200009a0
 8006bec:	20000a1c 	.word	0x20000a1c
 8006bf0:	20000908 	.word	0x20000908
 8006bf4:	2000099c 	.word	0x2000099c
 8006bf8:	20000a20 	.word	0x20000a20
 8006bfc:	20000900 	.word	0x20000900
 8006c00:	200009a8 	.word	0x200009a8
 8006c04:	20000904 	.word	0x20000904
 8006c08:	200009d8 	.word	0x200009d8
 8006c0c:	200009d4 	.word	0x200009d4
 8006c10:	200008fc 	.word	0x200008fc

08006c14 <xTaskResumeAll>:
{
 8006c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8006c18:	4c38      	ldr	r4, [pc, #224]	; (8006cfc <xTaskResumeAll+0xe8>)
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	b943      	cbnz	r3, 8006c30 <xTaskResumeAll+0x1c>
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	e7fe      	b.n	8006c2e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006c30:	f000 f968 	bl	8006f04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c3a:	6824      	ldr	r4, [r4, #0]
 8006c3c:	bb7c      	cbnz	r4, 8006c9e <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c3e:	4b30      	ldr	r3, [pc, #192]	; (8006d00 <xTaskResumeAll+0xec>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	b363      	cbz	r3, 8006c9e <xTaskResumeAll+0x8a>
 8006c44:	4d2f      	ldr	r5, [pc, #188]	; (8006d04 <xTaskResumeAll+0xf0>)
 8006c46:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006d1c <xTaskResumeAll+0x108>
					prvAddTaskToReadyList( pxTCB );
 8006c4a:	4e2f      	ldr	r6, [pc, #188]	; (8006d08 <xTaskResumeAll+0xf4>)
 8006c4c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8006d20 <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c50:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8006d24 <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c54:	f8da 3000 	ldr.w	r3, [sl]
 8006c58:	b33b      	cbz	r3, 8006caa <xTaskResumeAll+0x96>
					prvAddTaskToReadyList( pxTCB );
 8006c5a:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006c5c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006c60:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c62:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c66:	f104 0018 	add.w	r0, r4, #24
 8006c6a:	f7ff fd57 	bl	800671c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c6e:	4640      	mov	r0, r8
 8006c70:	f7ff fd54 	bl	800671c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006c76:	6832      	ldr	r2, [r6, #0]
 8006c78:	fa07 f300 	lsl.w	r3, r7, r0
 8006c7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c80:	4313      	orrs	r3, r2
 8006c82:	4641      	mov	r1, r8
 8006c84:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8006c88:	6033      	str	r3, [r6, #0]
 8006c8a:	f7ff fd1f 	bl	80066cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c8e:	f8db 3000 	ldr.w	r3, [fp]
 8006c92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d3dc      	bcc.n	8006c54 <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 8006c9a:	602f      	str	r7, [r5, #0]
 8006c9c:	e7da      	b.n	8006c54 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8006c9e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006ca0:	f000 f952 	bl	8006f48 <vPortExitCritical>
}
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 8006caa:	b13c      	cbz	r4, 8006cbc <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cac:	4b17      	ldr	r3, [pc, #92]	; (8006d0c <xTaskResumeAll+0xf8>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	b9da      	cbnz	r2, 8006cec <xTaskResumeAll+0xd8>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb8:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <xTaskResumeAll+0xfc>)
 8006cba:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006cbc:	4e15      	ldr	r6, [pc, #84]	; (8006d14 <xTaskResumeAll+0x100>)
 8006cbe:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006cc0:	b13c      	cbz	r4, 8006cd2 <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 8006cc2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006cc4:	f7ff fefa 	bl	8006abc <xTaskIncrementTick>
 8006cc8:	b100      	cbz	r0, 8006ccc <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 8006cca:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ccc:	3c01      	subs	r4, #1
 8006cce:	d1f9      	bne.n	8006cc4 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8006cd0:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8006cd2:	682b      	ldr	r3, [r5, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0e2      	beq.n	8006c9e <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 8006cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cdc:	4b0e      	ldr	r3, [pc, #56]	; (8006d18 <xTaskResumeAll+0x104>)
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006ce8:	2401      	movs	r4, #1
 8006cea:	e7d9      	b.n	8006ca0 <xTaskResumeAll+0x8c>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006cec:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cee:	4b08      	ldr	r3, [pc, #32]	; (8006d10 <xTaskResumeAll+0xfc>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006cf0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cf2:	68d2      	ldr	r2, [r2, #12]
 8006cf4:	6852      	ldr	r2, [r2, #4]
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	e7e0      	b.n	8006cbc <xTaskResumeAll+0xa8>
 8006cfa:	bf00      	nop
 8006cfc:	200009a0 	.word	0x200009a0
 8006d00:	20000994 	.word	0x20000994
 8006d04:	20000a20 	.word	0x20000a20
 8006d08:	200009a8 	.word	0x200009a8
 8006d0c:	20000900 	.word	0x20000900
 8006d10:	200009d4 	.word	0x200009d4
 8006d14:	2000099c 	.word	0x2000099c
 8006d18:	e000ed04 	.word	0xe000ed04
 8006d1c:	200009dc 	.word	0x200009dc
 8006d20:	20000908 	.word	0x20000908
 8006d24:	200008fc 	.word	0x200008fc

08006d28 <vTaskDelayUntil>:
		configASSERT( pxPreviousWakeTime );
 8006d28:	b1b0      	cbz	r0, 8006d58 <vTaskDelayUntil+0x30>
 8006d2a:	460b      	mov	r3, r1
		configASSERT( ( xTimeIncrement > 0U ) );
 8006d2c:	b941      	cbnz	r1, 8006d40 <vTaskDelayUntil+0x18>
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	e7fe      	b.n	8006d3e <vTaskDelayUntil+0x16>
		configASSERT( uxSchedulerSuspended == 0 );
 8006d40:	491c      	ldr	r1, [pc, #112]	; (8006db4 <vTaskDelayUntil+0x8c>)
 8006d42:	680a      	ldr	r2, [r1, #0]
 8006d44:	b18a      	cbz	r2, 8006d6a <vTaskDelayUntil+0x42>
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	e7fe      	b.n	8006d56 <vTaskDelayUntil+0x2e>
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	e7fe      	b.n	8006d68 <vTaskDelayUntil+0x40>
 8006d6a:	4602      	mov	r2, r0
	++uxSchedulerSuspended;
 8006d6c:	6808      	ldr	r0, [r1, #0]
	{
 8006d6e:	b510      	push	{r4, lr}
	++uxSchedulerSuspended;
 8006d70:	3001      	adds	r0, #1
			const TickType_t xConstTickCount = xTickCount;
 8006d72:	4c11      	ldr	r4, [pc, #68]	; (8006db8 <vTaskDelayUntil+0x90>)
	++uxSchedulerSuspended;
 8006d74:	6008      	str	r0, [r1, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006d76:	6811      	ldr	r1, [r2, #0]
			const TickType_t xConstTickCount = xTickCount;
 8006d78:	6820      	ldr	r0, [r4, #0]
 8006d7a:	18cb      	adds	r3, r1, r3
 8006d7c:	bf2c      	ite	cs
 8006d7e:	2401      	movcs	r4, #1
 8006d80:	2400      	movcc	r4, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8006d82:	4281      	cmp	r1, r0
			*pxPreviousWakeTime = xTimeToWake;
 8006d84:	6013      	str	r3, [r2, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8006d86:	d912      	bls.n	8006dae <vTaskDelayUntil+0x86>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006d88:	b12c      	cbz	r4, 8006d96 <vTaskDelayUntil+0x6e>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006d8a:	4298      	cmp	r0, r3
 8006d8c:	d203      	bcs.n	8006d96 <vTaskDelayUntil+0x6e>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006d8e:	1a18      	subs	r0, r3, r0
 8006d90:	2100      	movs	r1, #0
 8006d92:	f7ff fd07 	bl	80067a4 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8006d96:	f7ff ff3d 	bl	8006c14 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006d9a:	b938      	cbnz	r0, 8006dac <vTaskDelayUntil+0x84>
			portYIELD_WITHIN_API();
 8006d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da0:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <vTaskDelayUntil+0x94>)
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	f3bf 8f6f 	isb	sy
	}
 8006dac:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006dae:	2c00      	cmp	r4, #0
 8006db0:	d1ed      	bne.n	8006d8e <vTaskDelayUntil+0x66>
 8006db2:	e7ea      	b.n	8006d8a <vTaskDelayUntil+0x62>
 8006db4:	200009a0 	.word	0x200009a0
 8006db8:	20000a1c 	.word	0x20000a1c
 8006dbc:	e000ed04 	.word	0xe000ed04

08006dc0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dc0:	4b19      	ldr	r3, [pc, #100]	; (8006e28 <vTaskSwitchContext+0x68>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	b9e3      	cbnz	r3, 8006e00 <vTaskSwitchContext+0x40>
		xYieldPending = pdFALSE;
 8006dc6:	4919      	ldr	r1, [pc, #100]	; (8006e2c <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006dc8:	4a19      	ldr	r2, [pc, #100]	; (8006e30 <vTaskSwitchContext+0x70>)
{
 8006dca:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 8006dcc:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006dce:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006dd0:	fab3 f383 	clz	r3, r3
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	f1c3 031f 	rsb	r3, r3, #31
 8006dda:	4816      	ldr	r0, [pc, #88]	; (8006e34 <vTaskSwitchContext+0x74>)
 8006ddc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006de0:	0092      	lsls	r2, r2, #2
 8006de2:	5881      	ldr	r1, [r0, r2]
 8006de4:	1884      	adds	r4, r0, r2
 8006de6:	b179      	cbz	r1, 8006e08 <vTaskSwitchContext+0x48>
 8006de8:	6861      	ldr	r1, [r4, #4]
 8006dea:	3208      	adds	r2, #8
 8006dec:	6849      	ldr	r1, [r1, #4]
 8006dee:	4402      	add	r2, r0
 8006df0:	4291      	cmp	r1, r2
 8006df2:	6061      	str	r1, [r4, #4]
 8006df4:	d011      	beq.n	8006e1a <vTaskSwitchContext+0x5a>
 8006df6:	68ca      	ldr	r2, [r1, #12]
 8006df8:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <vTaskSwitchContext+0x78>)
}
 8006dfa:	bc10      	pop	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006dfc:	601a      	str	r2, [r3, #0]
}
 8006dfe:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8006e00:	2201      	movs	r2, #1
 8006e02:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <vTaskSwitchContext+0x6c>)
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	4770      	bx	lr
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	e7fe      	b.n	8006e18 <vTaskSwitchContext+0x58>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e1a:	2214      	movs	r2, #20
 8006e1c:	fb02 0303 	mla	r3, r2, r3, r0
 8006e20:	6849      	ldr	r1, [r1, #4]
 8006e22:	6059      	str	r1, [r3, #4]
 8006e24:	e7e7      	b.n	8006df6 <vTaskSwitchContext+0x36>
 8006e26:	bf00      	nop
 8006e28:	200009a0 	.word	0x200009a0
 8006e2c:	20000a20 	.word	0x20000a20
 8006e30:	200009a8 	.word	0x200009a8
 8006e34:	20000908 	.word	0x20000908
 8006e38:	200008fc 	.word	0x200008fc

08006e3c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006e3c:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <xTaskGetSchedulerState+0x18>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	b133      	cbz	r3, 8006e50 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <xTaskGetSchedulerState+0x1c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e48:	bf0c      	ite	eq
 8006e4a:	2002      	moveq	r0, #2
 8006e4c:	2000      	movne	r0, #0
 8006e4e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e50:	2001      	movs	r0, #1
	}
 8006e52:	4770      	bx	lr
 8006e54:	200009f0 	.word	0x200009f0
 8006e58:	200009a0 	.word	0x200009a0

08006e5c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8006e5c:	2200      	movs	r2, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e5e:	4b0e      	ldr	r3, [pc, #56]	; (8006e98 <prvTaskExitError+0x3c>)
{
 8006e60:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting == ~0UL );
 8006e62:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0UL;
 8006e64:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006e66:	3301      	adds	r3, #1
 8006e68:	d008      	beq.n	8006e7c <prvTaskExitError+0x20>
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	e7fe      	b.n	8006e7a <prvTaskExitError+0x1e>
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e8c:	9b01      	ldr	r3, [sp, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0fc      	beq.n	8006e8c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e92:	b002      	add	sp, #8
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	20000120 	.word	0x20000120

08006e9c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006e9c:	4806      	ldr	r0, [pc, #24]	; (8006eb8 <prvPortStartFirstTask+0x1c>)
 8006e9e:	6800      	ldr	r0, [r0, #0]
 8006ea0:	6800      	ldr	r0, [r0, #0]
 8006ea2:	f380 8808 	msr	MSP, r0
 8006ea6:	b662      	cpsie	i
 8006ea8:	b661      	cpsie	f
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	df00      	svc	0
 8006eb4:	bf00      	nop
 8006eb6:	0000      	.short	0x0000
 8006eb8:	e000ed08 	.word	0xe000ed08

08006ebc <pxPortInitialiseStack>:
{
 8006ebc:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ebe:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ec2:	4b06      	ldr	r3, [pc, #24]	; (8006edc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ec4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ec8:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ecc:	e940 1402 	strd	r1, r4, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ed0:	f840 3c0c 	str.w	r3, [r0, #-12]
}
 8006ed4:	bc10      	pop	{r4}
 8006ed6:	3840      	subs	r0, #64	; 0x40
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	08006e5d 	.word	0x08006e5d

08006ee0 <SVC_Handler>:
	__asm volatile (
 8006ee0:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <pxCurrentTCBConst2>)
 8006ee2:	6819      	ldr	r1, [r3, #0]
 8006ee4:	6808      	ldr	r0, [r1, #0]
 8006ee6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006eea:	f380 8809 	msr	PSP, r0
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f04f 0000 	mov.w	r0, #0
 8006ef6:	f380 8811 	msr	BASEPRI, r0
 8006efa:	f04e 0e0d 	orr.w	lr, lr, #13
 8006efe:	4770      	bx	lr

08006f00 <pxCurrentTCBConst2>:
 8006f00:	200008fc 	.word	0x200008fc

08006f04 <vPortEnterCritical>:
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f14:	4a0a      	ldr	r2, [pc, #40]	; (8006f40 <vPortEnterCritical+0x3c>)
 8006f16:	6813      	ldr	r3, [r2, #0]
 8006f18:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006f1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006f1e:	d000      	beq.n	8006f22 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8006f20:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f22:	4b08      	ldr	r3, [pc, #32]	; (8006f44 <vPortEnterCritical+0x40>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f2a:	d0f9      	beq.n	8006f20 <vPortEnterCritical+0x1c>
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	e7fe      	b.n	8006f3c <vPortEnterCritical+0x38>
 8006f3e:	bf00      	nop
 8006f40:	20000120 	.word	0x20000120
 8006f44:	e000ed04 	.word	0xe000ed04

08006f48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8006f48:	4a08      	ldr	r2, [pc, #32]	; (8006f6c <vPortExitCritical+0x24>)
 8006f4a:	6813      	ldr	r3, [r2, #0]
 8006f4c:	b943      	cbnz	r3, 8006f60 <vPortExitCritical+0x18>
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	e7fe      	b.n	8006f5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006f60:	3b01      	subs	r3, #1
 8006f62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f64:	b90b      	cbnz	r3, 8006f6a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f66:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f6a:	4770      	bx	lr
 8006f6c:	20000120 	.word	0x20000120

08006f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f70:	f3ef 8009 	mrs	r0, PSP
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <pxCurrentTCBConst>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f80:	6010      	str	r0, [r2, #0]
 8006f82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006f86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f8a:	f380 8811 	msr	BASEPRI, r0
 8006f8e:	f7ff ff17 	bl	8006dc0 <vTaskSwitchContext>
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	6808      	ldr	r0, [r1, #0]
 8006fa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fa6:	f380 8809 	msr	PSP, r0
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	4770      	bx	lr

08006fb0 <pxCurrentTCBConst>:
 8006fb0:	200008fc 	.word	0x200008fc

08006fb4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fb4:	b508      	push	{r3, lr}
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fc6:	f7ff fd79 	bl	8006abc <xTaskIncrementTick>
 8006fca:	b118      	cbz	r0, 8006fd4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd0:	4b02      	ldr	r3, [pc, #8]	; (8006fdc <xPortSysTickHandler+0x28>)
 8006fd2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fda:	bd08      	pop	{r3, pc}
 8006fdc:	e000ed04 	.word	0xe000ed04

08006fe0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fe0:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fe2:	2107      	movs	r1, #7
{
 8006fe4:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fe6:	4a08      	ldr	r2, [pc, #32]	; (8007008 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fe8:	4c08      	ldr	r4, [pc, #32]	; (800700c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fea:	4809      	ldr	r0, [pc, #36]	; (8007010 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fee:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ff0:	6803      	ldr	r3, [r0, #0]
 8006ff2:	4c08      	ldr	r4, [pc, #32]	; (8007014 <vPortSetupTimerInterrupt+0x34>)
 8006ff4:	4808      	ldr	r0, [pc, #32]	; (8007018 <vPortSetupTimerInterrupt+0x38>)
 8006ff6:	fba4 4303 	umull	r4, r3, r4, r3
 8006ffa:	099b      	lsrs	r3, r3, #6
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	6003      	str	r3, [r0, #0]
}
 8007000:	bc10      	pop	{r4}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007002:	6011      	str	r1, [r2, #0]
}
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	e000e010 	.word	0xe000e010
 800700c:	e000e018 	.word	0xe000e018
 8007010:	20000000 	.word	0x20000000
 8007014:	10624dd3 	.word	0x10624dd3
 8007018:	e000e014 	.word	0xe000e014

0800701c <xPortStartScheduler>:
{
 800701c:	b530      	push	{r4, r5, lr}
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800701e:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007020:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007022:	4b27      	ldr	r3, [pc, #156]	; (80070c0 <xPortStartScheduler+0xa4>)
{
 8007024:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007026:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007028:	4926      	ldr	r1, [pc, #152]	; (80070c4 <xPortStartScheduler+0xa8>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800702a:	b2d2      	uxtb	r2, r2
 800702c:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800702e:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007030:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007032:	4825      	ldr	r0, [pc, #148]	; (80070c8 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007034:	b2db      	uxtb	r3, r3
 8007036:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800703a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800703e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007042:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007046:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007048:	0611      	lsls	r1, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800704a:	6004      	str	r4, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800704c:	d510      	bpl.n	8007070 <xPortStartScheduler+0x54>
 800704e:	2306      	movs	r3, #6
 8007050:	e000      	b.n	8007054 <xPortStartScheduler+0x38>
 8007052:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007054:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007058:	1e59      	subs	r1, r3, #1
 800705a:	0052      	lsls	r2, r2, #1
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007062:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007066:	0612      	lsls	r2, r2, #24
 8007068:	d4f3      	bmi.n	8007052 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800706a:	2b03      	cmp	r3, #3
 800706c:	6003      	str	r3, [r0, #0]
 800706e:	d008      	beq.n	8007082 <xPortStartScheduler+0x66>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	e7fe      	b.n	8007080 <xPortStartScheduler+0x64>
	uxCriticalNesting = 0;
 8007082:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007084:	9901      	ldr	r1, [sp, #4]
 8007086:	4d0e      	ldr	r5, [pc, #56]	; (80070c0 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007088:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800708a:	4a10      	ldr	r2, [pc, #64]	; (80070cc <xPortStartScheduler+0xb0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800708c:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800708e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007092:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007094:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007096:	6813      	ldr	r3, [r2, #0]
 8007098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800709c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800709e:	6813      	ldr	r3, [r2, #0]
 80070a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070a4:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 80070a6:	f7ff ff9b 	bl	8006fe0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80070aa:	4b09      	ldr	r3, [pc, #36]	; (80070d0 <xPortStartScheduler+0xb4>)
 80070ac:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80070ae:	f7ff fef5 	bl	8006e9c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80070b2:	f7ff fe85 	bl	8006dc0 <vTaskSwitchContext>
	prvTaskExitError();
 80070b6:	f7ff fed1 	bl	8006e5c <prvTaskExitError>
}
 80070ba:	4620      	mov	r0, r4
 80070bc:	b003      	add	sp, #12
 80070be:	bd30      	pop	{r4, r5, pc}
 80070c0:	e000e400 	.word	0xe000e400
 80070c4:	20000a24 	.word	0x20000a24
 80070c8:	20000a28 	.word	0x20000a28
 80070cc:	e000ed20 	.word	0xe000ed20
 80070d0:	20000120 	.word	0x20000120

080070d4 <readIMU_QuaternionsPacked>:
	int ret;
	if (regNum>4)
		regNum=4;
	else if(regNum<=0)
		regNum=1;
	if ((ret=HAL_I2C_Mem_Read(&hi2c2,IMU_I2C_ADDRESS,regAdd,I2C_MEMADD_SIZE_8BIT,(uint8_t *)IMUReadBuffer,regNum*2,regNum))==HAL_OK){
 80070d4:	2204      	movs	r2, #4
 80070d6:	2308      	movs	r3, #8
{
	return IMU_ReadReg(IMU_WT902_Quaternion_Q0,(uint16_t *)quaternionBuf,4);
}

uint8_t readIMU_QuaternionsPacked( struct QUATERNIONCOMPACT *quaternionPactBuf)
{
 80070d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((ret=HAL_I2C_Mem_Read(&hi2c2,IMU_I2C_ADDRESS,regAdd,I2C_MEMADD_SIZE_8BIT,(uint8_t *)IMUReadBuffer,regNum*2,regNum))==HAL_OK){
 80070da:	4c52      	ldr	r4, [pc, #328]	; (8007224 <readIMU_QuaternionsPacked+0x150>)
{
 80070dc:	b085      	sub	sp, #20
	if ((ret=HAL_I2C_Mem_Read(&hi2c2,IMU_I2C_ADDRESS,regAdd,I2C_MEMADD_SIZE_8BIT,(uint8_t *)IMUReadBuffer,regNum*2,regNum))==HAL_OK){
 80070de:	e9cd 3201 	strd	r3, r2, [sp, #4]
{
 80070e2:	4605      	mov	r5, r0
	if ((ret=HAL_I2C_Mem_Read(&hi2c2,IMU_I2C_ADDRESS,regAdd,I2C_MEMADD_SIZE_8BIT,(uint8_t *)IMUReadBuffer,regNum*2,regNum))==HAL_OK){
 80070e4:	9400      	str	r4, [sp, #0]
 80070e6:	2301      	movs	r3, #1
 80070e8:	2251      	movs	r2, #81	; 0x51
 80070ea:	21a0      	movs	r1, #160	; 0xa0
 80070ec:	484e      	ldr	r0, [pc, #312]	; (8007228 <readIMU_QuaternionsPacked+0x154>)
 80070ee:	f7fc fa5d 	bl	80035ac <HAL_I2C_Mem_Read>
 80070f2:	4606      	mov	r6, r0
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d16f      	bne.n	80071d8 <readIMU_QuaternionsPacked+0x104>
			readBuf[i]=LH2UINT16(IMUReadBuffer[2*i],IMUReadBuffer[2*i+1]);
 80070f8:	78e0      	ldrb	r0, [r4, #3]
 80070fa:	78a2      	ldrb	r2, [r4, #2]
 80070fc:	7863      	ldrb	r3, [r4, #1]
 80070fe:	7821      	ldrb	r1, [r4, #0]
 8007100:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007104:	ea41 2103 	orr.w	r1, r1, r3, lsl #8

void packQuaternion(struct QUATERNION *qOri,struct QUATERNIONCOMPACT *qCom){
	uint16_t maxLoc=0;
	uint16_t *qOriInt16=(uint16_t *)qOri;
	for(int i=0;i<4;i++){
		if(i>0 && abs(qOriInt16[i])>abs(qOriInt16[maxLoc]))
 8007108:	b290      	uxth	r0, r2
			readBuf[i]=LH2UINT16(IMUReadBuffer[2*i],IMUReadBuffer[2*i+1]);
 800710a:	4b48      	ldr	r3, [pc, #288]	; (800722c <readIMU_QuaternionsPacked+0x158>)
		if(i>0 && abs(qOriInt16[i])>abs(qOriInt16[maxLoc]))
 800710c:	4288      	cmp	r0, r1
			readBuf[i]=LH2UINT16(IMUReadBuffer[2*i],IMUReadBuffer[2*i+1]);
 800710e:	8019      	strh	r1, [r3, #0]
		if(i>0 && abs(qOriInt16[i])>abs(qOriInt16[maxLoc]))
 8007110:	f103 0002 	add.w	r0, r3, #2
			readBuf[i]=LH2UINT16(IMUReadBuffer[2*i],IMUReadBuffer[2*i+1]);
 8007114:	f894 c007 	ldrb.w	ip, [r4, #7]
		if(i>0 && abs(qOriInt16[i])>abs(qOriInt16[maxLoc]))
 8007118:	bf98      	it	ls
 800711a:	4618      	movls	r0, r3
 800711c:	460f      	mov	r7, r1
			readBuf[i]=LH2UINT16(IMUReadBuffer[2*i],IMUReadBuffer[2*i+1]);
 800711e:	79a1      	ldrb	r1, [r4, #6]
 8007120:	805a      	strh	r2, [r3, #2]
 8007122:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 8007126:	80d9      	strh	r1, [r3, #6]
		if(i>0 && abs(qOriInt16[i])>abs(qOriInt16[maxLoc]))
 8007128:	bf98      	it	ls
 800712a:	2100      	movls	r1, #0
			readBuf[i]=LH2UINT16(IMUReadBuffer[2*i],IMUReadBuffer[2*i+1]);
 800712c:	f894 c005 	ldrb.w	ip, [r4, #5]
 8007130:	7922      	ldrb	r2, [r4, #4]
		if(i>0 && abs(qOriInt16[i])>abs(qOriInt16[maxLoc]))
 8007132:	bf88      	it	hi
 8007134:	2101      	movhi	r1, #1
			readBuf[i]=LH2UINT16(IMUReadBuffer[2*i],IMUReadBuffer[2*i+1]);
 8007136:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800713a:	809a      	strh	r2, [r3, #4]
		if(i>0 && abs(qOriInt16[i])>abs(qOriInt16[maxLoc]))
 800713c:	8800      	ldrh	r0, [r0, #0]
 800713e:	b292      	uxth	r2, r2
 8007140:	4282      	cmp	r2, r0
 8007142:	bf94      	ite	ls
 8007144:	eb03 0241 	addls.w	r2, r3, r1, lsl #1
 8007148:	1d1a      	addhi	r2, r3, #4
 800714a:	8812      	ldrh	r2, [r2, #0]
 800714c:	88d8      	ldrh	r0, [r3, #6]
			maxLoc=i;
 800714e:	bf88      	it	hi
 8007150:	2102      	movhi	r1, #2
		if(i>0 && abs(qOriInt16[i])>abs(qOriInt16[maxLoc]))
 8007152:	4290      	cmp	r0, r2
 8007154:	d928      	bls.n	80071a8 <readIMU_QuaternionsPacked+0xd4>
			maxLoc=i;
 8007156:	2103      	movs	r1, #3
		if(i>0 && abs(qOriInt16[i])>abs(qOriInt16[maxLoc]))
 8007158:	4a35      	ldr	r2, [pc, #212]	; (8007230 <readIMU_QuaternionsPacked+0x15c>)
 800715a:	08bf      	lsrs	r7, r7, #2
 800715c:	8858      	ldrh	r0, [r3, #2]
	else if (maxLoc==1){
		qCom->imuData0=(qOri->imuData0)>>2;
		qCom->imuData1=(qOri->imuData2)>>2;
		qCom->imuData2=(qOri->imuData3)>>2;
	}
	else if(maxLoc==2){
 800715e:	2902      	cmp	r1, #2
 8007160:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 8007164:	d057      	beq.n	8007216 <readIMU_QuaternionsPacked+0x142>
		qCom->imuData2=(qOri->imuData3)>>2;
	}
	else{
		qCom->imuData0=(qOri->imuData0)>>2;
		qCom->imuData1=(qOri->imuData1)>>2;
		qCom->imuData2=(qOri->imuData2)>>2;
 8007166:	2103      	movs	r1, #3
 8007168:	889b      	ldrh	r3, [r3, #4]
 800716a:	88ac      	ldrh	r4, [r5, #4]
 800716c:	089b      	lsrs	r3, r3, #2
		qCom->imuData0=(qOri->imuData0)>>2;
 800716e:	8828      	ldrh	r0, [r5, #0]
		qCom->imuData2=(qOri->imuData2)>>2;
 8007170:	f363 040d 	bfi	r4, r3, #0, #14
		qCom->imuData1=(qOri->imuData1)>>2;
 8007174:	886b      	ldrh	r3, [r5, #2]
		qCom->imuData0=(qOri->imuData0)>>2;
 8007176:	f367 000d 	bfi	r0, r7, #0, #14
		qCom->imuData1=(qOri->imuData1)>>2;
 800717a:	f36c 030d 	bfi	r3, ip, #0, #14
		qCom->imuData2=(qOri->imuData2)>>2;
 800717e:	80ac      	strh	r4, [r5, #4]
		qCom->imuData0=(qOri->imuData0)>>2;
 8007180:	8028      	strh	r0, [r5, #0]
		qCom->imuData1=(qOri->imuData1)>>2;
 8007182:	806b      	strh	r3, [r5, #2]
	}
	qCom->maxLocHigh=maxLoc>>1;
	qCom->maxLocLow=maxLoc;
	qCom->maxSign=((uint16_t)(((uint16_t)qOriInt16[maxLoc])&0x8000))>>15;
 8007184:	8813      	ldrh	r3, [r2, #0]
 8007186:	7968      	ldrb	r0, [r5, #5]
 8007188:	0bdb      	lsrs	r3, r3, #15
	qCom->maxLocHigh=maxLoc>>1;
 800718a:	786a      	ldrb	r2, [r5, #1]
	qCom->maxSign=((uint16_t)(((uint16_t)qOriInt16[maxLoc])&0x8000))>>15;
 800718c:	f363 1086 	bfi	r0, r3, #6, #1
 8007190:	7168      	strb	r0, [r5, #5]
	qCom->maxLocHigh=maxLoc>>1;
 8007192:	0848      	lsrs	r0, r1, #1
 8007194:	f360 1286 	bfi	r2, r0, #6, #1
}
 8007198:	4630      	mov	r0, r6
	qCom->maxLocLow=maxLoc;
 800719a:	78eb      	ldrb	r3, [r5, #3]
	qCom->maxLocHigh=maxLoc>>1;
 800719c:	706a      	strb	r2, [r5, #1]
	qCom->maxLocLow=maxLoc;
 800719e:	f361 1386 	bfi	r3, r1, #6, #1
 80071a2:	70eb      	strb	r3, [r5, #3]
}
 80071a4:	b005      	add	sp, #20
 80071a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
	if(maxLoc==0)
 80071ac:	b9e1      	cbnz	r1, 80071e8 <readIMU_QuaternionsPacked+0x114>
		qCom->imuData0=(qOri->imuData1)>>2;
 80071ae:	885c      	ldrh	r4, [r3, #2]
 80071b0:	f8b5 c000 	ldrh.w	ip, [r5]
		qCom->imuData1=(qOri->imuData2)>>2;
 80071b4:	8898      	ldrh	r0, [r3, #4]
		qCom->imuData0=(qOri->imuData1)>>2;
 80071b6:	08a4      	lsrs	r4, r4, #2
		qCom->imuData2=(qOri->imuData3)>>2;
 80071b8:	88db      	ldrh	r3, [r3, #6]
		qCom->imuData0=(qOri->imuData1)>>2;
 80071ba:	f364 0c0d 	bfi	ip, r4, #0, #14
		qCom->imuData1=(qOri->imuData2)>>2;
 80071be:	886f      	ldrh	r7, [r5, #2]
		qCom->imuData2=(qOri->imuData3)>>2;
 80071c0:	88ac      	ldrh	r4, [r5, #4]
		qCom->imuData1=(qOri->imuData2)>>2;
 80071c2:	0880      	lsrs	r0, r0, #2
		qCom->imuData2=(qOri->imuData3)>>2;
 80071c4:	089b      	lsrs	r3, r3, #2
		qCom->imuData1=(qOri->imuData2)>>2;
 80071c6:	f360 070d 	bfi	r7, r0, #0, #14
		qCom->imuData2=(qOri->imuData3)>>2;
 80071ca:	f363 040d 	bfi	r4, r3, #0, #14
		qCom->imuData0=(qOri->imuData1)>>2;
 80071ce:	f8a5 c000 	strh.w	ip, [r5]
		qCom->imuData1=(qOri->imuData2)>>2;
 80071d2:	806f      	strh	r7, [r5, #2]
		qCom->imuData2=(qOri->imuData3)>>2;
 80071d4:	80ac      	strh	r4, [r5, #4]
 80071d6:	e7d5      	b.n	8007184 <readIMU_QuaternionsPacked+0xb0>
		printf("IMU Read Reg %d , Error Code=%d\r\n",regAdd,ret);
 80071d8:	4602      	mov	r2, r0
 80071da:	2151      	movs	r1, #81	; 0x51
 80071dc:	4815      	ldr	r0, [pc, #84]	; (8007234 <readIMU_QuaternionsPacked+0x160>)
 80071de:	f001 fcf1 	bl	8008bc4 <iprintf>
}
 80071e2:	4630      	mov	r0, r6
 80071e4:	b005      	add	sp, #20
 80071e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (maxLoc==1){
 80071e8:	2901      	cmp	r1, #1
 80071ea:	ea4f 0797 	mov.w	r7, r7, lsr #2
 80071ee:	d1b5      	bne.n	800715c <readIMU_QuaternionsPacked+0x88>
		qCom->imuData1=(qOri->imuData2)>>2;
 80071f0:	8898      	ldrh	r0, [r3, #4]
 80071f2:	f8b5 c002 	ldrh.w	ip, [r5, #2]
		qCom->imuData2=(qOri->imuData3)>>2;
 80071f6:	88db      	ldrh	r3, [r3, #6]
		qCom->imuData1=(qOri->imuData2)>>2;
 80071f8:	0880      	lsrs	r0, r0, #2
		qCom->imuData2=(qOri->imuData3)>>2;
 80071fa:	88ac      	ldrh	r4, [r5, #4]
		qCom->imuData1=(qOri->imuData2)>>2;
 80071fc:	f360 0c0d 	bfi	ip, r0, #0, #14
		qCom->imuData0=(qOri->imuData0)>>2;
 8007200:	8828      	ldrh	r0, [r5, #0]
		qCom->imuData2=(qOri->imuData3)>>2;
 8007202:	089b      	lsrs	r3, r3, #2
 8007204:	f363 040d 	bfi	r4, r3, #0, #14
		qCom->imuData0=(qOri->imuData0)>>2;
 8007208:	f367 000d 	bfi	r0, r7, #0, #14
		qCom->imuData1=(qOri->imuData2)>>2;
 800720c:	f8a5 c002 	strh.w	ip, [r5, #2]
		qCom->imuData2=(qOri->imuData3)>>2;
 8007210:	80ac      	strh	r4, [r5, #4]
		qCom->imuData0=(qOri->imuData0)>>2;
 8007212:	8028      	strh	r0, [r5, #0]
 8007214:	e7b6      	b.n	8007184 <readIMU_QuaternionsPacked+0xb0>
		qCom->imuData2=(qOri->imuData3)>>2;
 8007216:	88db      	ldrh	r3, [r3, #6]
 8007218:	88ac      	ldrh	r4, [r5, #4]
 800721a:	089b      	lsrs	r3, r3, #2
		qCom->imuData0=(qOri->imuData0)>>2;
 800721c:	8828      	ldrh	r0, [r5, #0]
		qCom->imuData2=(qOri->imuData3)>>2;
 800721e:	f363 040d 	bfi	r4, r3, #0, #14
 8007222:	e7a7      	b.n	8007174 <readIMU_QuaternionsPacked+0xa0>
 8007224:	20000a2c 	.word	0x20000a2c
 8007228:	20002b3c 	.word	0x20002b3c
 800722c:	20000a38 	.word	0x20000a38
 8007230:	20000a3e 	.word	0x20000a3e
 8007234:	0800c5c8 	.word	0x0800c5c8

08007238 <IMU_Init>:
{
 8007238:	b530      	push	{r4, r5, lr}
	IMUWriteBuffer[1]=(uint8_t)(val&0x00FF);
 800723a:	2003      	movs	r0, #3
	if ((ret=HAL_I2C_Master_Transmit(&hi2c2,IMU_I2C_ADDRESS,IMUWriteBuffer,3,1))!=HAL_OK){
 800723c:	2201      	movs	r2, #1
	IMUWriteBuffer[0]=regAdd;
 800723e:	f641 6502 	movw	r5, #7682	; 0x1e02
 8007242:	4c0a      	ldr	r4, [pc, #40]	; (800726c <IMU_Init+0x34>)
{
 8007244:	b083      	sub	sp, #12
	if ((ret=HAL_I2C_Master_Transmit(&hi2c2,IMU_I2C_ADDRESS,IMUWriteBuffer,3,1))!=HAL_OK){
 8007246:	9200      	str	r2, [sp, #0]
 8007248:	4603      	mov	r3, r0
	IMUWriteBuffer[1]=(uint8_t)(val&0x00FF);
 800724a:	70a0      	strb	r0, [r4, #2]
	if ((ret=HAL_I2C_Master_Transmit(&hi2c2,IMU_I2C_ADDRESS,IMUWriteBuffer,3,1))!=HAL_OK){
 800724c:	4622      	mov	r2, r4
	IMUWriteBuffer[0]=regAdd;
 800724e:	8025      	strh	r5, [r4, #0]
	if ((ret=HAL_I2C_Master_Transmit(&hi2c2,IMU_I2C_ADDRESS,IMUWriteBuffer,3,1))!=HAL_OK){
 8007250:	21a0      	movs	r1, #160	; 0xa0
 8007252:	4807      	ldr	r0, [pc, #28]	; (8007270 <IMU_Init+0x38>)
 8007254:	f7fb fdcc 	bl	8002df0 <HAL_I2C_Master_Transmit>
 8007258:	4604      	mov	r4, r0
 800725a:	b120      	cbz	r0, 8007266 <IMU_Init+0x2e>
		printf("IMU Write Reg %d , Error Code=%d\r\n",regAdd,ret);
 800725c:	4602      	mov	r2, r0
 800725e:	2102      	movs	r1, #2
 8007260:	4804      	ldr	r0, [pc, #16]	; (8007274 <IMU_Init+0x3c>)
 8007262:	f001 fcaf 	bl	8008bc4 <iprintf>
}
 8007266:	4620      	mov	r0, r4
 8007268:	b003      	add	sp, #12
 800726a:	bd30      	pop	{r4, r5, pc}
 800726c:	20000a34 	.word	0x20000a34
 8007270:	20002b3c 	.word	0x20002b3c
 8007274:	0800c5a4 	.word	0x0800c5a4

08007278 <unpackQuaternion>:
}

void unpackQuaternion(struct QUATERNIONCOMPACT *qCom,struct QUATERNION *qOri){
 8007278:	b5f0      	push	{r4, r5, r6, r7, lr}
	int32_t lastNumOri=0;
	uint16_t maxLoc=(uint16_t)(qCom->maxLocHigh<<1 | qCom->maxLocLow);
	int16_t qRes0=(int16_t)(((uint16_t)qCom->imuData0)<<2);
	int16_t qRes1=(int16_t)(((uint16_t)qCom->imuData1)<<2);
 800727a:	8844      	ldrh	r4, [r0, #2]
	int16_t qRes0=(int16_t)(((uint16_t)qCom->imuData0)<<2);
 800727c:	8806      	ldrh	r6, [r0, #0]
	int16_t qRes1=(int16_t)(((uint16_t)qCom->imuData1)<<2);
 800727e:	f3c4 040d 	ubfx	r4, r4, #0, #14
 8007282:	00a4      	lsls	r4, r4, #2
	int16_t qRes2=(int16_t)(((uint16_t)qCom->imuData2)<<2);

	uint32_t sum=qRes0*qRes0+qRes1*qRes1+qRes2*qRes2;
 8007284:	b222      	sxth	r2, r4
 8007286:	fb02 f302 	mul.w	r3, r2, r2
	int16_t qRes0=(int16_t)(((uint16_t)qCom->imuData0)<<2);
 800728a:	f3c6 060d 	ubfx	r6, r6, #0, #14
 800728e:	00b6      	lsls	r6, r6, #2
	uint32_t sum=qRes0*qRes0+qRes1*qRes1+qRes2*qRes2;
 8007290:	b232      	sxth	r2, r6
	int16_t qRes2=(int16_t)(((uint16_t)qCom->imuData2)<<2);
 8007292:	8885      	ldrh	r5, [r0, #4]
	uint32_t sum=qRes0*qRes0+qRes1*qRes1+qRes2*qRes2;
 8007294:	fb02 3302 	mla	r3, r2, r2, r3
	int16_t qRes2=(int16_t)(((uint16_t)qCom->imuData2)<<2);
 8007298:	f3c5 050d 	ubfx	r5, r5, #0, #14
 800729c:	00ad      	lsls	r5, r5, #2
	uint32_t sum=qRes0*qRes0+qRes1*qRes1+qRes2*qRes2;
 800729e:	b22a      	sxth	r2, r5
 80072a0:	fb02 3202 	mla	r2, r2, r2, r3
	uint16_t maxLoc=(uint16_t)(qCom->maxLocHigh<<1 | qCom->maxLocLow);
 80072a4:	7847      	ldrb	r7, [r0, #1]
 80072a6:	78c3      	ldrb	r3, [r0, #3]
 80072a8:	f3c7 1780 	ubfx	r7, r7, #6, #1
 80072ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
	const int maxNum=(uint32_t)(1<<30);
	lastNumOri=(sum>=maxNum?0:fastSqrt32((uint32_t)(maxNum-sum)));
 80072b0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
	uint16_t maxLoc=(uint16_t)(qCom->maxLocHigh<<1 | qCom->maxLocLow);
 80072b4:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
	lastNumOri=(sum>=maxNum?0:fastSqrt32((uint32_t)(maxNum-sum)));
 80072b8:	d279      	bcs.n	80073ae <unpackQuaternion+0x136>
        if(g*g > n)
 80072ba:	f1c2 4780 	rsb	r7, r2, #1073741824	; 0x40000000
 80072be:	2a00      	cmp	r2, #0
 80072c0:	f040 8092 	bne.w	80073e8 <unpackQuaternion+0x170>
        g |= c;
 80072c4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
            g ^= c;
 80072c8:	f482 4280 	eor.w	r2, r2, #16384	; 0x4000
        g |= c;
 80072cc:	f442 5c00 	orr.w	ip, r2, #8192	; 0x2000
        if(g*g > n)
 80072d0:	fb0c fe0c 	mul.w	lr, ip, ip
 80072d4:	4577      	cmp	r7, lr
 80072d6:	bf38      	it	cc
 80072d8:	f422 5c00 	biccc.w	ip, r2, #8192	; 0x2000
        g |= c;
 80072dc:	f44c 5280 	orr.w	r2, ip, #4096	; 0x1000
        if(g*g > n)
 80072e0:	fb02 fe02 	mul.w	lr, r2, r2
 80072e4:	4577      	cmp	r7, lr
 80072e6:	bf38      	it	cc
 80072e8:	f42c 5280 	biccc.w	r2, ip, #4096	; 0x1000
        g |= c;
 80072ec:	f442 6c00 	orr.w	ip, r2, #2048	; 0x800
        if(g*g > n)
 80072f0:	fb0c fe0c 	mul.w	lr, ip, ip
 80072f4:	4577      	cmp	r7, lr
 80072f6:	bf38      	it	cc
 80072f8:	f422 6c00 	biccc.w	ip, r2, #2048	; 0x800
        g |= c;
 80072fc:	f44c 6280 	orr.w	r2, ip, #1024	; 0x400
        if(g*g > n)
 8007300:	fb02 fe02 	mul.w	lr, r2, r2
 8007304:	4577      	cmp	r7, lr
 8007306:	bf38      	it	cc
 8007308:	f42c 6280 	biccc.w	r2, ip, #1024	; 0x400
        g |= c;
 800730c:	f442 7c00 	orr.w	ip, r2, #512	; 0x200
        if(g*g > n)
 8007310:	fb0c fe0c 	mul.w	lr, ip, ip
 8007314:	4577      	cmp	r7, lr
 8007316:	bf38      	it	cc
 8007318:	f422 7c00 	biccc.w	ip, r2, #512	; 0x200
        g |= c;
 800731c:	f44c 7280 	orr.w	r2, ip, #256	; 0x100
        if(g*g > n)
 8007320:	fb02 fe02 	mul.w	lr, r2, r2
 8007324:	4577      	cmp	r7, lr
 8007326:	bf38      	it	cc
 8007328:	f42c 7280 	biccc.w	r2, ip, #256	; 0x100
        g |= c;
 800732c:	f042 0c80 	orr.w	ip, r2, #128	; 0x80
        if(g*g > n)
 8007330:	fb0c fe0c 	mul.w	lr, ip, ip
 8007334:	4577      	cmp	r7, lr
 8007336:	bf38      	it	cc
 8007338:	f022 0c80 	biccc.w	ip, r2, #128	; 0x80
        g |= c;
 800733c:	f04c 0240 	orr.w	r2, ip, #64	; 0x40
        if(g*g > n)
 8007340:	fb02 fe02 	mul.w	lr, r2, r2
 8007344:	4577      	cmp	r7, lr
 8007346:	bf38      	it	cc
 8007348:	f02c 0240 	biccc.w	r2, ip, #64	; 0x40
        g |= c;
 800734c:	f042 0c20 	orr.w	ip, r2, #32
        if(g*g > n)
 8007350:	fb0c fe0c 	mul.w	lr, ip, ip
 8007354:	4577      	cmp	r7, lr
 8007356:	bf38      	it	cc
 8007358:	f022 0c20 	biccc.w	ip, r2, #32
        g |= c;
 800735c:	f04c 0210 	orr.w	r2, ip, #16
        if(g*g > n)
 8007360:	fb02 fe02 	mul.w	lr, r2, r2
 8007364:	4577      	cmp	r7, lr
 8007366:	bf38      	it	cc
 8007368:	f02c 0210 	biccc.w	r2, ip, #16
        g |= c;
 800736c:	f042 0c08 	orr.w	ip, r2, #8
        if(g*g > n)
 8007370:	fb0c fe0c 	mul.w	lr, ip, ip
 8007374:	4577      	cmp	r7, lr
 8007376:	bf38      	it	cc
 8007378:	f022 0c08 	biccc.w	ip, r2, #8
        g |= c;
 800737c:	f04c 0204 	orr.w	r2, ip, #4
        if(g*g > n)
 8007380:	fb02 fe02 	mul.w	lr, r2, r2
 8007384:	4577      	cmp	r7, lr
 8007386:	bf38      	it	cc
 8007388:	f02c 0204 	biccc.w	r2, ip, #4
        g |= c;
 800738c:	f042 0c02 	orr.w	ip, r2, #2
        if(g*g > n)
 8007390:	fb0c fe0c 	mul.w	lr, ip, ip
 8007394:	4577      	cmp	r7, lr
 8007396:	bf38      	it	cc
 8007398:	f022 0c02 	biccc.w	ip, r2, #2
        g |= c;
 800739c:	f04c 0201 	orr.w	r2, ip, #1
        if(g*g > n)
 80073a0:	fb02 fe02 	mul.w	lr, r2, r2
 80073a4:	4577      	cmp	r7, lr
 80073a6:	d203      	bcs.n	80073b0 <unpackQuaternion+0x138>
 80073a8:	f02c 0201 	bic.w	r2, ip, #1
 80073ac:	e000      	b.n	80073b0 <unpackQuaternion+0x138>
	lastNumOri=(sum>=maxNum?0:fastSqrt32((uint32_t)(maxNum-sum)));
 80073ae:	2200      	movs	r2, #0
	int16_t lastNum=qCom->maxSign?-lastNumOri:lastNumOri;
 80073b0:	7940      	ldrb	r0, [r0, #5]
 80073b2:	b2b6      	uxth	r6, r6
 80073b4:	0640      	lsls	r0, r0, #25
 80073b6:	bf48      	it	mi
 80073b8:	4252      	negmi	r2, r2
 80073ba:	b212      	sxth	r2, r2
 80073bc:	b2a4      	uxth	r4, r4
 80073be:	b2ad      	uxth	r5, r5
 80073c0:	b292      	uxth	r2, r2
	if(maxLoc==0)
 80073c2:	b1c3      	cbz	r3, 80073f6 <unpackQuaternion+0x17e>
		qOri->imuData1=qRes0;
		qOri->imuData2=qRes1;
		qOri->imuData3=qRes2;
		qOri->imuData0=lastNum;
	}
	else if (maxLoc==1){
 80073c4:	2b01      	cmp	r3, #1
		qOri->imuData0=qRes0;
 80073c6:	f04f 0000 	mov.w	r0, #0
	else if (maxLoc==1){
 80073ca:	d020      	beq.n	800740e <unpackQuaternion+0x196>
		qOri->imuData2=qRes1;
		qOri->imuData3=qRes2;
		qOri->imuData1=lastNum;
	}
	else if(maxLoc==2){
 80073cc:	2b02      	cmp	r3, #2
		qOri->imuData0=qRes0;
 80073ce:	4603      	mov	r3, r0
 80073d0:	f366 000f 	bfi	r0, r6, #0, #16
	else if(maxLoc==2){
 80073d4:	d027      	beq.n	8007426 <unpackQuaternion+0x1ae>
		qOri->imuData1=qRes1;
		qOri->imuData3=qRes2;
		qOri->imuData2=lastNum;
	}
	else{
		qOri->imuData0=qRes0;
 80073d6:	f365 030f 	bfi	r3, r5, #0, #16
 80073da:	f364 401f 	bfi	r0, r4, #16, #16
 80073de:	f362 431f 	bfi	r3, r2, #16, #16
 80073e2:	6008      	str	r0, [r1, #0]
 80073e4:	604b      	str	r3, [r1, #4]
		qOri->imuData1=qRes1;
		qOri->imuData2=qRes2;
		qOri->imuData3=lastNum;
	}
}
 80073e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(g*g > n)
 80073e8:	f1b7 5f80 	cmp.w	r7, #268435456	; 0x10000000
        g |= c;
 80073ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        if(g*g > n)
 80073f0:	f4bf af6c 	bcs.w	80072cc <unpackQuaternion+0x54>
 80073f4:	e768      	b.n	80072c8 <unpackQuaternion+0x50>
		qOri->imuData0=lastNum;
 80073f6:	4618      	mov	r0, r3
 80073f8:	f362 030f 	bfi	r3, r2, #0, #16
 80073fc:	f364 000f 	bfi	r0, r4, #0, #16
 8007400:	f366 431f 	bfi	r3, r6, #16, #16
 8007404:	f365 401f 	bfi	r0, r5, #16, #16
 8007408:	600b      	str	r3, [r1, #0]
 800740a:	6048      	str	r0, [r1, #4]
}
 800740c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		qOri->imuData0=qRes0;
 800740e:	4603      	mov	r3, r0
 8007410:	f366 000f 	bfi	r0, r6, #0, #16
 8007414:	f364 030f 	bfi	r3, r4, #0, #16
 8007418:	f362 401f 	bfi	r0, r2, #16, #16
 800741c:	f365 431f 	bfi	r3, r5, #16, #16
 8007420:	6008      	str	r0, [r1, #0]
 8007422:	604b      	str	r3, [r1, #4]
}
 8007424:	bdf0      	pop	{r4, r5, r6, r7, pc}
		qOri->imuData0=qRes0;
 8007426:	f362 030f 	bfi	r3, r2, #0, #16
 800742a:	f364 401f 	bfi	r0, r4, #16, #16
 800742e:	f365 431f 	bfi	r3, r5, #16, #16
 8007432:	6008      	str	r0, [r1, #0]
 8007434:	604b      	str	r3, [r1, #4]
}
 8007436:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007438 <kalman_StoreMeasure>:
static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
	ptKalmanFilter->Z.pData[num] = z;
 8007438:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800743a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800743e:	4770      	bx	lr

08007440 <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float pQ)
{
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float dt=ptKalmanFilter->dt;
 8007442:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
{
 8007446:	4605      	mov	r5, r0
	ptKalmanFilter->Q.pData[0]=(pQ)*dt*dt*dt*dt/4.0f;
 8007448:	4620      	mov	r0, r4
 800744a:	f7f9 fc9b 	bl	8000d84 <__aeabi_fmul>
 800744e:	4621      	mov	r1, r4
 8007450:	f7f9 fc98 	bl	8000d84 <__aeabi_fmul>
 8007454:	4621      	mov	r1, r4
 8007456:	4606      	mov	r6, r0
 8007458:	f7f9 fc94 	bl	8000d84 <__aeabi_fmul>
 800745c:	4621      	mov	r1, r4
 800745e:	4607      	mov	r7, r0
 8007460:	f7f9 fc90 	bl	8000d84 <__aeabi_fmul>
 8007464:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8007468:	f7f9 fc8c 	bl	8000d84 <__aeabi_fmul>
 800746c:	6bec      	ldr	r4, [r5, #60]	; 0x3c
	ptKalmanFilter->Q.pData[1]=(pQ)*dt*dt*dt/2.0f;
 800746e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
	ptKalmanFilter->Q.pData[0]=(pQ)*dt*dt*dt*dt/4.0f;
 8007472:	6020      	str	r0, [r4, #0]
	ptKalmanFilter->Q.pData[1]=(pQ)*dt*dt*dt/2.0f;
 8007474:	4638      	mov	r0, r7
 8007476:	f7f9 fc85 	bl	8000d84 <__aeabi_fmul>
	ptKalmanFilter->Q.pData[2]=(pQ)*dt*dt*dt/2.0f;
	ptKalmanFilter->Q.pData[3]=(pQ)*dt*dt;
 800747a:	60e6      	str	r6, [r4, #12]
	ptKalmanFilter->Q.pData[1]=(pQ)*dt*dt*dt/2.0f;
 800747c:	6060      	str	r0, [r4, #4]
	ptKalmanFilter->Q.pData[2]=(pQ)*dt*dt*dt/2.0f;
 800747e:	60a0      	str	r0, [r4, #8]


}
 8007480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007482:	bf00      	nop

08007484 <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float pR)
{
	ptKalmanFilter->R.pData[0]=pR;
 8007484:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007486:	6019      	str	r1, [r3, #0]
}
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop

0800748c <kalman_step>:
	arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
}


static void kalman_step(KALMAN_FILTER *s)
{
 800748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	4604      	mov	r4, r0
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 8007492:	f100 0398 	add.w	r3, r0, #152	; 0x98
 8007496:	f100 0810 	add.w	r8, r0, #16
{
 800749a:	b083      	sub	sp, #12
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 800749c:	461a      	mov	r2, r3

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 800749e:	f104 0568 	add.w	r5, r4, #104	; 0x68
 80074a2:	f104 0730 	add.w	r7, r4, #48	; 0x30
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 80074a6:	4621      	mov	r1, r4
 80074a8:	4640      	mov	r0, r8
 80074aa:	9301      	str	r3, [sp, #4]
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 80074ac:	f104 0670 	add.w	r6, r4, #112	; 0x70
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 80074b0:	f7fa fb7c 	bl	8001bac <arm_mat_mult_f32>
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 80074b4:	4639      	mov	r1, r7
 80074b6:	462a      	mov	r2, r5
 80074b8:	4640      	mov	r0, r8
 80074ba:	f7fa fb77 	bl	8001bac <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 80074be:	4632      	mov	r2, r6
 80074c0:	f104 0150 	add.w	r1, r4, #80	; 0x50
 80074c4:	4628      	mov	r0, r5
 80074c6:	f7fa fb71 	bl	8001bac <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 80074ca:	f104 0b60 	add.w	fp, r4, #96	; 0x60
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
 80074ce:	462a      	mov	r2, r5
 80074d0:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80074d4:	4630      	mov	r0, r6
 80074d6:	f7fa fa17 	bl	8001908 <arm_mat_add_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 80074da:	f104 0878 	add.w	r8, r4, #120	; 0x78
 80074de:	f104 0a20 	add.w	sl, r4, #32
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 80074e2:	465a      	mov	r2, fp
 80074e4:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80074e8:	4628      	mov	r0, r5
 80074ea:	f7fa fb5f 	bl	8001bac <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 80074ee:	f104 0980 	add.w	r9, r4, #128	; 0x80
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 80074f2:	4659      	mov	r1, fp
 80074f4:	4642      	mov	r2, r8
 80074f6:	4650      	mov	r0, sl
 80074f8:	f7fa fb58 	bl	8001bac <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 80074fc:	464a      	mov	r2, r9
 80074fe:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8007502:	4640      	mov	r0, r8
 8007504:	f7fa fa00 	bl	8001908 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 8007508:	4641      	mov	r1, r8
 800750a:	4648      	mov	r0, r9
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 800750c:	f104 0948 	add.w	r9, r4, #72	; 0x48
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 8007510:	f7fa fa14 	bl	800193c <arm_mat_inverse_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 8007514:	f104 0388 	add.w	r3, r4, #136	; 0x88
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 8007518:	4641      	mov	r1, r8
 800751a:	464a      	mov	r2, r9
 800751c:	4658      	mov	r0, fp
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800751e:	9300      	str	r3, [sp, #0]
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 8007520:	f7fa fb44 	bl	8001bac <arm_mat_mult_f32>
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 8007524:	9b01      	ldr	r3, [sp, #4]
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 8007526:	f104 0b90 	add.w	fp, r4, #144	; 0x90
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800752a:	4619      	mov	r1, r3
 800752c:	9a00      	ldr	r2, [sp, #0]
 800752e:	4650      	mov	r0, sl
 8007530:	f7fa fb3c 	bl	8001bac <arm_mat_mult_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 8007534:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 8007538:	9900      	ldr	r1, [sp, #0]
 800753a:	465a      	mov	r2, fp
 800753c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007540:	f7fa fb90 	bl	8001c64 <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 8007544:	4659      	mov	r1, fp
 8007546:	4642      	mov	r2, r8
 8007548:	4648      	mov	r0, r9
 800754a:	f7fa fb2f 	bl	8001bac <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
 800754e:	9b01      	ldr	r3, [sp, #4]
 8007550:	4622      	mov	r2, r4
 8007552:	4618      	mov	r0, r3
 8007554:	4641      	mov	r1, r8
 8007556:	f7fa f9d7 	bl	8001908 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
 800755a:	463a      	mov	r2, r7
 800755c:	4651      	mov	r1, sl
 800755e:	4648      	mov	r0, r9
 8007560:	f7fa fb24 	bl	8001bac <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
 8007564:	4632      	mov	r2, r6
 8007566:	4629      	mov	r1, r5
 8007568:	4638      	mov	r0, r7
 800756a:	f7fa fb1f 	bl	8001bac <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800756e:	463a      	mov	r2, r7
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5

}
 8007574:	b003      	add	sp, #12
 8007576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800757a:	f7fa bb73 	b.w	8001c64 <arm_mat_sub_f32>
 800757e:	bf00      	nop

08007580 <KALMANFILTER>:
{
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	b083      	sub	sp, #12
 8007586:	9000      	str	r0, [sp, #0]
 8007588:	468b      	mov	fp, r1
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 800758a:	20c4      	movs	r0, #196	; 0xc4
 800758c:	2101      	movs	r1, #1
{
 800758e:	4616      	mov	r6, r2
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 8007590:	f000 fc28 	bl	8007de4 <calloc>
	if(ptKalmanFilter==NULL)
 8007594:	4604      	mov	r4, r0
 8007596:	2800      	cmp	r0, #0
 8007598:	f000 80eb 	beq.w	8007772 <KALMANFILTER+0x1f2>
	ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 800759c:	2101      	movs	r1, #1
 800759e:	20bc      	movs	r0, #188	; 0xbc
 80075a0:	f000 fc20 	bl	8007de4 <calloc>
	arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 80075a4:	2201      	movs	r2, #1
	ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 80075a6:	4605      	mov	r5, r0
	arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 80075a8:	4603      	mov	r3, r0
	ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 80075aa:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 80075ae:	2102      	movs	r1, #2
 80075b0:	4620      	mov	r0, r4
 80075b2:	f7fa f9bf 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
 80075b6:	2202      	movs	r2, #2
 80075b8:	f104 0910 	add.w	r9, r4, #16
 80075bc:	f105 0308 	add.w	r3, r5, #8
 80075c0:	4611      	mov	r1, r2
 80075c2:	4648      	mov	r0, r9
 80075c4:	f7fa f9b6 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
 80075c8:	f105 0318 	add.w	r3, r5, #24
 80075cc:	2201      	movs	r2, #1
 80075ce:	2102      	movs	r1, #2
 80075d0:	f104 0018 	add.w	r0, r4, #24
 80075d4:	f7fa f9ae 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 80075d8:	2201      	movs	r2, #1
 80075da:	f105 0320 	add.w	r3, r5, #32
 80075de:	4611      	mov	r1, r2
 80075e0:	f104 0008 	add.w	r0, r4, #8
	arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 80075e4:	f104 0720 	add.w	r7, r4, #32
	arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 80075e8:	f7fa f9a4 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 80075ec:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80075f0:	4638      	mov	r0, r7
 80075f2:	2202      	movs	r2, #2
 80075f4:	2101      	movs	r1, #1
 80075f6:	f7fa f99d 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
 80075fa:	2201      	movs	r2, #1
 80075fc:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007600:	4611      	mov	r1, r2
 8007602:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007606:	f7fa f995 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
 800760a:	2202      	movs	r2, #2
 800760c:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 8007610:	4611      	mov	r1, r2
 8007612:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007616:	f7fa f98d 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
 800761a:	2202      	movs	r2, #2
 800761c:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8007620:	4611      	mov	r1, r2
 8007622:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8007626:	f7fa f985 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
 800762a:	2201      	movs	r2, #1
 800762c:	f105 034c 	add.w	r3, r5, #76	; 0x4c
 8007630:	4611      	mov	r1, r2
 8007632:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8007636:	f7fa f97d 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
 800763a:	f105 0350 	add.w	r3, r5, #80	; 0x50
 800763e:	2201      	movs	r2, #1
 8007640:	2102      	movs	r1, #2
 8007642:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8007646:	f7fa f975 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800764a:	2202      	movs	r2, #2
 800764c:	f104 0a50 	add.w	sl, r4, #80	; 0x50
 8007650:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8007654:	4611      	mov	r1, r2
 8007656:	4650      	mov	r0, sl
	arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 8007658:	f104 0858 	add.w	r8, r4, #88	; 0x58
	arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800765c:	f7fa f96a 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 8007660:	f105 036c 	add.w	r3, r5, #108	; 0x6c
 8007664:	4640      	mov	r0, r8
 8007666:	2201      	movs	r2, #1
 8007668:	2102      	movs	r1, #2
 800766a:	f7fa f963 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
 800766e:	f105 0374 	add.w	r3, r5, #116	; 0x74
 8007672:	2201      	movs	r2, #1
 8007674:	2102      	movs	r1, #2
 8007676:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800767a:	f7fa f95b 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
 800767e:	2202      	movs	r2, #2
 8007680:	f105 037c 	add.w	r3, r5, #124	; 0x7c
 8007684:	4611      	mov	r1, r2
 8007686:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800768a:	f7fa f953 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
 800768e:	2202      	movs	r2, #2
 8007690:	f105 038c 	add.w	r3, r5, #140	; 0x8c
 8007694:	4611      	mov	r1, r2
 8007696:	f104 0070 	add.w	r0, r4, #112	; 0x70
 800769a:	f7fa f94b 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
 800769e:	2201      	movs	r2, #1
 80076a0:	f105 039c 	add.w	r3, r5, #156	; 0x9c
 80076a4:	4611      	mov	r1, r2
 80076a6:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80076aa:	f7fa f943 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
 80076ae:	2201      	movs	r2, #1
 80076b0:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
 80076b4:	4611      	mov	r1, r2
 80076b6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80076ba:	f7fa f93b 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
 80076be:	2201      	movs	r2, #1
 80076c0:	f105 03a4 	add.w	r3, r5, #164	; 0xa4
 80076c4:	4611      	mov	r1, r2
 80076c6:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80076ca:	f7fa f933 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
 80076ce:	2201      	movs	r2, #1
 80076d0:	f105 03a8 	add.w	r3, r5, #168	; 0xa8
 80076d4:	4611      	mov	r1, r2
 80076d6:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80076da:	f7fa f92b 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
 80076de:	f105 03ac 	add.w	r3, r5, #172	; 0xac
 80076e2:	2201      	movs	r2, #1
 80076e4:	2102      	movs	r1, #2
 80076e6:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80076ea:	f7fa f923 	bl	8001934 <arm_mat_init_f32>
	arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
 80076ee:	f105 03b4 	add.w	r3, r5, #180	; 0xb4
 80076f2:	2201      	movs	r2, #1
 80076f4:	2102      	movs	r1, #2
 80076f6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 80076fa:	f7fa f91b 	bl	8001934 <arm_mat_init_f32>
	ptKalmanFilter->step = kalman_step;
 80076fe:	4b1f      	ldr	r3, [pc, #124]	; (800777c <KALMANFILTER+0x1fc>)
	ptKalmanFilter->A.pData[0]=1;
 8007700:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
	ptKalmanFilter->step = kalman_step;
 8007704:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
	ptKalmanFilter->A.pData[2]=0;
 8007708:	2300      	movs	r3, #0
	ptKalmanFilter->A.pData[0]=1;
 800770a:	6962      	ldr	r2, [r4, #20]
	ptKalmanFilter->setQ = kalman_setQ;
 800770c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8007788 <KALMANFILTER+0x208>
	ptKalmanFilter->setR = kalman_setR;
 8007710:	481b      	ldr	r0, [pc, #108]	; (8007780 <KALMANFILTER+0x200>)
	ptKalmanFilter->store = kalman_StoreMeasure;
 8007712:	491c      	ldr	r1, [pc, #112]	; (8007784 <KALMANFILTER+0x204>)
	ptKalmanFilter->setR = kalman_setR;
 8007714:	e9c4 c02e 	strd	ip, r0, [r4, #184]	; 0xb8
	ptKalmanFilter->store = kalman_StoreMeasure;
 8007718:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	ptKalmanFilter->dt = dt;
 800771c:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
	ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 8007720:	4631      	mov	r1, r6
	ptKalmanFilter->A.pData[2]=0;
 8007722:	6093      	str	r3, [r2, #8]
	ptKalmanFilter->A.pData[1]=dt;
 8007724:	6056      	str	r6, [r2, #4]
	ptKalmanFilter->A.pData[0]=1;
 8007726:	6015      	str	r5, [r2, #0]
	ptKalmanFilter->A.pData[3]=1;
 8007728:	60d5      	str	r5, [r2, #12]
	ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800772a:	4630      	mov	r0, r6
	ptKalmanFilter->A.pData[2]=0;
 800772c:	9301      	str	r3, [sp, #4]
	ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800772e:	f7f9 fb29 	bl	8000d84 <__aeabi_fmul>
 8007732:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007736:	f7f9 fb25 	bl	8000d84 <__aeabi_fmul>
 800773a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
	ptKalmanFilter->H.pData[0]=1;
 800773e:	6a62      	ldr	r2, [r4, #36]	; 0x24
	ptKalmanFilter->H.pData[1]=0;
 8007740:	9b01      	ldr	r3, [sp, #4]
	ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 8007742:	f8cc 0000 	str.w	r0, [ip]
	ptKalmanFilter->B.pData[1]=dt;
 8007746:	f8cc 6004 	str.w	r6, [ip, #4]
	arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800774a:	4651      	mov	r1, sl
	ptKalmanFilter->H.pData[1]=0;
 800774c:	6053      	str	r3, [r2, #4]
	ptKalmanFilter->H.pData[0]=1;
 800774e:	6015      	str	r5, [r2, #0]
	arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 8007750:	4648      	mov	r0, r9
 8007752:	f7fa fa9d 	bl	8001c90 <arm_mat_trans_f32>
	arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 8007756:	4641      	mov	r1, r8
 8007758:	4638      	mov	r0, r7
 800775a:	f7fa fa99 	bl	8001c90 <arm_mat_trans_f32>
	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
 800775e:	9900      	ldr	r1, [sp, #0]
 8007760:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8007764:	4620      	mov	r0, r4
 8007766:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
 8007768:	4659      	mov	r1, fp
 800776a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800776e:	4620      	mov	r0, r4
 8007770:	4798      	blx	r3
}
 8007772:	4620      	mov	r0, r4
 8007774:	b003      	add	sp, #12
 8007776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777a:	bf00      	nop
 800777c:	0800748d 	.word	0x0800748d
 8007780:	08007485 	.word	0x08007485
 8007784:	08007439 	.word	0x08007439
 8007788:	08007441 	.word	0x08007441

0800778c <stepKF>:


float stepKF(KALMAN_FILTER *ptKalmanFilter,float x)
{
 800778c:	b510      	push	{r4, lr}
 800778e:	4604      	mov	r4, r0
	ptKalmanFilter->store(ptKalmanFilter, 0 ,x);
 8007790:	460a      	mov	r2, r1
 8007792:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8007796:	2100      	movs	r1, #0
 8007798:	4798      	blx	r3
	ptKalmanFilter->step(ptKalmanFilter);
 800779a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800779e:	4620      	mov	r0, r4
 80077a0:	4798      	blx	r3
	return ptKalmanFilter->X.pData[0];
 80077a2:	6863      	ldr	r3, [r4, #4]
}
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	bd10      	pop	{r4, pc}

080077a8 <initLaserPoll>:


/***************************     VL6180x Laser Sensor ********************/
/***************************                          *******************/

void initLaserPoll() {
 80077a8:	b538      	push	{r3, r4, r5, lr}
//	arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], BLOCK_SIZE);
	ptLaserKalman = KALMANFILTER(400, 12, 0.02);
 80077aa:	4a1e      	ldr	r2, [pc, #120]	; (8007824 <initLaserPoll+0x7c>)
 80077ac:	491e      	ldr	r1, [pc, #120]	; (8007828 <initLaserPoll+0x80>)
 80077ae:	481f      	ldr	r0, [pc, #124]	; (800782c <initLaserPoll+0x84>)
 80077b0:	f7ff fee6 	bl	8007580 <KALMANFILTER>
	theVL6180xDev = LASERI2CADDRESS;
 80077b4:	2352      	movs	r3, #82	; 0x52
	HAL_GPIO_WritePin(LASER_D1_GPIO_Port, LASER_D1_Pin, 0);
 80077b6:	4d1e      	ldr	r5, [pc, #120]	; (8007830 <initLaserPoll+0x88>)
	ptLaserKalman = KALMANFILTER(400, 12, 0.02);
 80077b8:	4a1e      	ldr	r2, [pc, #120]	; (8007834 <initLaserPoll+0x8c>)
	theVL6180xDev = LASERI2CADDRESS;
 80077ba:	4c1f      	ldr	r4, [pc, #124]	; (8007838 <initLaserPoll+0x90>)
	ptLaserKalman = KALMANFILTER(400, 12, 0.02);
 80077bc:	6010      	str	r0, [r2, #0]
	HAL_GPIO_WritePin(LASER_D1_GPIO_Port, LASER_D1_Pin, 0);
 80077be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077c2:	2200      	movs	r2, #0
 80077c4:	4628      	mov	r0, r5
	theVL6180xDev = LASERI2CADDRESS;
 80077c6:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(LASER_D1_GPIO_Port, LASER_D1_Pin, 0);
 80077c8:	f7fb f91e 	bl	8002a08 <HAL_GPIO_WritePin>
	HAL_Delay(7);
 80077cc:	2007      	movs	r0, #7
 80077ce:	f7fa facd 	bl	8001d6c <HAL_Delay>
	HAL_GPIO_WritePin(LASER_D1_GPIO_Port, LASER_D1_Pin, 1);
 80077d2:	2201      	movs	r2, #1
 80077d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077d8:	4628      	mov	r0, r5
 80077da:	f7fb f915 	bl	8002a08 <HAL_GPIO_WritePin>
	HAL_Delay(7);
 80077de:	2007      	movs	r0, #7
 80077e0:	f7fa fac4 	bl	8001d6c <HAL_Delay>
	VL6180x_InitData(theVL6180xDev);
 80077e4:	7820      	ldrb	r0, [r4, #0]
 80077e6:	f7fd fec5 	bl	8005574 <VL6180x_InitData>
	VL6180x_FilterSetState(theVL6180xDev, 0); //disable filering as not effective in continuous mode
 80077ea:	2100      	movs	r1, #0
 80077ec:	7820      	ldrb	r0, [r4, #0]
 80077ee:	f7fe fc6f 	bl	80060d0 <VL6180x_FilterSetState>
	VL6180x_Prepare(theVL6180xDev);     // default vl6180x init
 80077f2:	7820      	ldrb	r0, [r4, #0]
 80077f4:	f7fe fd9e 	bl	8006334 <VL6180x_Prepare>
	VL6180x_SetupGPIO1(theVL6180xDev, CONFIG_GPIO_INTERRUPT_DISABLED,
 80077f8:	2201      	movs	r2, #1
 80077fa:	7820      	ldrb	r0, [r4, #0]
 80077fc:	2100      	movs	r1, #0
 80077fe:	f7fe fde5 	bl	80063cc <VL6180x_SetupGPIO1>
			INTR_POL_HIGH);
	VL6180x_UpscaleSetScaling(theVL6180xDev, 1);
 8007802:	7820      	ldrb	r0, [r4, #0]
 8007804:	2101      	movs	r1, #1
 8007806:	f7fe fd4b 	bl	80062a0 <VL6180x_UpscaleSetScaling>
	VL6180x_RangeSetMaxConvergenceTime(theVL6180xDev, 15);
 800780a:	7820      	ldrb	r0, [r4, #0]
 800780c:	210f      	movs	r1, #15
 800780e:	f7fe fdef 	bl	80063f0 <VL6180x_RangeSetMaxConvergenceTime>
	VL6180x_RangeClearInterrupt(theVL6180xDev); // make sure no interrupt is pending
 8007812:	7820      	ldrb	r0, [r4, #0]
 8007814:	2101      	movs	r1, #1
 8007816:	f7fe fc61 	bl	80060dc <VL6180x_ClearInterrupt>

}

uint8_t laserStartSingleShot()
{
	return VL6180x_RangeStartSingleShot(theVL6180xDev);
 800781a:	7820      	ldrb	r0, [r4, #0]
}
 800781c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return VL6180x_RangeStartSingleShot(theVL6180xDev);
 8007820:	f7fe be48 	b.w	80064b4 <VL6180x_RangeStartSingleShot>
 8007824:	3ca3d70a 	.word	0x3ca3d70a
 8007828:	41400000 	.word	0x41400000
 800782c:	43c80000 	.word	0x43c80000
 8007830:	40010c00 	.word	0x40010c00
 8007834:	20000a40 	.word	0x20000a40
 8007838:	20000a44 	.word	0x20000a44

0800783c <laserStartSingleShot>:
{
 800783c:	b508      	push	{r3, lr}
	return VL6180x_RangeStartSingleShot(theVL6180xDev);
 800783e:	4b03      	ldr	r3, [pc, #12]	; (800784c <laserStartSingleShot+0x10>)
 8007840:	7818      	ldrb	r0, [r3, #0]
 8007842:	f7fe fe37 	bl	80064b4 <VL6180x_RangeStartSingleShot>
}
 8007846:	b2c0      	uxtb	r0, r0
 8007848:	bd08      	pop	{r3, pc}
 800784a:	bf00      	nop
 800784c:	20000a44 	.word	0x20000a44

08007850 <laserTryRead>:

uint8_t laserTryRead(uint16_t *buf) {
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t ret;

	if ((ret = VL6180x_RangeGetMeasurementIfReady(theVL6180xDev, &RangeData))== HAL_OK) {
 8007852:	4c16      	ldr	r4, [pc, #88]	; (80078ac <laserTryRead+0x5c>)
 8007854:	4e16      	ldr	r6, [pc, #88]	; (80078b0 <laserTryRead+0x60>)
uint8_t laserTryRead(uint16_t *buf) {
 8007856:	4607      	mov	r7, r0
	if ((ret = VL6180x_RangeGetMeasurementIfReady(theVL6180xDev, &RangeData))== HAL_OK) {
 8007858:	4621      	mov	r1, r4
 800785a:	7830      	ldrb	r0, [r6, #0]
 800785c:	f7fe fc06 	bl	800606c <VL6180x_RangeGetMeasurementIfReady>
 8007860:	b2c5      	uxtb	r5, r0
 8007862:	b9bd      	cbnz	r5, 8007894 <laserTryRead+0x44>
		//    If Range.errorStatus is DataNotReady, application knows that it has to wait a bit before getting a new data
		//    If Range.errorStatus is 0, application knows it is a valid distance
		//    If Range.errorStatus is not 0, application knows that reported distance is invalid so may take some decisions depending on the errorStatus
//		if (RangeData.errorStatus == DataNotReady)
//			continue;
		if (RangeData.errorStatus == 0) {
 8007864:	68a3      	ldr	r3, [r4, #8]
 8007866:	b12b      	cbz	r3, 8007874 <laserTryRead+0x24>
			//Option 3:FIR
//			orirange=RangeData.range_mm;
//			arm_fir_f32(&S, &(orirange), &(firrange), BLOCK_SIZE);
		}
		/*  clear range interrupt source */
		VL6180x_RangeClearInterrupt(theVL6180xDev);
 8007868:	7830      	ldrb	r0, [r6, #0]
 800786a:	2101      	movs	r1, #1
 800786c:	f7fe fc36 	bl	80060dc <VL6180x_ClearInterrupt>
	else {
		printf("Error:%s\r\n",VL6180x_RangeGetStatusErrString(RangeData.errorStatus)); // your code display error code
		initLaserPoll();
	}
	return ret;
}
 8007870:	4628      	mov	r0, r5
 8007872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			filteredrangeFloat = stepKF(ptLaserKalman, RangeData.range_mm);
 8007874:	6820      	ldr	r0, [r4, #0]
 8007876:	f7f9 fa31 	bl	8000cdc <__aeabi_i2f>
 800787a:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <laserTryRead+0x64>)
 800787c:	4601      	mov	r1, r0
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	f7ff ff84 	bl	800778c <stepKF>
			*buf = (int) (round(filteredrangeFloat));
 8007884:	f7f8 fdd0 	bl	8000428 <__aeabi_f2d>
 8007888:	f000 fa66 	bl	8007d58 <round>
 800788c:	f7f9 f8d4 	bl	8000a38 <__aeabi_d2iz>
 8007890:	8038      	strh	r0, [r7, #0]
 8007892:	e7e9      	b.n	8007868 <laserTryRead+0x18>
		printf("Error:%s\r\n",VL6180x_RangeGetStatusErrString(RangeData.errorStatus)); // your code display error code
 8007894:	7a20      	ldrb	r0, [r4, #8]
 8007896:	f7fd fe63 	bl	8005560 <VL6180x_RangeGetStatusErrString>
 800789a:	4601      	mov	r1, r0
 800789c:	4806      	ldr	r0, [pc, #24]	; (80078b8 <laserTryRead+0x68>)
 800789e:	f001 f991 	bl	8008bc4 <iprintf>
		initLaserPoll();
 80078a2:	f7ff ff81 	bl	80077a8 <initLaserPoll>
}
 80078a6:	4628      	mov	r0, r5
 80078a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20002c58 	.word	0x20002c58
 80078b0:	20000a44 	.word	0x20000a44
 80078b4:	20000a40 	.word	0x20000a40
 80078b8:	0800c5ec 	.word	0x0800c5ec

080078bc <VL6180x_I2CWrite>:
void VL6180x_PollDelay(VL6180xDev_t dev) {
	HAL_Delay(1);
}

/*Interface Functions to be implemented*/
int VL6180x_I2CWrite(VL6180xDev_t addr, uint8_t *buff, uint8_t len) {
 80078bc:	b510      	push	{r4, lr}
	int ret;
	ret = HAL_I2C_Master_Transmit(&hi2c2, addr, buff, len, 1);
 80078be:	2401      	movs	r4, #1
int VL6180x_I2CWrite(VL6180xDev_t addr, uint8_t *buff, uint8_t len) {
 80078c0:	b082      	sub	sp, #8
	ret = HAL_I2C_Master_Transmit(&hi2c2, addr, buff, len, 1);
 80078c2:	4613      	mov	r3, r2
 80078c4:	9400      	str	r4, [sp, #0]
 80078c6:	460a      	mov	r2, r1
 80078c8:	4601      	mov	r1, r0
 80078ca:	4802      	ldr	r0, [pc, #8]	; (80078d4 <VL6180x_I2CWrite+0x18>)
 80078cc:	f7fb fa90 	bl	8002df0 <HAL_I2C_Master_Transmit>
	return ret;
}
 80078d0:	b002      	add	sp, #8
 80078d2:	bd10      	pop	{r4, pc}
 80078d4:	20002b3c 	.word	0x20002b3c

080078d8 <VL6180x_I2CRead>:

int VL6180x_I2CRead(VL6180xDev_t addr, uint8_t *buff, uint8_t len) {
 80078d8:	b510      	push	{r4, lr}
	int ret;
	ret = HAL_I2C_Master_Receive(&hi2c2, addr, buff, len, 1);
 80078da:	2401      	movs	r4, #1
int VL6180x_I2CRead(VL6180xDev_t addr, uint8_t *buff, uint8_t len) {
 80078dc:	b082      	sub	sp, #8
	ret = HAL_I2C_Master_Receive(&hi2c2, addr, buff, len, 1);
 80078de:	4613      	mov	r3, r2
 80078e0:	9400      	str	r4, [sp, #0]
 80078e2:	460a      	mov	r2, r1
 80078e4:	4601      	mov	r1, r0
 80078e6:	4802      	ldr	r0, [pc, #8]	; (80078f0 <VL6180x_I2CRead+0x18>)
 80078e8:	f7fb fbf0 	bl	80030cc <HAL_I2C_Master_Receive>
	return ret;
}
 80078ec:	b002      	add	sp, #8
 80078ee:	bd10      	pop	{r4, pc}
 80078f0:	20002b3c 	.word	0x20002b3c

080078f4 <_write>:

/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len)
{
	uint8_t *pDes=Usart1Device.TxBuf[Usart1Device.producerTxBufNum];
 80078f4:	2396      	movs	r3, #150	; 0x96
{
 80078f6:	b570      	push	{r4, r5, r6, lr}
	uint8_t *pDes=Usart1Device.TxBuf[Usart1Device.producerTxBufNum];
 80078f8:	4c17      	ldr	r4, [pc, #92]	; (8007958 <_write+0x64>)
{
 80078fa:	4615      	mov	r5, r2
	uint8_t *pDes=Usart1Device.TxBuf[Usart1Device.producerTxBufNum];
 80078fc:	f8b4 62f0 	ldrh.w	r6, [r4, #752]	; 0x2f0
 8007900:	fb03 4606 	mla	r6, r3, r6, r4

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
 8007904:	4630      	mov	r0, r6
 8007906:	f000 fa99 	bl	8007e3c <memcpy>
	*(pDes+len)='\0';
 800790a:	2300      	movs	r3, #0
 800790c:	5573      	strb	r3, [r6, r5]
	Usart1Device.countTxBuf[Usart1Device.producerTxBufNum] = len;

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	Usart1Device.bufferedTxNum++;
 800790e:	f8b4 12f2 	ldrh.w	r1, [r4, #754]	; 0x2f2
	Usart1Device.countTxBuf[Usart1Device.producerTxBufNum] = len;
 8007912:	f8b4 32f0 	ldrh.w	r3, [r4, #752]	; 0x2f0
	Usart1Device.bufferedTxNum++;
 8007916:	3101      	adds	r1, #1
 8007918:	b289      	uxth	r1, r1
	Usart1Device.countTxBuf[Usart1Device.producerTxBufNum] = len;
 800791a:	eb04 0043 	add.w	r0, r4, r3, lsl #1
 800791e:	b2aa      	uxth	r2, r5

	//Try to send just buffered string if this is the only one
	if(Usart1Device.bufferedTxNum == 1){
 8007920:	2901      	cmp	r1, #1
	Usart1Device.bufferedTxNum++;
 8007922:	f8a4 12f2 	strh.w	r1, [r4, #754]	; 0x2f2
	Usart1Device.countTxBuf[Usart1Device.producerTxBufNum] = len;
 8007926:	f8a0 22f4 	strh.w	r2, [r0, #756]	; 0x2f4
	if(Usart1Device.bufferedTxNum == 1){
 800792a:	d00c      	beq.n	8007946 <_write+0x52>
//	else{
//	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the Usart1Devices would somehow suddenly lost the configurations
//		Usart1Device.bufferedTxNum=Usart1Device.bufferedTxNum;
//	}
	//move producerTxBufNum forward
	Usart1Device.producerTxBufNum++;
 800792c:	3301      	adds	r3, #1
	Usart1Device.producerTxBufNum%=UART_TX_BUF_NUM;
 800792e:	4a0b      	ldr	r2, [pc, #44]	; (800795c <_write+0x68>)
 8007930:	b29b      	uxth	r3, r3
 8007932:	fba2 1203 	umull	r1, r2, r2, r3
 8007936:	0892      	lsrs	r2, r2, #2
 8007938:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800793c:	1a9b      	subs	r3, r3, r2
//		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
//		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
//	};
	return len;
}
 800793e:	4628      	mov	r0, r5
	Usart1Device.producerTxBufNum%=UART_TX_BUF_NUM;
 8007940:	f8a4 32f0 	strh.w	r3, [r4, #752]	; 0x2f0
}
 8007944:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Transmit_DMA(Usart1Device.huart,pDes,Usart1Device.countTxBuf[Usart1Device.producerTxBufNum]);
 8007946:	4631      	mov	r1, r6
 8007948:	f8d4 0388 	ldr.w	r0, [r4, #904]	; 0x388
 800794c:	f7fd fb6c 	bl	8005028 <HAL_UART_Transmit_DMA>
 8007950:	f8b4 32f0 	ldrh.w	r3, [r4, #752]	; 0x2f0
 8007954:	e7ea      	b.n	800792c <_write+0x38>
 8007956:	bf00      	nop
 8007958:	20000124 	.word	0x20000124
 800795c:	cccccccd 	.word	0xcccccccd

08007960 <HAL_UART_TxCpltCallback>:
/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	 /*update information*/
	// Usart1Device.TxEnd = micros();
	 Usart1Device.lastTxTime = Usart1Device.TxEnd - Usart1Device.TxStart;
 8007960:	4b18      	ldr	r3, [pc, #96]	; (80079c4 <HAL_UART_TxCpltCallback+0x64>)
{
 8007962:	b470      	push	{r4, r5, r6}
	 Usart1Device.lastTxCount = Usart1Device.countTxBuf[Usart1Device.consumerTxBufNum];
 8007964:	f8b3 62ee 	ldrh.w	r6, [r3, #750]	; 0x2ee

	/*One consumption done. move consumer forward*/
	Usart1Device.consumerTxBufNum++;
	Usart1Device.consumerTxBufNum%=UART_TX_BUF_NUM;
 8007968:	4a17      	ldr	r2, [pc, #92]	; (80079c8 <HAL_UART_TxCpltCallback+0x68>)
	Usart1Device.consumerTxBufNum++;
 800796a:	1c71      	adds	r1, r6, #1
	Usart1Device.consumerTxBufNum%=UART_TX_BUF_NUM;
 800796c:	b289      	uxth	r1, r1
 800796e:	fba2 0201 	umull	r0, r2, r2, r1

	/*reduce one bufferedTxNum*/
	 Usart1Device.bufferedTxNum--;
 8007972:	f8b3 52f2 	ldrh.w	r5, [r3, #754]	; 0x2f2
	Usart1Device.consumerTxBufNum%=UART_TX_BUF_NUM;
 8007976:	0892      	lsrs	r2, r2, #2
 8007978:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	 Usart1Device.lastTxTime = Usart1Device.TxEnd - Usart1Device.TxStart;
 800797c:	f8d3 0384 	ldr.w	r0, [r3, #900]	; 0x384
 8007980:	f8d3 4380 	ldr.w	r4, [r3, #896]	; 0x380
	 Usart1Device.lastTxCount = Usart1Device.countTxBuf[Usart1Device.consumerTxBufNum];
 8007984:	eb03 0646 	add.w	r6, r3, r6, lsl #1
	Usart1Device.consumerTxBufNum%=UART_TX_BUF_NUM;
 8007988:	1a89      	subs	r1, r1, r2
	 Usart1Device.lastTxCount = Usart1Device.countTxBuf[Usart1Device.consumerTxBufNum];
 800798a:	f8b6 62f4 	ldrh.w	r6, [r6, #756]	; 0x2f4
	 Usart1Device.bufferedTxNum--;
 800798e:	1e6a      	subs	r2, r5, #1
	 Usart1Device.lastTxTime = Usart1Device.TxEnd - Usart1Device.TxStart;
 8007990:	1b00      	subs	r0, r0, r4
	Usart1Device.consumerTxBufNum%=UART_TX_BUF_NUM;
 8007992:	b289      	uxth	r1, r1
	 Usart1Device.bufferedTxNum--;
 8007994:	b292      	uxth	r2, r2
	 Usart1Device.lastTxTime = Usart1Device.TxEnd - Usart1Device.TxStart;
 8007996:	f8c3 038c 	str.w	r0, [r3, #908]	; 0x38c
	 Usart1Device.lastTxCount = Usart1Device.countTxBuf[Usart1Device.consumerTxBufNum];
 800799a:	f8c3 6390 	str.w	r6, [r3, #912]	; 0x390
	Usart1Device.consumerTxBufNum%=UART_TX_BUF_NUM;
 800799e:	f8a3 12ee 	strh.w	r1, [r3, #750]	; 0x2ee
	 Usart1Device.bufferedTxNum--;
 80079a2:	f8a3 22f2 	strh.w	r2, [r3, #754]	; 0x2f2

	/*If it is still positive, go on consume next*/
	if(Usart1Device.bufferedTxNum>0){
 80079a6:	b90a      	cbnz	r2, 80079ac <HAL_UART_TxCpltCallback+0x4c>
	//	Usart1Device.TxStart = micros();
		uint8_t *px = &Usart1Device.TxBuf[Usart1Device.consumerTxBufNum][0];
		HAL_UART_Transmit_DMA(Usart1Device.huart,px,Usart1Device.countTxBuf[Usart1Device.consumerTxBufNum]);
	}
}
 80079a8:	bc70      	pop	{r4, r5, r6}
 80079aa:	4770      	bx	lr
		uint8_t *px = &Usart1Device.TxBuf[Usart1Device.consumerTxBufNum][0];
 80079ac:	2096      	movs	r0, #150	; 0x96
}
 80079ae:	bc70      	pop	{r4, r5, r6}
		HAL_UART_Transmit_DMA(Usart1Device.huart,px,Usart1Device.countTxBuf[Usart1Device.consumerTxBufNum]);
 80079b0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80079b4:	f8b2 22f4 	ldrh.w	r2, [r2, #756]	; 0x2f4
 80079b8:	fb00 3101 	mla	r1, r0, r1, r3
 80079bc:	f8d3 0388 	ldr.w	r0, [r3, #904]	; 0x388
 80079c0:	f7fd bb32 	b.w	8005028 <HAL_UART_Transmit_DMA>
 80079c4:	20000124 	.word	0x20000124
 80079c8:	cccccccd 	.word	0xcccccccd

080079cc <HAL_I2C_ErrorCallback.part.1>:
 {
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
    	delay_us(1);
    }
}
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 80079cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 //   HAL_I2C_DeInit(hi2c);

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
    GPIO_InitStructure.Pull = GPIO_NOPULL;

    GPIO_InitStructure.Pin = SCL_PIN;
 80079ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80079d2:	2011      	movs	r0, #17
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80079d4:	f04f 0c00 	mov.w	ip, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);

    GPIO_InitStructure.Pin = SDA_PIN;
 80079d8:	f44f 6700 	mov.w	r7, #2048	; 0x800
    __HAL_I2C_DISABLE(hi2c);
 80079dc:	4e59      	ldr	r6, [pc, #356]	; (8007b44 <HAL_I2C_ErrorCallback.part.1+0x178>)
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 80079de:	b085      	sub	sp, #20
    __HAL_I2C_DISABLE(hi2c);
 80079e0:	6832      	ldr	r2, [r6, #0]
    GPIO_InitStructure.Pin = SCL_PIN;
 80079e2:	ad04      	add	r5, sp, #16
    __HAL_I2C_DISABLE(hi2c);
 80079e4:	6813      	ldr	r3, [r2, #0]
 80079e6:	f023 0301 	bic.w	r3, r3, #1
 80079ea:	6013      	str	r3, [r2, #0]
    GPIO_InitStructure.Pin = SCL_PIN;
 80079ec:	f845 4d10 	str.w	r4, [r5, #-16]!
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80079f0:	4629      	mov	r1, r5
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80079f2:	9001      	str	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80079f4:	4854      	ldr	r0, [pc, #336]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80079f6:	f8cd c008 	str.w	ip, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80079fa:	f7fa ff05 	bl	8002808 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80079fe:	4629      	mov	r1, r5
 8007a00:	4851      	ldr	r0, [pc, #324]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
    GPIO_InitStructure.Pin = SDA_PIN;
 8007a02:	9700      	str	r7, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007a04:	f7fa ff00 	bl	8002808 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(GPIOB, SDA_PIN, GPIO_PIN_SET);
 8007a08:	4639      	mov	r1, r7
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	484e      	ldr	r0, [pc, #312]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007a0e:	f7fa fffb 	bl	8002a08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SCL_PIN, GPIO_PIN_SET);
 8007a12:	4621      	mov	r1, r4
 8007a14:	2201      	movs	r2, #1
 8007a16:	484c      	ldr	r0, [pc, #304]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007a18:	f7fa fff6 	bl	8002a08 <HAL_GPIO_WritePin>
 8007a1c:	2429      	movs	r4, #41	; 0x29
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
 8007a1e:	4f4a      	ldr	r7, [pc, #296]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007a20:	e004      	b.n	8007a2c <HAL_I2C_ErrorCallback.part.1+0x60>
 8007a22:	3c01      	subs	r4, #1
 8007a24:	d009      	beq.n	8007a3a <HAL_I2C_ErrorCallback.part.1+0x6e>
    	delay_us(1);
 8007a26:	2001      	movs	r0, #1
 8007a28:	f7f9 fdf6 	bl	8001618 <delay_us>
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
 8007a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a30:	4638      	mov	r0, r7
 8007a32:	f7fa ffe3 	bl	80029fc <HAL_GPIO_ReadPin>
 8007a36:	2801      	cmp	r0, #1
 8007a38:	d1f3      	bne.n	8007a22 <HAL_I2C_ErrorCallback.part.1+0x56>
 8007a3a:	2429      	movs	r4, #41	; 0x29
 8007a3c:	4f42      	ldr	r7, [pc, #264]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007a3e:	e004      	b.n	8007a4a <HAL_I2C_ErrorCallback.part.1+0x7e>
 8007a40:	3c01      	subs	r4, #1
 8007a42:	d009      	beq.n	8007a58 <HAL_I2C_ErrorCallback.part.1+0x8c>
    	delay_us(1);
 8007a44:	2001      	movs	r0, #1
 8007a46:	f7f9 fde7 	bl	8001618 <delay_us>
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
 8007a4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f7fa ffd4 	bl	80029fc <HAL_GPIO_ReadPin>
 8007a54:	2801      	cmp	r0, #1
 8007a56:	d1f3      	bne.n	8007a40 <HAL_I2C_ErrorCallback.part.1+0x74>

    wait_for_gpio_state_timeout_us(GPIOB, SCL_PIN, GPIO_PIN_SET, timeout);
    wait_for_gpio_state_timeout_us(GPIOB, SDA_PIN, GPIO_PIN_SET, timeout);

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(GPIOB, SDA_PIN, GPIO_PIN_RESET);
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a5e:	483a      	ldr	r0, [pc, #232]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007a60:	f7fa ffd2 	bl	8002a08 <HAL_GPIO_WritePin>
 8007a64:	2429      	movs	r4, #41	; 0x29
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
 8007a66:	4f38      	ldr	r7, [pc, #224]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007a68:	e004      	b.n	8007a74 <HAL_I2C_ErrorCallback.part.1+0xa8>
 8007a6a:	3c01      	subs	r4, #1
 8007a6c:	d009      	beq.n	8007a82 <HAL_I2C_ErrorCallback.part.1+0xb6>
    	delay_us(1);
 8007a6e:	2001      	movs	r0, #1
 8007a70:	f7f9 fdd2 	bl	8001618 <delay_us>
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
 8007a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a78:	4638      	mov	r0, r7
 8007a7a:	f7fa ffbf 	bl	80029fc <HAL_GPIO_ReadPin>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d1f3      	bne.n	8007a6a <HAL_I2C_ErrorCallback.part.1+0x9e>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout_us(GPIOB, SDA_PIN, GPIO_PIN_RESET, timeout);

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(GPIOB, SCL_PIN, GPIO_PIN_RESET);
 8007a82:	2200      	movs	r2, #0
 8007a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a88:	482f      	ldr	r0, [pc, #188]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007a8a:	f7fa ffbd 	bl	8002a08 <HAL_GPIO_WritePin>
 8007a8e:	2429      	movs	r4, #41	; 0x29
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
 8007a90:	4f2d      	ldr	r7, [pc, #180]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007a92:	e004      	b.n	8007a9e <HAL_I2C_ErrorCallback.part.1+0xd2>
 8007a94:	3c01      	subs	r4, #1
 8007a96:	d009      	beq.n	8007aac <HAL_I2C_ErrorCallback.part.1+0xe0>
    	delay_us(1);
 8007a98:	2001      	movs	r0, #1
 8007a9a:	f7f9 fdbd 	bl	8001618 <delay_us>
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
 8007a9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	f7fa ffaa 	bl	80029fc <HAL_GPIO_ReadPin>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d1f3      	bne.n	8007a94 <HAL_I2C_ErrorCallback.part.1+0xc8>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout_us(GPIOB, SCL_PIN, GPIO_PIN_RESET, timeout);

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(GPIOB, SCL_PIN, GPIO_PIN_SET);
 8007aac:	2201      	movs	r2, #1
 8007aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ab2:	4825      	ldr	r0, [pc, #148]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007ab4:	f7fa ffa8 	bl	8002a08 <HAL_GPIO_WritePin>
 8007ab8:	2429      	movs	r4, #41	; 0x29
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
 8007aba:	4f23      	ldr	r7, [pc, #140]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007abc:	e004      	b.n	8007ac8 <HAL_I2C_ErrorCallback.part.1+0xfc>
 8007abe:	3c01      	subs	r4, #1
 8007ac0:	d009      	beq.n	8007ad6 <HAL_I2C_ErrorCallback.part.1+0x10a>
    	delay_us(1);
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	f7f9 fda8 	bl	8001618 <delay_us>
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
 8007ac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007acc:	4638      	mov	r0, r7
 8007ace:	f7fa ff95 	bl	80029fc <HAL_GPIO_ReadPin>
 8007ad2:	2801      	cmp	r0, #1
 8007ad4:	d1f3      	bne.n	8007abe <HAL_I2C_ErrorCallback.part.1+0xf2>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout_us(GPIOB, SCL_PIN, GPIO_PIN_SET, timeout);

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(GPIOB, SDA_PIN, GPIO_PIN_SET);
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007adc:	481a      	ldr	r0, [pc, #104]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007ade:	f7fa ff93 	bl	8002a08 <HAL_GPIO_WritePin>
 8007ae2:	2429      	movs	r4, #41	; 0x29
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
 8007ae4:	4f18      	ldr	r7, [pc, #96]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
 8007ae6:	e004      	b.n	8007af2 <HAL_I2C_ErrorCallback.part.1+0x126>
 8007ae8:	3c01      	subs	r4, #1
 8007aea:	d009      	beq.n	8007b00 <HAL_I2C_ErrorCallback.part.1+0x134>
    	delay_us(1);
 8007aec:	2001      	movs	r0, #1
 8007aee:	f7f9 fd93 	bl	8001618 <delay_us>
    while(state != HAL_GPIO_ReadPin(port, pin) && (timeout--)){
 8007af2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007af6:	4638      	mov	r0, r7
 8007af8:	f7fa ff80 	bl	80029fc <HAL_GPIO_ReadPin>
 8007afc:	2801      	cmp	r0, #1
 8007afe:	d1f3      	bne.n	8007ae8 <HAL_I2C_ErrorCallback.part.1+0x11c>
    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout_us(GPIOB, SDA_PIN, GPIO_PIN_SET, timeout);

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Pin = SDA_PIN|SCL_PIN;
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8007b00:	2212      	movs	r2, #18
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8007b02:	2303      	movs	r3, #3
    GPIO_InitStructure.Pin = SDA_PIN|SCL_PIN;
 8007b04:	f44f 6440 	mov.w	r4, #3072	; 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007b08:	4629      	mov	r1, r5
 8007b0a:	480f      	ldr	r0, [pc, #60]	; (8007b48 <HAL_I2C_ErrorCallback.part.1+0x17c>)
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8007b0c:	e9cd 4200 	strd	r4, r2, [sp]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8007b10:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007b12:	f7fa fe79 	bl	8002808 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8007b16:	6832      	ldr	r2, [r6, #0]
 8007b18:	6813      	ldr	r3, [r2, #0]
 8007b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b1e:	6013      	str	r3, [r2, #0]
    asm("nop");
 8007b20:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8007b22:	6832      	ldr	r2, [r6, #0]
 8007b24:	6813      	ldr	r3, [r2, #0]
 8007b26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b2a:	6013      	str	r3, [r2, #0]
    asm("nop");
 8007b2c:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    __HAL_I2C_ENABLE(hi2c);
 8007b2e:	6832      	ldr	r2, [r6, #0]
 8007b30:	6813      	ldr	r3, [r2, #0]
 8007b32:	f043 0301 	orr.w	r3, r3, #1
 8007b36:	6013      	str	r3, [r2, #0]
    asm("nop");
 8007b38:	bf00      	nop

    // Call initialization function.
    MX_I2C2_Init();
 8007b3a:	f7f9 fcb3 	bl	80014a4 <MX_I2C2_Init>
	}
}
 8007b3e:	b005      	add	sp, #20
 8007b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20002b3c 	.word	0x20002b3c
 8007b48:	40010c00 	.word	0x40010c00

08007b4c <readSensors>:
	if((ret=HAL_I2C_Master_Receive(&hi2c2, PRESSUREI2CADDRESS, PressureBuffer, 2,1)==HAL_OK)){
 8007b4c:	2301      	movs	r3, #1
{
 8007b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if((ret=HAL_I2C_Master_Receive(&hi2c2, PRESSUREI2CADDRESS, PressureBuffer, 2,1)==HAL_OK)){
 8007b52:	4c33      	ldr	r4, [pc, #204]	; (8007c20 <readSensors+0xd4>)
{
 8007b54:	b082      	sub	sp, #8
	if((ret=HAL_I2C_Master_Receive(&hi2c2, PRESSUREI2CADDRESS, PressureBuffer, 2,1)==HAL_OK)){
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	4622      	mov	r2, r4
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	2150      	movs	r1, #80	; 0x50
 8007b5e:	4831      	ldr	r0, [pc, #196]	; (8007c24 <readSensors+0xd8>)
 8007b60:	f7fb fab4 	bl	80030cc <HAL_I2C_Master_Receive>
 8007b64:	4606      	mov	r6, r0
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d149      	bne.n	8007bfe <readSensors+0xb2>
		pressureRaw = (int16_t) (((PressureBuffer[0]<<8) | PressureBuffer[1])&0x3FFF);
 8007b6a:	7822      	ldrb	r2, [r4, #0]
 8007b6c:	7860      	ldrb	r0, [r4, #1]
 8007b6e:	4b2e      	ldr	r3, [pc, #184]	; (8007c28 <readSensors+0xdc>)
 8007b70:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8007b74:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8007b78:	8018      	strh	r0, [r3, #0]
		sensorData.pressure=(int)((pressureRaw-1638)*0.0000762951f*400);
 8007b7a:	f2a0 6066 	subw	r0, r0, #1638	; 0x666
 8007b7e:	f7f9 f8ad 	bl	8000cdc <__aeabi_i2f>
 8007b82:	492a      	ldr	r1, [pc, #168]	; (8007c2c <readSensors+0xe0>)
 8007b84:	f7f9 f8fe 	bl	8000d84 <__aeabi_fmul>
 8007b88:	4929      	ldr	r1, [pc, #164]	; (8007c30 <readSensors+0xe4>)
 8007b8a:	f7f9 f8fb 	bl	8000d84 <__aeabi_fmul>
 8007b8e:	f7f9 fabf 	bl	8001110 <__aeabi_f2iz>
 8007b92:	4c28      	ldr	r4, [pc, #160]	; (8007c34 <readSensors+0xe8>)
	if(!imuInitFlag){
 8007b94:	4d28      	ldr	r5, [pc, #160]	; (8007c38 <readSensors+0xec>)
		sensorData.pressure=(int)((pressureRaw-1638)*0.0000762951f*400);
 8007b96:	8823      	ldrh	r3, [r4, #0]
 8007b98:	f360 0308 	bfi	r3, r0, #0, #9
 8007b9c:	8023      	strh	r3, [r4, #0]
	if(!imuInitFlag){
 8007b9e:	682b      	ldr	r3, [r5, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d035      	beq.n	8007c10 <readSensors+0xc4>
	if((ret=readIMU_QuaternionsPacked(&(sensorData.quaternionCom))!=HAL_OK))
 8007ba4:	4825      	ldr	r0, [pc, #148]	; (8007c3c <readSensors+0xf0>)
 8007ba6:	f7ff fa95 	bl	80070d4 <readIMU_QuaternionsPacked>
 8007baa:	4607      	mov	r7, r0
 8007bac:	b110      	cbz	r0, 8007bb4 <readSensors+0x68>
		printf("IMU err\r\n");
 8007bae:	4824      	ldr	r0, [pc, #144]	; (8007c40 <readSensors+0xf4>)
 8007bb0:	f001 f87c 	bl	8008cac <puts>
	if (!laserInitPollflag) {
 8007bb4:	4d23      	ldr	r5, [pc, #140]	; (8007c44 <readSensors+0xf8>)
 8007bb6:	782b      	ldrb	r3, [r5, #0]
 8007bb8:	b91b      	cbnz	r3, 8007bc2 <readSensors+0x76>
		initLaserPoll();
 8007bba:	f7ff fdf5 	bl	80077a8 <initLaserPoll>
		laserInitPollflag = 1;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	702b      	strb	r3, [r5, #0]
	ret=laserTryRead(buf);
 8007bc2:	4d21      	ldr	r5, [pc, #132]	; (8007c48 <readSensors+0xfc>)
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	f7ff fe43 	bl	8007850 <laserTryRead>
	sensorData.distance=*buf;
 8007bca:	882a      	ldrh	r2, [r5, #0]
 8007bcc:	7863      	ldrb	r3, [r4, #1]
	ret=laserTryRead(buf);
 8007bce:	4680      	mov	r8, r0
	sensorData.distance=*buf;
 8007bd0:	f362 0347 	bfi	r3, r2, #1, #7
 8007bd4:	7063      	strb	r3, [r4, #1]
	laserStartSingleShot();
 8007bd6:	f7ff fe31 	bl	800783c <laserStartSingleShot>
	sensorData.distance=laserDis;
 8007bda:	7863      	ldrb	r3, [r4, #1]
 8007bdc:	882a      	ldrh	r2, [r5, #0]
 8007bde:	f362 0347 	bfi	r3, r2, #1, #7
 8007be2:	7063      	strb	r3, [r4, #1]
	if(ret[0]||ret[1]||ret[2])
 8007be4:	b106      	cbz	r6, 8007be8 <readSensors+0x9c>
 8007be6:	b127      	cbz	r7, 8007bf2 <readSensors+0xa6>
}
 8007be8:	b002      	add	sp, #8
 8007bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bee:	f7ff beed 	b.w	80079cc <HAL_I2C_ErrorCallback.part.1>
	if(ret[0]||ret[1]||ret[2])
 8007bf2:	f1b8 0f00 	cmp.w	r8, #0
 8007bf6:	d1f7      	bne.n	8007be8 <readSensors+0x9c>
}
 8007bf8:	b002      	add	sp, #8
 8007bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!imuInitFlag){
 8007bfe:	4d0e      	ldr	r5, [pc, #56]	; (8007c38 <readSensors+0xec>)
		printf("pressure err %d\r\n",ret);
 8007c00:	2100      	movs	r1, #0
 8007c02:	4812      	ldr	r0, [pc, #72]	; (8007c4c <readSensors+0x100>)
 8007c04:	f000 ffde 	bl	8008bc4 <iprintf>
	if(!imuInitFlag){
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	4c0a      	ldr	r4, [pc, #40]	; (8007c34 <readSensors+0xe8>)
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1c9      	bne.n	8007ba4 <readSensors+0x58>
		if((ret=IMU_Init())==HAL_OK)
 8007c10:	f7ff fb12 	bl	8007238 <IMU_Init>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d1c5      	bne.n	8007ba4 <readSensors+0x58>
			imuInitFlag=1;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	602b      	str	r3, [r5, #0]
 8007c1c:	e7c2      	b.n	8007ba4 <readSensors+0x58>
 8007c1e:	bf00      	nop
 8007c20:	20002c84 	.word	0x20002c84
 8007c24:	20002b3c 	.word	0x20002b3c
 8007c28:	20002c80 	.word	0x20002c80
 8007c2c:	38a0009f 	.word	0x38a0009f
 8007c30:	43c80000 	.word	0x43c80000
 8007c34:	20002c88 	.word	0x20002c88
 8007c38:	20000a48 	.word	0x20000a48
 8007c3c:	20002c8a 	.word	0x20002c8a
 8007c40:	0800c60c 	.word	0x0800c60c
 8007c44:	20000a4c 	.word	0x20000a4c
 8007c48:	20002c90 	.word	0x20002c90
 8007c4c:	0800c5f8 	.word	0x0800c5f8

08007c50 <canConfig>:
void canConfig(){
 8007c50:	b5f0      	push	{r4, r5, r6, r7, lr}
	sFilterConfig.SlaveStartFilterBank = 14;
 8007c52:	f04f 0c0e 	mov.w	ip, #14
	sFilterConfig.FilterBank = 0;
 8007c56:	2600      	movs	r6, #0
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007c58:	2701      	movs	r7, #1
	canbus.CanHandle=hcan;
 8007c5a:	4d17      	ldr	r5, [pc, #92]	; (8007cb8 <canConfig+0x68>)
 8007c5c:	4c17      	ldr	r4, [pc, #92]	; (8007cbc <canConfig+0x6c>)
 8007c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c66:	e895 0003 	ldmia.w	r5, {r0, r1}
void canConfig(){
 8007c6a:	b08b      	sub	sp, #44	; 0x2c
	canbus.CanHandle=hcan;
 8007c6c:	e884 0003 	stmia.w	r4, {r0, r1}
	if (HAL_CAN_ConfigFilter(&canbus.CanHandle, &sFilterConfig) != HAL_OK)
 8007c70:	f1a4 0020 	sub.w	r0, r4, #32
 8007c74:	4669      	mov	r1, sp
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007c76:	e9cd 6605 	strd	r6, r6, [sp, #20]
	sFilterConfig.FilterIdLow = 0x0000;
 8007c7a:	e9cd 6600 	strd	r6, r6, [sp]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8007c7e:	e9cd 6602 	strd	r6, r6, [sp, #8]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8007c82:	9604      	str	r6, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8007c84:	e9cd 7707 	strd	r7, r7, [sp, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 8007c88:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&canbus.CanHandle, &sFilterConfig) != HAL_OK)
 8007c8c:	f7fa f902 	bl	8001e94 <HAL_CAN_ConfigFilter>
 8007c90:	b978      	cbnz	r0, 8007cb2 <canConfig+0x62>
	if (HAL_CAN_Start(&canbus.CanHandle) != HAL_OK)
 8007c92:	480a      	ldr	r0, [pc, #40]	; (8007cbc <canConfig+0x6c>)
 8007c94:	f7fa f97a 	bl	8001f8c <HAL_CAN_Start>
 8007c98:	b940      	cbnz	r0, 8007cac <canConfig+0x5c>
	if (HAL_CAN_ActivateNotification(&canbus.CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8007c9a:	2112      	movs	r1, #18
 8007c9c:	4807      	ldr	r0, [pc, #28]	; (8007cbc <canConfig+0x6c>)
 8007c9e:	f7fa fa81 	bl	80021a4 <HAL_CAN_ActivateNotification>
 8007ca2:	b108      	cbz	r0, 8007ca8 <canConfig+0x58>
	Error_Handler();
 8007ca4:	f7f9 fcc2 	bl	800162c <Error_Handler>
}
 8007ca8:	b00b      	add	sp, #44	; 0x2c
 8007caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Error_Handler();
 8007cac:	f7f9 fcbe 	bl	800162c <Error_Handler>
 8007cb0:	e7f3      	b.n	8007c9a <canConfig+0x4a>
	Error_Handler();
 8007cb2:	f7f9 fcbb 	bl	800162c <Error_Handler>
 8007cb6:	e7ec      	b.n	8007c92 <canConfig+0x42>
 8007cb8:	20000a5c 	.word	0x20000a5c
 8007cbc:	20002cac 	.word	0x20002cac

08007cc0 <canSend>:
	canbus.TxHeader.StdId = CANBUS_ID;
 8007cc0:	2200      	movs	r2, #0
	canbus.TxHeader.ExtId = 0x01;
 8007cc2:	2001      	movs	r0, #1
{
 8007cc4:	b570      	push	{r4, r5, r6, lr}
	canbus.TxHeader.DLC = sizeof(struct SENSORDATA);
 8007cc6:	2608      	movs	r6, #8
	canbus.TxHeader.StdId = CANBUS_ID;
 8007cc8:	4c0b      	ldr	r4, [pc, #44]	; (8007cf8 <canSend+0x38>)
	canbus.TxData=(uint8_t *)(&sensorData);
 8007cca:	4d0c      	ldr	r5, [pc, #48]	; (8007cfc <canSend+0x3c>)
	canbus.TxHeader.StdId = CANBUS_ID;
 8007ccc:	62a2      	str	r2, [r4, #40]	; 0x28
	canbus.TxHeader.IDE = CAN_ID_STD;
 8007cce:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
	canbus.TxHeader.TransmitGlobalTime = DISABLE;
 8007cd2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
	canbus.TxHeader.ExtId = 0x01;
 8007cd6:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (HAL_CAN_AddTxMessage(&canbus.CanHandle, &canbus.TxHeader, canbus.TxData, &canbus.TxMailbox) != HAL_OK)
 8007cd8:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8007cdc:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	462a      	mov	r2, r5
	canbus.TxHeader.DLC = sizeof(struct SENSORDATA);
 8007ce4:	63a6      	str	r6, [r4, #56]	; 0x38
	canbus.TxData=(uint8_t *)(&sensorData);
 8007ce6:	65e5      	str	r5, [r4, #92]	; 0x5c
	if (HAL_CAN_AddTxMessage(&canbus.CanHandle, &canbus.TxHeader, canbus.TxData, &canbus.TxMailbox) != HAL_OK)
 8007ce8:	f7fa f980 	bl	8001fec <HAL_CAN_AddTxMessage>
 8007cec:	b900      	cbnz	r0, 8007cf0 <canSend+0x30>
}
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  Error_Handler();
 8007cf4:	f7f9 bc9a 	b.w	800162c <Error_Handler>
 8007cf8:	20002cac 	.word	0x20002cac
 8007cfc:	20002c88 	.word	0x20002c88

08007d00 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8007d00:	b538      	push	{r3, r4, r5, lr}
  canbus.RxData=(uint8_t *)(&sensorDataRx);
 8007d02:	4c0b      	ldr	r4, [pc, #44]	; (8007d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8007d04:	4d0b      	ldr	r5, [pc, #44]	; (8007d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
  if (HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO0, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 8007d06:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	462b      	mov	r3, r5
 8007d0e:	2100      	movs	r1, #0
  canbus.RxData=(uint8_t *)(&sensorDataRx);
 8007d10:	6625      	str	r5, [r4, #96]	; 0x60
  if (HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO0, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 8007d12:	f7fa f9c7 	bl	80020a4 <HAL_CAN_GetRxMessage>
 8007d16:	b108      	cbz	r0, 8007d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
    Error_Handler();
 8007d18:	f7f9 fc88 	bl	800162c <Error_Handler>
	 unpackQuaternion(&(sensorDataRx.quaternionCom), (struct QUATERNION*)imuGetData);
 8007d1c:	4906      	ldr	r1, [pc, #24]	; (8007d38 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8007d1e:	4807      	ldr	r0, [pc, #28]	; (8007d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8007d20:	f7ff faaa 	bl	8007278 <unpackQuaternion>
  canbusPointer->TxData=(uint8_t *)(&sensorData);
 8007d24:	4a06      	ldr	r2, [pc, #24]	; (8007d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
  canbus.TxData		   =(uint8_t *)(&sensorData);
 8007d26:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
  canbusPointer->TxData=(uint8_t *)(&sensorData);
 8007d28:	6812      	ldr	r2, [r2, #0]
  canbus.TxData		   =(uint8_t *)(&sensorData);
 8007d2a:	65e3      	str	r3, [r4, #92]	; 0x5c
  canbusPointer->TxData=(uint8_t *)(&sensorData);
 8007d2c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	20002cac 	.word	0x20002cac
 8007d34:	20002c94 	.word	0x20002c94
 8007d38:	20002c9c 	.word	0x20002c9c
 8007d3c:	20002c96 	.word	0x20002c96
 8007d40:	200004b8 	.word	0x200004b8
 8007d44:	20002c88 	.word	0x20002c88

08007d48 <HAL_I2C_ErrorCallback>:
	if(hi2c==&hi2c2){
 8007d48:	4b02      	ldr	r3, [pc, #8]	; (8007d54 <HAL_I2C_ErrorCallback+0xc>)
 8007d4a:	4283      	cmp	r3, r0
 8007d4c:	d000      	beq.n	8007d50 <HAL_I2C_ErrorCallback+0x8>
}
 8007d4e:	4770      	bx	lr
 8007d50:	f7ff be3c 	b.w	80079cc <HAL_I2C_ErrorCallback.part.1>
 8007d54:	20002b3c 	.word	0x20002b3c

08007d58 <round>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007d5e:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8007d62:	2c13      	cmp	r4, #19
 8007d64:	4606      	mov	r6, r0
 8007d66:	460d      	mov	r5, r1
 8007d68:	460b      	mov	r3, r1
 8007d6a:	468c      	mov	ip, r1
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	dc17      	bgt.n	8007da0 <round+0x48>
 8007d70:	2c00      	cmp	r4, #0
 8007d72:	da09      	bge.n	8007d88 <round+0x30>
 8007d74:	3401      	adds	r4, #1
 8007d76:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007d7a:	d103      	bne.n	8007d84 <round+0x2c>
 8007d7c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007d80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007d84:	2200      	movs	r2, #0
 8007d86:	e028      	b.n	8007dda <round+0x82>
 8007d88:	4915      	ldr	r1, [pc, #84]	; (8007de0 <round+0x88>)
 8007d8a:	4121      	asrs	r1, r4
 8007d8c:	420d      	tst	r5, r1
 8007d8e:	d100      	bne.n	8007d92 <round+0x3a>
 8007d90:	b178      	cbz	r0, 8007db2 <round+0x5a>
 8007d92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d96:	4123      	asrs	r3, r4
 8007d98:	4463      	add	r3, ip
 8007d9a:	ea23 0301 	bic.w	r3, r3, r1
 8007d9e:	e7f1      	b.n	8007d84 <round+0x2c>
 8007da0:	2c33      	cmp	r4, #51	; 0x33
 8007da2:	dd09      	ble.n	8007db8 <round+0x60>
 8007da4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007da8:	d103      	bne.n	8007db2 <round+0x5a>
 8007daa:	f7f8 f9df 	bl	800016c <__adddf3>
 8007dae:	4606      	mov	r6, r0
 8007db0:	460d      	mov	r5, r1
 8007db2:	4630      	mov	r0, r6
 8007db4:	4629      	mov	r1, r5
 8007db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007dc0:	40f8      	lsrs	r0, r7
 8007dc2:	4206      	tst	r6, r0
 8007dc4:	d0f5      	beq.n	8007db2 <round+0x5a>
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007dcc:	fa01 f404 	lsl.w	r4, r1, r4
 8007dd0:	1932      	adds	r2, r6, r4
 8007dd2:	bf28      	it	cs
 8007dd4:	185b      	addcs	r3, r3, r1
 8007dd6:	ea22 0200 	bic.w	r2, r2, r0
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	e7e6      	b.n	8007dae <round+0x56>
 8007de0:	000fffff 	.word	0x000fffff

08007de4 <calloc>:
 8007de4:	4b02      	ldr	r3, [pc, #8]	; (8007df0 <calloc+0xc>)
 8007de6:	460a      	mov	r2, r1
 8007de8:	4601      	mov	r1, r0
 8007dea:	6818      	ldr	r0, [r3, #0]
 8007dec:	f000 b852 	b.w	8007e94 <_calloc_r>
 8007df0:	200004bc 	.word	0x200004bc

08007df4 <__libc_init_array>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	2500      	movs	r5, #0
 8007df8:	4e0c      	ldr	r6, [pc, #48]	; (8007e2c <__libc_init_array+0x38>)
 8007dfa:	4c0d      	ldr	r4, [pc, #52]	; (8007e30 <__libc_init_array+0x3c>)
 8007dfc:	1ba4      	subs	r4, r4, r6
 8007dfe:	10a4      	asrs	r4, r4, #2
 8007e00:	42a5      	cmp	r5, r4
 8007e02:	d109      	bne.n	8007e18 <__libc_init_array+0x24>
 8007e04:	f004 fa96 	bl	800c334 <_init>
 8007e08:	2500      	movs	r5, #0
 8007e0a:	4e0a      	ldr	r6, [pc, #40]	; (8007e34 <__libc_init_array+0x40>)
 8007e0c:	4c0a      	ldr	r4, [pc, #40]	; (8007e38 <__libc_init_array+0x44>)
 8007e0e:	1ba4      	subs	r4, r4, r6
 8007e10:	10a4      	asrs	r4, r4, #2
 8007e12:	42a5      	cmp	r5, r4
 8007e14:	d105      	bne.n	8007e22 <__libc_init_array+0x2e>
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
 8007e18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e1c:	4798      	blx	r3
 8007e1e:	3501      	adds	r5, #1
 8007e20:	e7ee      	b.n	8007e00 <__libc_init_array+0xc>
 8007e22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e26:	4798      	blx	r3
 8007e28:	3501      	adds	r5, #1
 8007e2a:	e7f2      	b.n	8007e12 <__libc_init_array+0x1e>
 8007e2c:	0800c938 	.word	0x0800c938
 8007e30:	0800c938 	.word	0x0800c938
 8007e34:	0800c938 	.word	0x0800c938
 8007e38:	0800c93c 	.word	0x0800c93c

08007e3c <memcpy>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	1e43      	subs	r3, r0, #1
 8007e40:	440a      	add	r2, r1
 8007e42:	4291      	cmp	r1, r2
 8007e44:	d100      	bne.n	8007e48 <memcpy+0xc>
 8007e46:	bd10      	pop	{r4, pc}
 8007e48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e50:	e7f7      	b.n	8007e42 <memcpy+0x6>

08007e52 <memmove>:
 8007e52:	4288      	cmp	r0, r1
 8007e54:	b510      	push	{r4, lr}
 8007e56:	eb01 0302 	add.w	r3, r1, r2
 8007e5a:	d807      	bhi.n	8007e6c <memmove+0x1a>
 8007e5c:	1e42      	subs	r2, r0, #1
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	d00a      	beq.n	8007e78 <memmove+0x26>
 8007e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e66:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e6a:	e7f8      	b.n	8007e5e <memmove+0xc>
 8007e6c:	4283      	cmp	r3, r0
 8007e6e:	d9f5      	bls.n	8007e5c <memmove+0xa>
 8007e70:	1881      	adds	r1, r0, r2
 8007e72:	1ad2      	subs	r2, r2, r3
 8007e74:	42d3      	cmn	r3, r2
 8007e76:	d100      	bne.n	8007e7a <memmove+0x28>
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e82:	e7f7      	b.n	8007e74 <memmove+0x22>

08007e84 <memset>:
 8007e84:	4603      	mov	r3, r0
 8007e86:	4402      	add	r2, r0
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d100      	bne.n	8007e8e <memset+0xa>
 8007e8c:	4770      	bx	lr
 8007e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e92:	e7f9      	b.n	8007e88 <memset+0x4>

08007e94 <_calloc_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	fb02 f401 	mul.w	r4, r2, r1
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	f000 f808 	bl	8007eb0 <_malloc_r>
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	b118      	cbz	r0, 8007eac <_calloc_r+0x18>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	f7ff ffec 	bl	8007e84 <memset>
 8007eac:	4628      	mov	r0, r5
 8007eae:	bd38      	pop	{r3, r4, r5, pc}

08007eb0 <_malloc_r>:
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	1ccd      	adds	r5, r1, #3
 8007eb4:	f025 0503 	bic.w	r5, r5, #3
 8007eb8:	3508      	adds	r5, #8
 8007eba:	2d0c      	cmp	r5, #12
 8007ebc:	bf38      	it	cc
 8007ebe:	250c      	movcc	r5, #12
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	db01      	blt.n	8007eca <_malloc_r+0x1a>
 8007ec6:	42a9      	cmp	r1, r5
 8007ec8:	d903      	bls.n	8007ed2 <_malloc_r+0x22>
 8007eca:	230c      	movs	r3, #12
 8007ecc:	6033      	str	r3, [r6, #0]
 8007ece:	2000      	movs	r0, #0
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
 8007ed2:	f003 fa2b 	bl	800b32c <__malloc_lock>
 8007ed6:	4a21      	ldr	r2, [pc, #132]	; (8007f5c <_malloc_r+0xac>)
 8007ed8:	6814      	ldr	r4, [r2, #0]
 8007eda:	4621      	mov	r1, r4
 8007edc:	b991      	cbnz	r1, 8007f04 <_malloc_r+0x54>
 8007ede:	4c20      	ldr	r4, [pc, #128]	; (8007f60 <_malloc_r+0xb0>)
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	b91b      	cbnz	r3, 8007eec <_malloc_r+0x3c>
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f000 fee9 	bl	8008cbc <_sbrk_r>
 8007eea:	6020      	str	r0, [r4, #0]
 8007eec:	4629      	mov	r1, r5
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f000 fee4 	bl	8008cbc <_sbrk_r>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d124      	bne.n	8007f42 <_malloc_r+0x92>
 8007ef8:	230c      	movs	r3, #12
 8007efa:	4630      	mov	r0, r6
 8007efc:	6033      	str	r3, [r6, #0]
 8007efe:	f003 fa16 	bl	800b32e <__malloc_unlock>
 8007f02:	e7e4      	b.n	8007ece <_malloc_r+0x1e>
 8007f04:	680b      	ldr	r3, [r1, #0]
 8007f06:	1b5b      	subs	r3, r3, r5
 8007f08:	d418      	bmi.n	8007f3c <_malloc_r+0x8c>
 8007f0a:	2b0b      	cmp	r3, #11
 8007f0c:	d90f      	bls.n	8007f2e <_malloc_r+0x7e>
 8007f0e:	600b      	str	r3, [r1, #0]
 8007f10:	18cc      	adds	r4, r1, r3
 8007f12:	50cd      	str	r5, [r1, r3]
 8007f14:	4630      	mov	r0, r6
 8007f16:	f003 fa0a 	bl	800b32e <__malloc_unlock>
 8007f1a:	f104 000b 	add.w	r0, r4, #11
 8007f1e:	1d23      	adds	r3, r4, #4
 8007f20:	f020 0007 	bic.w	r0, r0, #7
 8007f24:	1ac3      	subs	r3, r0, r3
 8007f26:	d0d3      	beq.n	8007ed0 <_malloc_r+0x20>
 8007f28:	425a      	negs	r2, r3
 8007f2a:	50e2      	str	r2, [r4, r3]
 8007f2c:	e7d0      	b.n	8007ed0 <_malloc_r+0x20>
 8007f2e:	684b      	ldr	r3, [r1, #4]
 8007f30:	428c      	cmp	r4, r1
 8007f32:	bf16      	itet	ne
 8007f34:	6063      	strne	r3, [r4, #4]
 8007f36:	6013      	streq	r3, [r2, #0]
 8007f38:	460c      	movne	r4, r1
 8007f3a:	e7eb      	b.n	8007f14 <_malloc_r+0x64>
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	6849      	ldr	r1, [r1, #4]
 8007f40:	e7cc      	b.n	8007edc <_malloc_r+0x2c>
 8007f42:	1cc4      	adds	r4, r0, #3
 8007f44:	f024 0403 	bic.w	r4, r4, #3
 8007f48:	42a0      	cmp	r0, r4
 8007f4a:	d005      	beq.n	8007f58 <_malloc_r+0xa8>
 8007f4c:	1a21      	subs	r1, r4, r0
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f000 feb4 	bl	8008cbc <_sbrk_r>
 8007f54:	3001      	adds	r0, #1
 8007f56:	d0cf      	beq.n	8007ef8 <_malloc_r+0x48>
 8007f58:	6025      	str	r5, [r4, #0]
 8007f5a:	e7db      	b.n	8007f14 <_malloc_r+0x64>
 8007f5c:	20000a50 	.word	0x20000a50
 8007f60:	20000a54 	.word	0x20000a54

08007f64 <__cvt>:
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6a:	461e      	mov	r6, r3
 8007f6c:	bfbb      	ittet	lt
 8007f6e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007f72:	461e      	movlt	r6, r3
 8007f74:	2300      	movge	r3, #0
 8007f76:	232d      	movlt	r3, #45	; 0x2d
 8007f78:	b088      	sub	sp, #32
 8007f7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007f7c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007f80:	f027 0720 	bic.w	r7, r7, #32
 8007f84:	2f46      	cmp	r7, #70	; 0x46
 8007f86:	4614      	mov	r4, r2
 8007f88:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007f8a:	700b      	strb	r3, [r1, #0]
 8007f8c:	d004      	beq.n	8007f98 <__cvt+0x34>
 8007f8e:	2f45      	cmp	r7, #69	; 0x45
 8007f90:	d100      	bne.n	8007f94 <__cvt+0x30>
 8007f92:	3501      	adds	r5, #1
 8007f94:	2302      	movs	r3, #2
 8007f96:	e000      	b.n	8007f9a <__cvt+0x36>
 8007f98:	2303      	movs	r3, #3
 8007f9a:	aa07      	add	r2, sp, #28
 8007f9c:	9204      	str	r2, [sp, #16]
 8007f9e:	aa06      	add	r2, sp, #24
 8007fa0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007fa4:	e9cd 3500 	strd	r3, r5, [sp]
 8007fa8:	4622      	mov	r2, r4
 8007faa:	4633      	mov	r3, r6
 8007fac:	f001 fec8 	bl	8009d40 <_dtoa_r>
 8007fb0:	2f47      	cmp	r7, #71	; 0x47
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	d102      	bne.n	8007fbc <__cvt+0x58>
 8007fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fb8:	07db      	lsls	r3, r3, #31
 8007fba:	d526      	bpl.n	800800a <__cvt+0xa6>
 8007fbc:	2f46      	cmp	r7, #70	; 0x46
 8007fbe:	eb08 0905 	add.w	r9, r8, r5
 8007fc2:	d111      	bne.n	8007fe8 <__cvt+0x84>
 8007fc4:	f898 3000 	ldrb.w	r3, [r8]
 8007fc8:	2b30      	cmp	r3, #48	; 0x30
 8007fca:	d10a      	bne.n	8007fe2 <__cvt+0x7e>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	f7f8 fce8 	bl	80009a8 <__aeabi_dcmpeq>
 8007fd8:	b918      	cbnz	r0, 8007fe2 <__cvt+0x7e>
 8007fda:	f1c5 0501 	rsb	r5, r5, #1
 8007fde:	f8ca 5000 	str.w	r5, [sl]
 8007fe2:	f8da 3000 	ldr.w	r3, [sl]
 8007fe6:	4499      	add	r9, r3
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2300      	movs	r3, #0
 8007fec:	4620      	mov	r0, r4
 8007fee:	4631      	mov	r1, r6
 8007ff0:	f7f8 fcda 	bl	80009a8 <__aeabi_dcmpeq>
 8007ff4:	b938      	cbnz	r0, 8008006 <__cvt+0xa2>
 8007ff6:	2230      	movs	r2, #48	; 0x30
 8007ff8:	9b07      	ldr	r3, [sp, #28]
 8007ffa:	454b      	cmp	r3, r9
 8007ffc:	d205      	bcs.n	800800a <__cvt+0xa6>
 8007ffe:	1c59      	adds	r1, r3, #1
 8008000:	9107      	str	r1, [sp, #28]
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	e7f8      	b.n	8007ff8 <__cvt+0x94>
 8008006:	f8cd 901c 	str.w	r9, [sp, #28]
 800800a:	4640      	mov	r0, r8
 800800c:	9b07      	ldr	r3, [sp, #28]
 800800e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008010:	eba3 0308 	sub.w	r3, r3, r8
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	b008      	add	sp, #32
 8008018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800801c <__exponent>:
 800801c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800801e:	2900      	cmp	r1, #0
 8008020:	bfb4      	ite	lt
 8008022:	232d      	movlt	r3, #45	; 0x2d
 8008024:	232b      	movge	r3, #43	; 0x2b
 8008026:	4604      	mov	r4, r0
 8008028:	bfb8      	it	lt
 800802a:	4249      	neglt	r1, r1
 800802c:	2909      	cmp	r1, #9
 800802e:	f804 2b02 	strb.w	r2, [r4], #2
 8008032:	7043      	strb	r3, [r0, #1]
 8008034:	dd21      	ble.n	800807a <__exponent+0x5e>
 8008036:	f10d 0307 	add.w	r3, sp, #7
 800803a:	461f      	mov	r7, r3
 800803c:	260a      	movs	r6, #10
 800803e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008042:	fb06 1115 	mls	r1, r6, r5, r1
 8008046:	2d09      	cmp	r5, #9
 8008048:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800804c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008050:	f103 32ff 	add.w	r2, r3, #4294967295
 8008054:	4629      	mov	r1, r5
 8008056:	dc09      	bgt.n	800806c <__exponent+0x50>
 8008058:	3130      	adds	r1, #48	; 0x30
 800805a:	3b02      	subs	r3, #2
 800805c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008060:	42bb      	cmp	r3, r7
 8008062:	4622      	mov	r2, r4
 8008064:	d304      	bcc.n	8008070 <__exponent+0x54>
 8008066:	1a10      	subs	r0, r2, r0
 8008068:	b003      	add	sp, #12
 800806a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800806c:	4613      	mov	r3, r2
 800806e:	e7e6      	b.n	800803e <__exponent+0x22>
 8008070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008074:	f804 2b01 	strb.w	r2, [r4], #1
 8008078:	e7f2      	b.n	8008060 <__exponent+0x44>
 800807a:	2330      	movs	r3, #48	; 0x30
 800807c:	4419      	add	r1, r3
 800807e:	7083      	strb	r3, [r0, #2]
 8008080:	1d02      	adds	r2, r0, #4
 8008082:	70c1      	strb	r1, [r0, #3]
 8008084:	e7ef      	b.n	8008066 <__exponent+0x4a>
	...

08008088 <_printf_float>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	b091      	sub	sp, #68	; 0x44
 800808e:	460c      	mov	r4, r1
 8008090:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008092:	4693      	mov	fp, r2
 8008094:	461e      	mov	r6, r3
 8008096:	4605      	mov	r5, r0
 8008098:	f003 f8ae 	bl	800b1f8 <_localeconv_r>
 800809c:	6803      	ldr	r3, [r0, #0]
 800809e:	4618      	mov	r0, r3
 80080a0:	9309      	str	r3, [sp, #36]	; 0x24
 80080a2:	f7f8 f855 	bl	8000150 <strlen>
 80080a6:	2300      	movs	r3, #0
 80080a8:	930e      	str	r3, [sp, #56]	; 0x38
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	900a      	str	r0, [sp, #40]	; 0x28
 80080ae:	3307      	adds	r3, #7
 80080b0:	f023 0307 	bic.w	r3, r3, #7
 80080b4:	f103 0208 	add.w	r2, r3, #8
 80080b8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80080bc:	f8d4 a000 	ldr.w	sl, [r4]
 80080c0:	603a      	str	r2, [r7, #0]
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080ca:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80080ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080d4:	f04f 32ff 	mov.w	r2, #4294967295
 80080d8:	4ba6      	ldr	r3, [pc, #664]	; (8008374 <_printf_float+0x2ec>)
 80080da:	4638      	mov	r0, r7
 80080dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080de:	f7f8 fc95 	bl	8000a0c <__aeabi_dcmpun>
 80080e2:	bb68      	cbnz	r0, 8008140 <_printf_float+0xb8>
 80080e4:	f04f 32ff 	mov.w	r2, #4294967295
 80080e8:	4ba2      	ldr	r3, [pc, #648]	; (8008374 <_printf_float+0x2ec>)
 80080ea:	4638      	mov	r0, r7
 80080ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080ee:	f7f8 fc6f 	bl	80009d0 <__aeabi_dcmple>
 80080f2:	bb28      	cbnz	r0, 8008140 <_printf_float+0xb8>
 80080f4:	2200      	movs	r2, #0
 80080f6:	2300      	movs	r3, #0
 80080f8:	4638      	mov	r0, r7
 80080fa:	4649      	mov	r1, r9
 80080fc:	f7f8 fc5e 	bl	80009bc <__aeabi_dcmplt>
 8008100:	b110      	cbz	r0, 8008108 <_printf_float+0x80>
 8008102:	232d      	movs	r3, #45	; 0x2d
 8008104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008108:	4f9b      	ldr	r7, [pc, #620]	; (8008378 <_printf_float+0x2f0>)
 800810a:	4b9c      	ldr	r3, [pc, #624]	; (800837c <_printf_float+0x2f4>)
 800810c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008110:	bf98      	it	ls
 8008112:	461f      	movls	r7, r3
 8008114:	2303      	movs	r3, #3
 8008116:	f04f 0900 	mov.w	r9, #0
 800811a:	6123      	str	r3, [r4, #16]
 800811c:	f02a 0304 	bic.w	r3, sl, #4
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	9600      	str	r6, [sp, #0]
 8008124:	465b      	mov	r3, fp
 8008126:	aa0f      	add	r2, sp, #60	; 0x3c
 8008128:	4621      	mov	r1, r4
 800812a:	4628      	mov	r0, r5
 800812c:	f000 f9e2 	bl	80084f4 <_printf_common>
 8008130:	3001      	adds	r0, #1
 8008132:	f040 8090 	bne.w	8008256 <_printf_float+0x1ce>
 8008136:	f04f 30ff 	mov.w	r0, #4294967295
 800813a:	b011      	add	sp, #68	; 0x44
 800813c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008140:	463a      	mov	r2, r7
 8008142:	464b      	mov	r3, r9
 8008144:	4638      	mov	r0, r7
 8008146:	4649      	mov	r1, r9
 8008148:	f7f8 fc60 	bl	8000a0c <__aeabi_dcmpun>
 800814c:	b110      	cbz	r0, 8008154 <_printf_float+0xcc>
 800814e:	4f8c      	ldr	r7, [pc, #560]	; (8008380 <_printf_float+0x2f8>)
 8008150:	4b8c      	ldr	r3, [pc, #560]	; (8008384 <_printf_float+0x2fc>)
 8008152:	e7db      	b.n	800810c <_printf_float+0x84>
 8008154:	6863      	ldr	r3, [r4, #4]
 8008156:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800815a:	1c59      	adds	r1, r3, #1
 800815c:	a80d      	add	r0, sp, #52	; 0x34
 800815e:	a90e      	add	r1, sp, #56	; 0x38
 8008160:	d140      	bne.n	80081e4 <_printf_float+0x15c>
 8008162:	2306      	movs	r3, #6
 8008164:	6063      	str	r3, [r4, #4]
 8008166:	f04f 0c00 	mov.w	ip, #0
 800816a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800816e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008172:	6863      	ldr	r3, [r4, #4]
 8008174:	6022      	str	r2, [r4, #0]
 8008176:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	463a      	mov	r2, r7
 800817e:	464b      	mov	r3, r9
 8008180:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008184:	4628      	mov	r0, r5
 8008186:	f7ff feed 	bl	8007f64 <__cvt>
 800818a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800818e:	2b47      	cmp	r3, #71	; 0x47
 8008190:	4607      	mov	r7, r0
 8008192:	d109      	bne.n	80081a8 <_printf_float+0x120>
 8008194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008196:	1cd8      	adds	r0, r3, #3
 8008198:	db02      	blt.n	80081a0 <_printf_float+0x118>
 800819a:	6862      	ldr	r2, [r4, #4]
 800819c:	4293      	cmp	r3, r2
 800819e:	dd47      	ble.n	8008230 <_printf_float+0x1a8>
 80081a0:	f1a8 0802 	sub.w	r8, r8, #2
 80081a4:	fa5f f888 	uxtb.w	r8, r8
 80081a8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80081ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081ae:	d824      	bhi.n	80081fa <_printf_float+0x172>
 80081b0:	3901      	subs	r1, #1
 80081b2:	4642      	mov	r2, r8
 80081b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081b8:	910d      	str	r1, [sp, #52]	; 0x34
 80081ba:	f7ff ff2f 	bl	800801c <__exponent>
 80081be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081c0:	4681      	mov	r9, r0
 80081c2:	1813      	adds	r3, r2, r0
 80081c4:	2a01      	cmp	r2, #1
 80081c6:	6123      	str	r3, [r4, #16]
 80081c8:	dc02      	bgt.n	80081d0 <_printf_float+0x148>
 80081ca:	6822      	ldr	r2, [r4, #0]
 80081cc:	07d1      	lsls	r1, r2, #31
 80081ce:	d501      	bpl.n	80081d4 <_printf_float+0x14c>
 80081d0:	3301      	adds	r3, #1
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0a2      	beq.n	8008122 <_printf_float+0x9a>
 80081dc:	232d      	movs	r3, #45	; 0x2d
 80081de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081e2:	e79e      	b.n	8008122 <_printf_float+0x9a>
 80081e4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80081e8:	f000 816e 	beq.w	80084c8 <_printf_float+0x440>
 80081ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80081f0:	d1b9      	bne.n	8008166 <_printf_float+0xde>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1b7      	bne.n	8008166 <_printf_float+0xde>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e7b4      	b.n	8008164 <_printf_float+0xdc>
 80081fa:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80081fe:	d119      	bne.n	8008234 <_printf_float+0x1ac>
 8008200:	2900      	cmp	r1, #0
 8008202:	6863      	ldr	r3, [r4, #4]
 8008204:	dd0c      	ble.n	8008220 <_printf_float+0x198>
 8008206:	6121      	str	r1, [r4, #16]
 8008208:	b913      	cbnz	r3, 8008210 <_printf_float+0x188>
 800820a:	6822      	ldr	r2, [r4, #0]
 800820c:	07d2      	lsls	r2, r2, #31
 800820e:	d502      	bpl.n	8008216 <_printf_float+0x18e>
 8008210:	3301      	adds	r3, #1
 8008212:	440b      	add	r3, r1
 8008214:	6123      	str	r3, [r4, #16]
 8008216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008218:	f04f 0900 	mov.w	r9, #0
 800821c:	65a3      	str	r3, [r4, #88]	; 0x58
 800821e:	e7d9      	b.n	80081d4 <_printf_float+0x14c>
 8008220:	b913      	cbnz	r3, 8008228 <_printf_float+0x1a0>
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	07d0      	lsls	r0, r2, #31
 8008226:	d501      	bpl.n	800822c <_printf_float+0x1a4>
 8008228:	3302      	adds	r3, #2
 800822a:	e7f3      	b.n	8008214 <_printf_float+0x18c>
 800822c:	2301      	movs	r3, #1
 800822e:	e7f1      	b.n	8008214 <_printf_float+0x18c>
 8008230:	f04f 0867 	mov.w	r8, #103	; 0x67
 8008234:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008238:	4293      	cmp	r3, r2
 800823a:	db05      	blt.n	8008248 <_printf_float+0x1c0>
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	07d1      	lsls	r1, r2, #31
 8008242:	d5e8      	bpl.n	8008216 <_printf_float+0x18e>
 8008244:	3301      	adds	r3, #1
 8008246:	e7e5      	b.n	8008214 <_printf_float+0x18c>
 8008248:	2b00      	cmp	r3, #0
 800824a:	bfcc      	ite	gt
 800824c:	2301      	movgt	r3, #1
 800824e:	f1c3 0302 	rsble	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	e7de      	b.n	8008214 <_printf_float+0x18c>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	055a      	lsls	r2, r3, #21
 800825a:	d407      	bmi.n	800826c <_printf_float+0x1e4>
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	463a      	mov	r2, r7
 8008260:	4659      	mov	r1, fp
 8008262:	4628      	mov	r0, r5
 8008264:	47b0      	blx	r6
 8008266:	3001      	adds	r0, #1
 8008268:	d129      	bne.n	80082be <_printf_float+0x236>
 800826a:	e764      	b.n	8008136 <_printf_float+0xae>
 800826c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008270:	f240 80d7 	bls.w	8008422 <_printf_float+0x39a>
 8008274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008278:	2200      	movs	r2, #0
 800827a:	2300      	movs	r3, #0
 800827c:	f7f8 fb94 	bl	80009a8 <__aeabi_dcmpeq>
 8008280:	b388      	cbz	r0, 80082e6 <_printf_float+0x25e>
 8008282:	2301      	movs	r3, #1
 8008284:	4a40      	ldr	r2, [pc, #256]	; (8008388 <_printf_float+0x300>)
 8008286:	4659      	mov	r1, fp
 8008288:	4628      	mov	r0, r5
 800828a:	47b0      	blx	r6
 800828c:	3001      	adds	r0, #1
 800828e:	f43f af52 	beq.w	8008136 <_printf_float+0xae>
 8008292:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008296:	429a      	cmp	r2, r3
 8008298:	db02      	blt.n	80082a0 <_printf_float+0x218>
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	07d8      	lsls	r0, r3, #31
 800829e:	d50e      	bpl.n	80082be <_printf_float+0x236>
 80082a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082a4:	4659      	mov	r1, fp
 80082a6:	4628      	mov	r0, r5
 80082a8:	47b0      	blx	r6
 80082aa:	3001      	adds	r0, #1
 80082ac:	f43f af43 	beq.w	8008136 <_printf_float+0xae>
 80082b0:	2700      	movs	r7, #0
 80082b2:	f104 081a 	add.w	r8, r4, #26
 80082b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082b8:	3b01      	subs	r3, #1
 80082ba:	42bb      	cmp	r3, r7
 80082bc:	dc09      	bgt.n	80082d2 <_printf_float+0x24a>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	079f      	lsls	r7, r3, #30
 80082c2:	f100 80fd 	bmi.w	80084c0 <_printf_float+0x438>
 80082c6:	68e0      	ldr	r0, [r4, #12]
 80082c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082ca:	4298      	cmp	r0, r3
 80082cc:	bfb8      	it	lt
 80082ce:	4618      	movlt	r0, r3
 80082d0:	e733      	b.n	800813a <_printf_float+0xb2>
 80082d2:	2301      	movs	r3, #1
 80082d4:	4642      	mov	r2, r8
 80082d6:	4659      	mov	r1, fp
 80082d8:	4628      	mov	r0, r5
 80082da:	47b0      	blx	r6
 80082dc:	3001      	adds	r0, #1
 80082de:	f43f af2a 	beq.w	8008136 <_printf_float+0xae>
 80082e2:	3701      	adds	r7, #1
 80082e4:	e7e7      	b.n	80082b6 <_printf_float+0x22e>
 80082e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	dc2b      	bgt.n	8008344 <_printf_float+0x2bc>
 80082ec:	2301      	movs	r3, #1
 80082ee:	4a26      	ldr	r2, [pc, #152]	; (8008388 <_printf_float+0x300>)
 80082f0:	4659      	mov	r1, fp
 80082f2:	4628      	mov	r0, r5
 80082f4:	47b0      	blx	r6
 80082f6:	3001      	adds	r0, #1
 80082f8:	f43f af1d 	beq.w	8008136 <_printf_float+0xae>
 80082fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082fe:	b923      	cbnz	r3, 800830a <_printf_float+0x282>
 8008300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008302:	b913      	cbnz	r3, 800830a <_printf_float+0x282>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	07d9      	lsls	r1, r3, #31
 8008308:	d5d9      	bpl.n	80082be <_printf_float+0x236>
 800830a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800830e:	4659      	mov	r1, fp
 8008310:	4628      	mov	r0, r5
 8008312:	47b0      	blx	r6
 8008314:	3001      	adds	r0, #1
 8008316:	f43f af0e 	beq.w	8008136 <_printf_float+0xae>
 800831a:	f04f 0800 	mov.w	r8, #0
 800831e:	f104 091a 	add.w	r9, r4, #26
 8008322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008324:	425b      	negs	r3, r3
 8008326:	4543      	cmp	r3, r8
 8008328:	dc01      	bgt.n	800832e <_printf_float+0x2a6>
 800832a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800832c:	e797      	b.n	800825e <_printf_float+0x1d6>
 800832e:	2301      	movs	r3, #1
 8008330:	464a      	mov	r2, r9
 8008332:	4659      	mov	r1, fp
 8008334:	4628      	mov	r0, r5
 8008336:	47b0      	blx	r6
 8008338:	3001      	adds	r0, #1
 800833a:	f43f aefc 	beq.w	8008136 <_printf_float+0xae>
 800833e:	f108 0801 	add.w	r8, r8, #1
 8008342:	e7ee      	b.n	8008322 <_printf_float+0x29a>
 8008344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008348:	429a      	cmp	r2, r3
 800834a:	bfa8      	it	ge
 800834c:	461a      	movge	r2, r3
 800834e:	2a00      	cmp	r2, #0
 8008350:	4690      	mov	r8, r2
 8008352:	dd07      	ble.n	8008364 <_printf_float+0x2dc>
 8008354:	4613      	mov	r3, r2
 8008356:	4659      	mov	r1, fp
 8008358:	463a      	mov	r2, r7
 800835a:	4628      	mov	r0, r5
 800835c:	47b0      	blx	r6
 800835e:	3001      	adds	r0, #1
 8008360:	f43f aee9 	beq.w	8008136 <_printf_float+0xae>
 8008364:	f104 031a 	add.w	r3, r4, #26
 8008368:	f04f 0a00 	mov.w	sl, #0
 800836c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008370:	930b      	str	r3, [sp, #44]	; 0x2c
 8008372:	e015      	b.n	80083a0 <_printf_float+0x318>
 8008374:	7fefffff 	.word	0x7fefffff
 8008378:	0800c620 	.word	0x0800c620
 800837c:	0800c61c 	.word	0x0800c61c
 8008380:	0800c628 	.word	0x0800c628
 8008384:	0800c624 	.word	0x0800c624
 8008388:	0800c62c 	.word	0x0800c62c
 800838c:	2301      	movs	r3, #1
 800838e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008390:	4659      	mov	r1, fp
 8008392:	4628      	mov	r0, r5
 8008394:	47b0      	blx	r6
 8008396:	3001      	adds	r0, #1
 8008398:	f43f aecd 	beq.w	8008136 <_printf_float+0xae>
 800839c:	f10a 0a01 	add.w	sl, sl, #1
 80083a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80083a4:	eba9 0308 	sub.w	r3, r9, r8
 80083a8:	4553      	cmp	r3, sl
 80083aa:	dcef      	bgt.n	800838c <_printf_float+0x304>
 80083ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083b0:	429a      	cmp	r2, r3
 80083b2:	444f      	add	r7, r9
 80083b4:	db14      	blt.n	80083e0 <_printf_float+0x358>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	07da      	lsls	r2, r3, #31
 80083ba:	d411      	bmi.n	80083e0 <_printf_float+0x358>
 80083bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80083c0:	eba3 0209 	sub.w	r2, r3, r9
 80083c4:	eba3 0901 	sub.w	r9, r3, r1
 80083c8:	4591      	cmp	r9, r2
 80083ca:	bfa8      	it	ge
 80083cc:	4691      	movge	r9, r2
 80083ce:	f1b9 0f00 	cmp.w	r9, #0
 80083d2:	dc0d      	bgt.n	80083f0 <_printf_float+0x368>
 80083d4:	2700      	movs	r7, #0
 80083d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083da:	f104 081a 	add.w	r8, r4, #26
 80083de:	e018      	b.n	8008412 <_printf_float+0x38a>
 80083e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083e4:	4659      	mov	r1, fp
 80083e6:	4628      	mov	r0, r5
 80083e8:	47b0      	blx	r6
 80083ea:	3001      	adds	r0, #1
 80083ec:	d1e6      	bne.n	80083bc <_printf_float+0x334>
 80083ee:	e6a2      	b.n	8008136 <_printf_float+0xae>
 80083f0:	464b      	mov	r3, r9
 80083f2:	463a      	mov	r2, r7
 80083f4:	4659      	mov	r1, fp
 80083f6:	4628      	mov	r0, r5
 80083f8:	47b0      	blx	r6
 80083fa:	3001      	adds	r0, #1
 80083fc:	d1ea      	bne.n	80083d4 <_printf_float+0x34c>
 80083fe:	e69a      	b.n	8008136 <_printf_float+0xae>
 8008400:	2301      	movs	r3, #1
 8008402:	4642      	mov	r2, r8
 8008404:	4659      	mov	r1, fp
 8008406:	4628      	mov	r0, r5
 8008408:	47b0      	blx	r6
 800840a:	3001      	adds	r0, #1
 800840c:	f43f ae93 	beq.w	8008136 <_printf_float+0xae>
 8008410:	3701      	adds	r7, #1
 8008412:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	eba3 0309 	sub.w	r3, r3, r9
 800841c:	42bb      	cmp	r3, r7
 800841e:	dcef      	bgt.n	8008400 <_printf_float+0x378>
 8008420:	e74d      	b.n	80082be <_printf_float+0x236>
 8008422:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008424:	2a01      	cmp	r2, #1
 8008426:	dc01      	bgt.n	800842c <_printf_float+0x3a4>
 8008428:	07db      	lsls	r3, r3, #31
 800842a:	d538      	bpl.n	800849e <_printf_float+0x416>
 800842c:	2301      	movs	r3, #1
 800842e:	463a      	mov	r2, r7
 8008430:	4659      	mov	r1, fp
 8008432:	4628      	mov	r0, r5
 8008434:	47b0      	blx	r6
 8008436:	3001      	adds	r0, #1
 8008438:	f43f ae7d 	beq.w	8008136 <_printf_float+0xae>
 800843c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008440:	4659      	mov	r1, fp
 8008442:	4628      	mov	r0, r5
 8008444:	47b0      	blx	r6
 8008446:	3001      	adds	r0, #1
 8008448:	f107 0701 	add.w	r7, r7, #1
 800844c:	f43f ae73 	beq.w	8008136 <_printf_float+0xae>
 8008450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008456:	2200      	movs	r2, #0
 8008458:	f103 38ff 	add.w	r8, r3, #4294967295
 800845c:	2300      	movs	r3, #0
 800845e:	f7f8 faa3 	bl	80009a8 <__aeabi_dcmpeq>
 8008462:	b9c0      	cbnz	r0, 8008496 <_printf_float+0x40e>
 8008464:	4643      	mov	r3, r8
 8008466:	463a      	mov	r2, r7
 8008468:	4659      	mov	r1, fp
 800846a:	4628      	mov	r0, r5
 800846c:	47b0      	blx	r6
 800846e:	3001      	adds	r0, #1
 8008470:	d10d      	bne.n	800848e <_printf_float+0x406>
 8008472:	e660      	b.n	8008136 <_printf_float+0xae>
 8008474:	2301      	movs	r3, #1
 8008476:	4642      	mov	r2, r8
 8008478:	4659      	mov	r1, fp
 800847a:	4628      	mov	r0, r5
 800847c:	47b0      	blx	r6
 800847e:	3001      	adds	r0, #1
 8008480:	f43f ae59 	beq.w	8008136 <_printf_float+0xae>
 8008484:	3701      	adds	r7, #1
 8008486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008488:	3b01      	subs	r3, #1
 800848a:	42bb      	cmp	r3, r7
 800848c:	dcf2      	bgt.n	8008474 <_printf_float+0x3ec>
 800848e:	464b      	mov	r3, r9
 8008490:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008494:	e6e4      	b.n	8008260 <_printf_float+0x1d8>
 8008496:	2700      	movs	r7, #0
 8008498:	f104 081a 	add.w	r8, r4, #26
 800849c:	e7f3      	b.n	8008486 <_printf_float+0x3fe>
 800849e:	2301      	movs	r3, #1
 80084a0:	e7e1      	b.n	8008466 <_printf_float+0x3de>
 80084a2:	2301      	movs	r3, #1
 80084a4:	4642      	mov	r2, r8
 80084a6:	4659      	mov	r1, fp
 80084a8:	4628      	mov	r0, r5
 80084aa:	47b0      	blx	r6
 80084ac:	3001      	adds	r0, #1
 80084ae:	f43f ae42 	beq.w	8008136 <_printf_float+0xae>
 80084b2:	3701      	adds	r7, #1
 80084b4:	68e3      	ldr	r3, [r4, #12]
 80084b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084b8:	1a9b      	subs	r3, r3, r2
 80084ba:	42bb      	cmp	r3, r7
 80084bc:	dcf1      	bgt.n	80084a2 <_printf_float+0x41a>
 80084be:	e702      	b.n	80082c6 <_printf_float+0x23e>
 80084c0:	2700      	movs	r7, #0
 80084c2:	f104 0819 	add.w	r8, r4, #25
 80084c6:	e7f5      	b.n	80084b4 <_printf_float+0x42c>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f43f ae94 	beq.w	80081f6 <_printf_float+0x16e>
 80084ce:	f04f 0c00 	mov.w	ip, #0
 80084d2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80084d6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80084da:	6022      	str	r2, [r4, #0]
 80084dc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80084e0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	463a      	mov	r2, r7
 80084e8:	464b      	mov	r3, r9
 80084ea:	4628      	mov	r0, r5
 80084ec:	f7ff fd3a 	bl	8007f64 <__cvt>
 80084f0:	4607      	mov	r7, r0
 80084f2:	e64f      	b.n	8008194 <_printf_float+0x10c>

080084f4 <_printf_common>:
 80084f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	4691      	mov	r9, r2
 80084fa:	461f      	mov	r7, r3
 80084fc:	688a      	ldr	r2, [r1, #8]
 80084fe:	690b      	ldr	r3, [r1, #16]
 8008500:	4606      	mov	r6, r0
 8008502:	4293      	cmp	r3, r2
 8008504:	bfb8      	it	lt
 8008506:	4613      	movlt	r3, r2
 8008508:	f8c9 3000 	str.w	r3, [r9]
 800850c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008510:	460c      	mov	r4, r1
 8008512:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008516:	b112      	cbz	r2, 800851e <_printf_common+0x2a>
 8008518:	3301      	adds	r3, #1
 800851a:	f8c9 3000 	str.w	r3, [r9]
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	0699      	lsls	r1, r3, #26
 8008522:	bf42      	ittt	mi
 8008524:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008528:	3302      	addmi	r3, #2
 800852a:	f8c9 3000 	strmi.w	r3, [r9]
 800852e:	6825      	ldr	r5, [r4, #0]
 8008530:	f015 0506 	ands.w	r5, r5, #6
 8008534:	d107      	bne.n	8008546 <_printf_common+0x52>
 8008536:	f104 0a19 	add.w	sl, r4, #25
 800853a:	68e3      	ldr	r3, [r4, #12]
 800853c:	f8d9 2000 	ldr.w	r2, [r9]
 8008540:	1a9b      	subs	r3, r3, r2
 8008542:	42ab      	cmp	r3, r5
 8008544:	dc29      	bgt.n	800859a <_printf_common+0xa6>
 8008546:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	3300      	adds	r3, #0
 800854e:	bf18      	it	ne
 8008550:	2301      	movne	r3, #1
 8008552:	0692      	lsls	r2, r2, #26
 8008554:	d42e      	bmi.n	80085b4 <_printf_common+0xc0>
 8008556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800855a:	4639      	mov	r1, r7
 800855c:	4630      	mov	r0, r6
 800855e:	47c0      	blx	r8
 8008560:	3001      	adds	r0, #1
 8008562:	d021      	beq.n	80085a8 <_printf_common+0xb4>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	68e5      	ldr	r5, [r4, #12]
 8008568:	f003 0306 	and.w	r3, r3, #6
 800856c:	2b04      	cmp	r3, #4
 800856e:	bf18      	it	ne
 8008570:	2500      	movne	r5, #0
 8008572:	f8d9 2000 	ldr.w	r2, [r9]
 8008576:	f04f 0900 	mov.w	r9, #0
 800857a:	bf08      	it	eq
 800857c:	1aad      	subeq	r5, r5, r2
 800857e:	68a3      	ldr	r3, [r4, #8]
 8008580:	6922      	ldr	r2, [r4, #16]
 8008582:	bf08      	it	eq
 8008584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008588:	4293      	cmp	r3, r2
 800858a:	bfc4      	itt	gt
 800858c:	1a9b      	subgt	r3, r3, r2
 800858e:	18ed      	addgt	r5, r5, r3
 8008590:	341a      	adds	r4, #26
 8008592:	454d      	cmp	r5, r9
 8008594:	d11a      	bne.n	80085cc <_printf_common+0xd8>
 8008596:	2000      	movs	r0, #0
 8008598:	e008      	b.n	80085ac <_printf_common+0xb8>
 800859a:	2301      	movs	r3, #1
 800859c:	4652      	mov	r2, sl
 800859e:	4639      	mov	r1, r7
 80085a0:	4630      	mov	r0, r6
 80085a2:	47c0      	blx	r8
 80085a4:	3001      	adds	r0, #1
 80085a6:	d103      	bne.n	80085b0 <_printf_common+0xbc>
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b0:	3501      	adds	r5, #1
 80085b2:	e7c2      	b.n	800853a <_printf_common+0x46>
 80085b4:	2030      	movs	r0, #48	; 0x30
 80085b6:	18e1      	adds	r1, r4, r3
 80085b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085c2:	4422      	add	r2, r4
 80085c4:	3302      	adds	r3, #2
 80085c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085ca:	e7c4      	b.n	8008556 <_printf_common+0x62>
 80085cc:	2301      	movs	r3, #1
 80085ce:	4622      	mov	r2, r4
 80085d0:	4639      	mov	r1, r7
 80085d2:	4630      	mov	r0, r6
 80085d4:	47c0      	blx	r8
 80085d6:	3001      	adds	r0, #1
 80085d8:	d0e6      	beq.n	80085a8 <_printf_common+0xb4>
 80085da:	f109 0901 	add.w	r9, r9, #1
 80085de:	e7d8      	b.n	8008592 <_printf_common+0x9e>

080085e0 <_printf_i>:
 80085e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80085e8:	460c      	mov	r4, r1
 80085ea:	7e09      	ldrb	r1, [r1, #24]
 80085ec:	b085      	sub	sp, #20
 80085ee:	296e      	cmp	r1, #110	; 0x6e
 80085f0:	4617      	mov	r7, r2
 80085f2:	4606      	mov	r6, r0
 80085f4:	4698      	mov	r8, r3
 80085f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085f8:	f000 80b3 	beq.w	8008762 <_printf_i+0x182>
 80085fc:	d822      	bhi.n	8008644 <_printf_i+0x64>
 80085fe:	2963      	cmp	r1, #99	; 0x63
 8008600:	d036      	beq.n	8008670 <_printf_i+0x90>
 8008602:	d80a      	bhi.n	800861a <_printf_i+0x3a>
 8008604:	2900      	cmp	r1, #0
 8008606:	f000 80b9 	beq.w	800877c <_printf_i+0x19c>
 800860a:	2958      	cmp	r1, #88	; 0x58
 800860c:	f000 8083 	beq.w	8008716 <_printf_i+0x136>
 8008610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008614:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008618:	e032      	b.n	8008680 <_printf_i+0xa0>
 800861a:	2964      	cmp	r1, #100	; 0x64
 800861c:	d001      	beq.n	8008622 <_printf_i+0x42>
 800861e:	2969      	cmp	r1, #105	; 0x69
 8008620:	d1f6      	bne.n	8008610 <_printf_i+0x30>
 8008622:	6820      	ldr	r0, [r4, #0]
 8008624:	6813      	ldr	r3, [r2, #0]
 8008626:	0605      	lsls	r5, r0, #24
 8008628:	f103 0104 	add.w	r1, r3, #4
 800862c:	d52a      	bpl.n	8008684 <_printf_i+0xa4>
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6011      	str	r1, [r2, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	da03      	bge.n	800863e <_printf_i+0x5e>
 8008636:	222d      	movs	r2, #45	; 0x2d
 8008638:	425b      	negs	r3, r3
 800863a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800863e:	486f      	ldr	r0, [pc, #444]	; (80087fc <_printf_i+0x21c>)
 8008640:	220a      	movs	r2, #10
 8008642:	e039      	b.n	80086b8 <_printf_i+0xd8>
 8008644:	2973      	cmp	r1, #115	; 0x73
 8008646:	f000 809d 	beq.w	8008784 <_printf_i+0x1a4>
 800864a:	d808      	bhi.n	800865e <_printf_i+0x7e>
 800864c:	296f      	cmp	r1, #111	; 0x6f
 800864e:	d020      	beq.n	8008692 <_printf_i+0xb2>
 8008650:	2970      	cmp	r1, #112	; 0x70
 8008652:	d1dd      	bne.n	8008610 <_printf_i+0x30>
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	f043 0320 	orr.w	r3, r3, #32
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	e003      	b.n	8008666 <_printf_i+0x86>
 800865e:	2975      	cmp	r1, #117	; 0x75
 8008660:	d017      	beq.n	8008692 <_printf_i+0xb2>
 8008662:	2978      	cmp	r1, #120	; 0x78
 8008664:	d1d4      	bne.n	8008610 <_printf_i+0x30>
 8008666:	2378      	movs	r3, #120	; 0x78
 8008668:	4865      	ldr	r0, [pc, #404]	; (8008800 <_printf_i+0x220>)
 800866a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800866e:	e055      	b.n	800871c <_printf_i+0x13c>
 8008670:	6813      	ldr	r3, [r2, #0]
 8008672:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008676:	1d19      	adds	r1, r3, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6011      	str	r1, [r2, #0]
 800867c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008680:	2301      	movs	r3, #1
 8008682:	e08c      	b.n	800879e <_printf_i+0x1be>
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f010 0f40 	tst.w	r0, #64	; 0x40
 800868a:	6011      	str	r1, [r2, #0]
 800868c:	bf18      	it	ne
 800868e:	b21b      	sxthne	r3, r3
 8008690:	e7cf      	b.n	8008632 <_printf_i+0x52>
 8008692:	6813      	ldr	r3, [r2, #0]
 8008694:	6825      	ldr	r5, [r4, #0]
 8008696:	1d18      	adds	r0, r3, #4
 8008698:	6010      	str	r0, [r2, #0]
 800869a:	0628      	lsls	r0, r5, #24
 800869c:	d501      	bpl.n	80086a2 <_printf_i+0xc2>
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	e002      	b.n	80086a8 <_printf_i+0xc8>
 80086a2:	0668      	lsls	r0, r5, #25
 80086a4:	d5fb      	bpl.n	800869e <_printf_i+0xbe>
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	296f      	cmp	r1, #111	; 0x6f
 80086aa:	bf14      	ite	ne
 80086ac:	220a      	movne	r2, #10
 80086ae:	2208      	moveq	r2, #8
 80086b0:	4852      	ldr	r0, [pc, #328]	; (80087fc <_printf_i+0x21c>)
 80086b2:	2100      	movs	r1, #0
 80086b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086b8:	6865      	ldr	r5, [r4, #4]
 80086ba:	2d00      	cmp	r5, #0
 80086bc:	60a5      	str	r5, [r4, #8]
 80086be:	f2c0 8095 	blt.w	80087ec <_printf_i+0x20c>
 80086c2:	6821      	ldr	r1, [r4, #0]
 80086c4:	f021 0104 	bic.w	r1, r1, #4
 80086c8:	6021      	str	r1, [r4, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d13d      	bne.n	800874a <_printf_i+0x16a>
 80086ce:	2d00      	cmp	r5, #0
 80086d0:	f040 808e 	bne.w	80087f0 <_printf_i+0x210>
 80086d4:	4665      	mov	r5, ip
 80086d6:	2a08      	cmp	r2, #8
 80086d8:	d10b      	bne.n	80086f2 <_printf_i+0x112>
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	07db      	lsls	r3, r3, #31
 80086de:	d508      	bpl.n	80086f2 <_printf_i+0x112>
 80086e0:	6923      	ldr	r3, [r4, #16]
 80086e2:	6862      	ldr	r2, [r4, #4]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	bfde      	ittt	le
 80086e8:	2330      	movle	r3, #48	; 0x30
 80086ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086f2:	ebac 0305 	sub.w	r3, ip, r5
 80086f6:	6123      	str	r3, [r4, #16]
 80086f8:	f8cd 8000 	str.w	r8, [sp]
 80086fc:	463b      	mov	r3, r7
 80086fe:	aa03      	add	r2, sp, #12
 8008700:	4621      	mov	r1, r4
 8008702:	4630      	mov	r0, r6
 8008704:	f7ff fef6 	bl	80084f4 <_printf_common>
 8008708:	3001      	adds	r0, #1
 800870a:	d14d      	bne.n	80087a8 <_printf_i+0x1c8>
 800870c:	f04f 30ff 	mov.w	r0, #4294967295
 8008710:	b005      	add	sp, #20
 8008712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008716:	4839      	ldr	r0, [pc, #228]	; (80087fc <_printf_i+0x21c>)
 8008718:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800871c:	6813      	ldr	r3, [r2, #0]
 800871e:	6821      	ldr	r1, [r4, #0]
 8008720:	1d1d      	adds	r5, r3, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6015      	str	r5, [r2, #0]
 8008726:	060a      	lsls	r2, r1, #24
 8008728:	d50b      	bpl.n	8008742 <_printf_i+0x162>
 800872a:	07ca      	lsls	r2, r1, #31
 800872c:	bf44      	itt	mi
 800872e:	f041 0120 	orrmi.w	r1, r1, #32
 8008732:	6021      	strmi	r1, [r4, #0]
 8008734:	b91b      	cbnz	r3, 800873e <_printf_i+0x15e>
 8008736:	6822      	ldr	r2, [r4, #0]
 8008738:	f022 0220 	bic.w	r2, r2, #32
 800873c:	6022      	str	r2, [r4, #0]
 800873e:	2210      	movs	r2, #16
 8008740:	e7b7      	b.n	80086b2 <_printf_i+0xd2>
 8008742:	064d      	lsls	r5, r1, #25
 8008744:	bf48      	it	mi
 8008746:	b29b      	uxthmi	r3, r3
 8008748:	e7ef      	b.n	800872a <_printf_i+0x14a>
 800874a:	4665      	mov	r5, ip
 800874c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008750:	fb02 3311 	mls	r3, r2, r1, r3
 8008754:	5cc3      	ldrb	r3, [r0, r3]
 8008756:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800875a:	460b      	mov	r3, r1
 800875c:	2900      	cmp	r1, #0
 800875e:	d1f5      	bne.n	800874c <_printf_i+0x16c>
 8008760:	e7b9      	b.n	80086d6 <_printf_i+0xf6>
 8008762:	6813      	ldr	r3, [r2, #0]
 8008764:	6825      	ldr	r5, [r4, #0]
 8008766:	1d18      	adds	r0, r3, #4
 8008768:	6961      	ldr	r1, [r4, #20]
 800876a:	6010      	str	r0, [r2, #0]
 800876c:	0628      	lsls	r0, r5, #24
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	d501      	bpl.n	8008776 <_printf_i+0x196>
 8008772:	6019      	str	r1, [r3, #0]
 8008774:	e002      	b.n	800877c <_printf_i+0x19c>
 8008776:	066a      	lsls	r2, r5, #25
 8008778:	d5fb      	bpl.n	8008772 <_printf_i+0x192>
 800877a:	8019      	strh	r1, [r3, #0]
 800877c:	2300      	movs	r3, #0
 800877e:	4665      	mov	r5, ip
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	e7b9      	b.n	80086f8 <_printf_i+0x118>
 8008784:	6813      	ldr	r3, [r2, #0]
 8008786:	1d19      	adds	r1, r3, #4
 8008788:	6011      	str	r1, [r2, #0]
 800878a:	681d      	ldr	r5, [r3, #0]
 800878c:	6862      	ldr	r2, [r4, #4]
 800878e:	2100      	movs	r1, #0
 8008790:	4628      	mov	r0, r5
 8008792:	f002 fdbd 	bl	800b310 <memchr>
 8008796:	b108      	cbz	r0, 800879c <_printf_i+0x1bc>
 8008798:	1b40      	subs	r0, r0, r5
 800879a:	6060      	str	r0, [r4, #4]
 800879c:	6863      	ldr	r3, [r4, #4]
 800879e:	6123      	str	r3, [r4, #16]
 80087a0:	2300      	movs	r3, #0
 80087a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087a6:	e7a7      	b.n	80086f8 <_printf_i+0x118>
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	462a      	mov	r2, r5
 80087ac:	4639      	mov	r1, r7
 80087ae:	4630      	mov	r0, r6
 80087b0:	47c0      	blx	r8
 80087b2:	3001      	adds	r0, #1
 80087b4:	d0aa      	beq.n	800870c <_printf_i+0x12c>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	079b      	lsls	r3, r3, #30
 80087ba:	d413      	bmi.n	80087e4 <_printf_i+0x204>
 80087bc:	68e0      	ldr	r0, [r4, #12]
 80087be:	9b03      	ldr	r3, [sp, #12]
 80087c0:	4298      	cmp	r0, r3
 80087c2:	bfb8      	it	lt
 80087c4:	4618      	movlt	r0, r3
 80087c6:	e7a3      	b.n	8008710 <_printf_i+0x130>
 80087c8:	2301      	movs	r3, #1
 80087ca:	464a      	mov	r2, r9
 80087cc:	4639      	mov	r1, r7
 80087ce:	4630      	mov	r0, r6
 80087d0:	47c0      	blx	r8
 80087d2:	3001      	adds	r0, #1
 80087d4:	d09a      	beq.n	800870c <_printf_i+0x12c>
 80087d6:	3501      	adds	r5, #1
 80087d8:	68e3      	ldr	r3, [r4, #12]
 80087da:	9a03      	ldr	r2, [sp, #12]
 80087dc:	1a9b      	subs	r3, r3, r2
 80087de:	42ab      	cmp	r3, r5
 80087e0:	dcf2      	bgt.n	80087c8 <_printf_i+0x1e8>
 80087e2:	e7eb      	b.n	80087bc <_printf_i+0x1dc>
 80087e4:	2500      	movs	r5, #0
 80087e6:	f104 0919 	add.w	r9, r4, #25
 80087ea:	e7f5      	b.n	80087d8 <_printf_i+0x1f8>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1ac      	bne.n	800874a <_printf_i+0x16a>
 80087f0:	7803      	ldrb	r3, [r0, #0]
 80087f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087fa:	e76c      	b.n	80086d6 <_printf_i+0xf6>
 80087fc:	0800c62e 	.word	0x0800c62e
 8008800:	0800c63f 	.word	0x0800c63f

08008804 <_scanf_float>:
 8008804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008808:	469a      	mov	sl, r3
 800880a:	688b      	ldr	r3, [r1, #8]
 800880c:	4616      	mov	r6, r2
 800880e:	1e5a      	subs	r2, r3, #1
 8008810:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008814:	bf88      	it	hi
 8008816:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800881a:	b087      	sub	sp, #28
 800881c:	bf85      	ittet	hi
 800881e:	189b      	addhi	r3, r3, r2
 8008820:	9301      	strhi	r3, [sp, #4]
 8008822:	2300      	movls	r3, #0
 8008824:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008828:	4688      	mov	r8, r1
 800882a:	f04f 0b00 	mov.w	fp, #0
 800882e:	bf8c      	ite	hi
 8008830:	608b      	strhi	r3, [r1, #8]
 8008832:	9301      	strls	r3, [sp, #4]
 8008834:	680b      	ldr	r3, [r1, #0]
 8008836:	4607      	mov	r7, r0
 8008838:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800883c:	f848 3b1c 	str.w	r3, [r8], #28
 8008840:	460c      	mov	r4, r1
 8008842:	4645      	mov	r5, r8
 8008844:	465a      	mov	r2, fp
 8008846:	46d9      	mov	r9, fp
 8008848:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800884c:	f8cd b008 	str.w	fp, [sp, #8]
 8008850:	68a1      	ldr	r1, [r4, #8]
 8008852:	b181      	cbz	r1, 8008876 <_scanf_float+0x72>
 8008854:	6833      	ldr	r3, [r6, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b49      	cmp	r3, #73	; 0x49
 800885a:	d071      	beq.n	8008940 <_scanf_float+0x13c>
 800885c:	d84d      	bhi.n	80088fa <_scanf_float+0xf6>
 800885e:	2b39      	cmp	r3, #57	; 0x39
 8008860:	d840      	bhi.n	80088e4 <_scanf_float+0xe0>
 8008862:	2b31      	cmp	r3, #49	; 0x31
 8008864:	f080 8088 	bcs.w	8008978 <_scanf_float+0x174>
 8008868:	2b2d      	cmp	r3, #45	; 0x2d
 800886a:	f000 8090 	beq.w	800898e <_scanf_float+0x18a>
 800886e:	d815      	bhi.n	800889c <_scanf_float+0x98>
 8008870:	2b2b      	cmp	r3, #43	; 0x2b
 8008872:	f000 808c 	beq.w	800898e <_scanf_float+0x18a>
 8008876:	f1b9 0f00 	cmp.w	r9, #0
 800887a:	d003      	beq.n	8008884 <_scanf_float+0x80>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	3a01      	subs	r2, #1
 8008886:	2a01      	cmp	r2, #1
 8008888:	f200 80ea 	bhi.w	8008a60 <_scanf_float+0x25c>
 800888c:	4545      	cmp	r5, r8
 800888e:	f200 80dc 	bhi.w	8008a4a <_scanf_float+0x246>
 8008892:	2601      	movs	r6, #1
 8008894:	4630      	mov	r0, r6
 8008896:	b007      	add	sp, #28
 8008898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889c:	2b2e      	cmp	r3, #46	; 0x2e
 800889e:	f000 809f 	beq.w	80089e0 <_scanf_float+0x1dc>
 80088a2:	2b30      	cmp	r3, #48	; 0x30
 80088a4:	d1e7      	bne.n	8008876 <_scanf_float+0x72>
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	f410 7f80 	tst.w	r0, #256	; 0x100
 80088ac:	d064      	beq.n	8008978 <_scanf_float+0x174>
 80088ae:	9b01      	ldr	r3, [sp, #4]
 80088b0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80088b4:	6020      	str	r0, [r4, #0]
 80088b6:	f109 0901 	add.w	r9, r9, #1
 80088ba:	b11b      	cbz	r3, 80088c4 <_scanf_float+0xc0>
 80088bc:	3b01      	subs	r3, #1
 80088be:	3101      	adds	r1, #1
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	60a1      	str	r1, [r4, #8]
 80088c4:	68a3      	ldr	r3, [r4, #8]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	60a3      	str	r3, [r4, #8]
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	3301      	adds	r3, #1
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	6873      	ldr	r3, [r6, #4]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	6073      	str	r3, [r6, #4]
 80088d8:	f340 80ac 	ble.w	8008a34 <_scanf_float+0x230>
 80088dc:	6833      	ldr	r3, [r6, #0]
 80088de:	3301      	adds	r3, #1
 80088e0:	6033      	str	r3, [r6, #0]
 80088e2:	e7b5      	b.n	8008850 <_scanf_float+0x4c>
 80088e4:	2b45      	cmp	r3, #69	; 0x45
 80088e6:	f000 8085 	beq.w	80089f4 <_scanf_float+0x1f0>
 80088ea:	2b46      	cmp	r3, #70	; 0x46
 80088ec:	d06a      	beq.n	80089c4 <_scanf_float+0x1c0>
 80088ee:	2b41      	cmp	r3, #65	; 0x41
 80088f0:	d1c1      	bne.n	8008876 <_scanf_float+0x72>
 80088f2:	2a01      	cmp	r2, #1
 80088f4:	d1bf      	bne.n	8008876 <_scanf_float+0x72>
 80088f6:	2202      	movs	r2, #2
 80088f8:	e046      	b.n	8008988 <_scanf_float+0x184>
 80088fa:	2b65      	cmp	r3, #101	; 0x65
 80088fc:	d07a      	beq.n	80089f4 <_scanf_float+0x1f0>
 80088fe:	d818      	bhi.n	8008932 <_scanf_float+0x12e>
 8008900:	2b54      	cmp	r3, #84	; 0x54
 8008902:	d066      	beq.n	80089d2 <_scanf_float+0x1ce>
 8008904:	d811      	bhi.n	800892a <_scanf_float+0x126>
 8008906:	2b4e      	cmp	r3, #78	; 0x4e
 8008908:	d1b5      	bne.n	8008876 <_scanf_float+0x72>
 800890a:	2a00      	cmp	r2, #0
 800890c:	d146      	bne.n	800899c <_scanf_float+0x198>
 800890e:	f1b9 0f00 	cmp.w	r9, #0
 8008912:	d145      	bne.n	80089a0 <_scanf_float+0x19c>
 8008914:	6821      	ldr	r1, [r4, #0]
 8008916:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800891a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800891e:	d13f      	bne.n	80089a0 <_scanf_float+0x19c>
 8008920:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008924:	6021      	str	r1, [r4, #0]
 8008926:	2201      	movs	r2, #1
 8008928:	e02e      	b.n	8008988 <_scanf_float+0x184>
 800892a:	2b59      	cmp	r3, #89	; 0x59
 800892c:	d01e      	beq.n	800896c <_scanf_float+0x168>
 800892e:	2b61      	cmp	r3, #97	; 0x61
 8008930:	e7de      	b.n	80088f0 <_scanf_float+0xec>
 8008932:	2b6e      	cmp	r3, #110	; 0x6e
 8008934:	d0e9      	beq.n	800890a <_scanf_float+0x106>
 8008936:	d815      	bhi.n	8008964 <_scanf_float+0x160>
 8008938:	2b66      	cmp	r3, #102	; 0x66
 800893a:	d043      	beq.n	80089c4 <_scanf_float+0x1c0>
 800893c:	2b69      	cmp	r3, #105	; 0x69
 800893e:	d19a      	bne.n	8008876 <_scanf_float+0x72>
 8008940:	f1bb 0f00 	cmp.w	fp, #0
 8008944:	d138      	bne.n	80089b8 <_scanf_float+0x1b4>
 8008946:	f1b9 0f00 	cmp.w	r9, #0
 800894a:	d197      	bne.n	800887c <_scanf_float+0x78>
 800894c:	6821      	ldr	r1, [r4, #0]
 800894e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008952:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008956:	d195      	bne.n	8008884 <_scanf_float+0x80>
 8008958:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800895c:	6021      	str	r1, [r4, #0]
 800895e:	f04f 0b01 	mov.w	fp, #1
 8008962:	e011      	b.n	8008988 <_scanf_float+0x184>
 8008964:	2b74      	cmp	r3, #116	; 0x74
 8008966:	d034      	beq.n	80089d2 <_scanf_float+0x1ce>
 8008968:	2b79      	cmp	r3, #121	; 0x79
 800896a:	d184      	bne.n	8008876 <_scanf_float+0x72>
 800896c:	f1bb 0f07 	cmp.w	fp, #7
 8008970:	d181      	bne.n	8008876 <_scanf_float+0x72>
 8008972:	f04f 0b08 	mov.w	fp, #8
 8008976:	e007      	b.n	8008988 <_scanf_float+0x184>
 8008978:	eb12 0f0b 	cmn.w	r2, fp
 800897c:	f47f af7b 	bne.w	8008876 <_scanf_float+0x72>
 8008980:	6821      	ldr	r1, [r4, #0]
 8008982:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008986:	6021      	str	r1, [r4, #0]
 8008988:	702b      	strb	r3, [r5, #0]
 800898a:	3501      	adds	r5, #1
 800898c:	e79a      	b.n	80088c4 <_scanf_float+0xc0>
 800898e:	6821      	ldr	r1, [r4, #0]
 8008990:	0608      	lsls	r0, r1, #24
 8008992:	f57f af70 	bpl.w	8008876 <_scanf_float+0x72>
 8008996:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800899a:	e7f4      	b.n	8008986 <_scanf_float+0x182>
 800899c:	2a02      	cmp	r2, #2
 800899e:	d047      	beq.n	8008a30 <_scanf_float+0x22c>
 80089a0:	f1bb 0f01 	cmp.w	fp, #1
 80089a4:	d003      	beq.n	80089ae <_scanf_float+0x1aa>
 80089a6:	f1bb 0f04 	cmp.w	fp, #4
 80089aa:	f47f af64 	bne.w	8008876 <_scanf_float+0x72>
 80089ae:	f10b 0b01 	add.w	fp, fp, #1
 80089b2:	fa5f fb8b 	uxtb.w	fp, fp
 80089b6:	e7e7      	b.n	8008988 <_scanf_float+0x184>
 80089b8:	f1bb 0f03 	cmp.w	fp, #3
 80089bc:	d0f7      	beq.n	80089ae <_scanf_float+0x1aa>
 80089be:	f1bb 0f05 	cmp.w	fp, #5
 80089c2:	e7f2      	b.n	80089aa <_scanf_float+0x1a6>
 80089c4:	f1bb 0f02 	cmp.w	fp, #2
 80089c8:	f47f af55 	bne.w	8008876 <_scanf_float+0x72>
 80089cc:	f04f 0b03 	mov.w	fp, #3
 80089d0:	e7da      	b.n	8008988 <_scanf_float+0x184>
 80089d2:	f1bb 0f06 	cmp.w	fp, #6
 80089d6:	f47f af4e 	bne.w	8008876 <_scanf_float+0x72>
 80089da:	f04f 0b07 	mov.w	fp, #7
 80089de:	e7d3      	b.n	8008988 <_scanf_float+0x184>
 80089e0:	6821      	ldr	r1, [r4, #0]
 80089e2:	0588      	lsls	r0, r1, #22
 80089e4:	f57f af47 	bpl.w	8008876 <_scanf_float+0x72>
 80089e8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80089ec:	6021      	str	r1, [r4, #0]
 80089ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80089f2:	e7c9      	b.n	8008988 <_scanf_float+0x184>
 80089f4:	6821      	ldr	r1, [r4, #0]
 80089f6:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80089fa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80089fe:	d006      	beq.n	8008a0e <_scanf_float+0x20a>
 8008a00:	0548      	lsls	r0, r1, #21
 8008a02:	f57f af38 	bpl.w	8008876 <_scanf_float+0x72>
 8008a06:	f1b9 0f00 	cmp.w	r9, #0
 8008a0a:	f43f af3b 	beq.w	8008884 <_scanf_float+0x80>
 8008a0e:	0588      	lsls	r0, r1, #22
 8008a10:	bf58      	it	pl
 8008a12:	9802      	ldrpl	r0, [sp, #8]
 8008a14:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008a18:	bf58      	it	pl
 8008a1a:	eba9 0000 	subpl.w	r0, r9, r0
 8008a1e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008a22:	bf58      	it	pl
 8008a24:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008a28:	6021      	str	r1, [r4, #0]
 8008a2a:	f04f 0900 	mov.w	r9, #0
 8008a2e:	e7ab      	b.n	8008988 <_scanf_float+0x184>
 8008a30:	2203      	movs	r2, #3
 8008a32:	e7a9      	b.n	8008988 <_scanf_float+0x184>
 8008a34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	9205      	str	r2, [sp, #20]
 8008a3e:	4798      	blx	r3
 8008a40:	9a05      	ldr	r2, [sp, #20]
 8008a42:	2800      	cmp	r0, #0
 8008a44:	f43f af04 	beq.w	8008850 <_scanf_float+0x4c>
 8008a48:	e715      	b.n	8008876 <_scanf_float+0x72>
 8008a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a4e:	4632      	mov	r2, r6
 8008a50:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008a54:	4638      	mov	r0, r7
 8008a56:	4798      	blx	r3
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	6123      	str	r3, [r4, #16]
 8008a5e:	e715      	b.n	800888c <_scanf_float+0x88>
 8008a60:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008a64:	2b06      	cmp	r3, #6
 8008a66:	d80a      	bhi.n	8008a7e <_scanf_float+0x27a>
 8008a68:	f1bb 0f02 	cmp.w	fp, #2
 8008a6c:	d967      	bls.n	8008b3e <_scanf_float+0x33a>
 8008a6e:	f1ab 0b03 	sub.w	fp, fp, #3
 8008a72:	fa5f fb8b 	uxtb.w	fp, fp
 8008a76:	eba5 0b0b 	sub.w	fp, r5, fp
 8008a7a:	455d      	cmp	r5, fp
 8008a7c:	d14a      	bne.n	8008b14 <_scanf_float+0x310>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	05da      	lsls	r2, r3, #23
 8008a82:	d51f      	bpl.n	8008ac4 <_scanf_float+0x2c0>
 8008a84:	055b      	lsls	r3, r3, #21
 8008a86:	d467      	bmi.n	8008b58 <_scanf_float+0x354>
 8008a88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	2965      	cmp	r1, #101	; 0x65
 8008a90:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a94:	f105 3bff 	add.w	fp, r5, #4294967295
 8008a98:	6123      	str	r3, [r4, #16]
 8008a9a:	d00d      	beq.n	8008ab8 <_scanf_float+0x2b4>
 8008a9c:	2945      	cmp	r1, #69	; 0x45
 8008a9e:	d00b      	beq.n	8008ab8 <_scanf_float+0x2b4>
 8008aa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aa4:	4632      	mov	r2, r6
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	4798      	blx	r3
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	f1a5 0b02 	sub.w	fp, r5, #2
 8008ab6:	6123      	str	r3, [r4, #16]
 8008ab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008abc:	4632      	mov	r2, r6
 8008abe:	4638      	mov	r0, r7
 8008ac0:	4798      	blx	r3
 8008ac2:	465d      	mov	r5, fp
 8008ac4:	6826      	ldr	r6, [r4, #0]
 8008ac6:	f016 0610 	ands.w	r6, r6, #16
 8008aca:	d176      	bne.n	8008bba <_scanf_float+0x3b6>
 8008acc:	702e      	strb	r6, [r5, #0]
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ad8:	d141      	bne.n	8008b5e <_scanf_float+0x35a>
 8008ada:	9b02      	ldr	r3, [sp, #8]
 8008adc:	eba9 0303 	sub.w	r3, r9, r3
 8008ae0:	425a      	negs	r2, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d148      	bne.n	8008b78 <_scanf_float+0x374>
 8008ae6:	4641      	mov	r1, r8
 8008ae8:	2200      	movs	r2, #0
 8008aea:	4638      	mov	r0, r7
 8008aec:	f000 ff3c 	bl	8009968 <_strtod_r>
 8008af0:	6825      	ldr	r5, [r4, #0]
 8008af2:	4680      	mov	r8, r0
 8008af4:	f015 0f02 	tst.w	r5, #2
 8008af8:	4689      	mov	r9, r1
 8008afa:	f8da 3000 	ldr.w	r3, [sl]
 8008afe:	d046      	beq.n	8008b8e <_scanf_float+0x38a>
 8008b00:	1d1a      	adds	r2, r3, #4
 8008b02:	f8ca 2000 	str.w	r2, [sl]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	e9c3 8900 	strd	r8, r9, [r3]
 8008b0c:	68e3      	ldr	r3, [r4, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60e3      	str	r3, [r4, #12]
 8008b12:	e6bf      	b.n	8008894 <_scanf_float+0x90>
 8008b14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b18:	4632      	mov	r2, r6
 8008b1a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008b1e:	4638      	mov	r0, r7
 8008b20:	4798      	blx	r3
 8008b22:	6923      	ldr	r3, [r4, #16]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	6123      	str	r3, [r4, #16]
 8008b28:	e7a7      	b.n	8008a7a <_scanf_float+0x276>
 8008b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b2e:	4632      	mov	r2, r6
 8008b30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008b34:	4638      	mov	r0, r7
 8008b36:	4798      	blx	r3
 8008b38:	6923      	ldr	r3, [r4, #16]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	6123      	str	r3, [r4, #16]
 8008b3e:	4545      	cmp	r5, r8
 8008b40:	d8f3      	bhi.n	8008b2a <_scanf_float+0x326>
 8008b42:	e6a6      	b.n	8008892 <_scanf_float+0x8e>
 8008b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b48:	4632      	mov	r2, r6
 8008b4a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008b4e:	4638      	mov	r0, r7
 8008b50:	4798      	blx	r3
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	6123      	str	r3, [r4, #16]
 8008b58:	4545      	cmp	r5, r8
 8008b5a:	d8f3      	bhi.n	8008b44 <_scanf_float+0x340>
 8008b5c:	e699      	b.n	8008892 <_scanf_float+0x8e>
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0c0      	beq.n	8008ae6 <_scanf_float+0x2e2>
 8008b64:	9904      	ldr	r1, [sp, #16]
 8008b66:	230a      	movs	r3, #10
 8008b68:	4632      	mov	r2, r6
 8008b6a:	3101      	adds	r1, #1
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f000 ff87 	bl	8009a80 <_strtol_r>
 8008b72:	9b03      	ldr	r3, [sp, #12]
 8008b74:	9d04      	ldr	r5, [sp, #16]
 8008b76:	1ac2      	subs	r2, r0, r3
 8008b78:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b7c:	429d      	cmp	r5, r3
 8008b7e:	bf28      	it	cs
 8008b80:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008b84:	490e      	ldr	r1, [pc, #56]	; (8008bc0 <_scanf_float+0x3bc>)
 8008b86:	4628      	mov	r0, r5
 8008b88:	f000 f8ac 	bl	8008ce4 <siprintf>
 8008b8c:	e7ab      	b.n	8008ae6 <_scanf_float+0x2e2>
 8008b8e:	1d1f      	adds	r7, r3, #4
 8008b90:	f015 0504 	ands.w	r5, r5, #4
 8008b94:	f8ca 7000 	str.w	r7, [sl]
 8008b98:	d1b5      	bne.n	8008b06 <_scanf_float+0x302>
 8008b9a:	681f      	ldr	r7, [r3, #0]
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	f7f7 ff34 	bl	8000a0c <__aeabi_dcmpun>
 8008ba4:	b120      	cbz	r0, 8008bb0 <_scanf_float+0x3ac>
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	f000 f898 	bl	8008cdc <nanf>
 8008bac:	6038      	str	r0, [r7, #0]
 8008bae:	e7ad      	b.n	8008b0c <_scanf_float+0x308>
 8008bb0:	4640      	mov	r0, r8
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	f7f7 ff88 	bl	8000ac8 <__aeabi_d2f>
 8008bb8:	e7f8      	b.n	8008bac <_scanf_float+0x3a8>
 8008bba:	2600      	movs	r6, #0
 8008bbc:	e66a      	b.n	8008894 <_scanf_float+0x90>
 8008bbe:	bf00      	nop
 8008bc0:	0800c650 	.word	0x0800c650

08008bc4 <iprintf>:
 8008bc4:	b40f      	push	{r0, r1, r2, r3}
 8008bc6:	4b0a      	ldr	r3, [pc, #40]	; (8008bf0 <iprintf+0x2c>)
 8008bc8:	b513      	push	{r0, r1, r4, lr}
 8008bca:	681c      	ldr	r4, [r3, #0]
 8008bcc:	b124      	cbz	r4, 8008bd8 <iprintf+0x14>
 8008bce:	69a3      	ldr	r3, [r4, #24]
 8008bd0:	b913      	cbnz	r3, 8008bd8 <iprintf+0x14>
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f001 ff58 	bl	800aa88 <__sinit>
 8008bd8:	ab05      	add	r3, sp, #20
 8008bda:	9a04      	ldr	r2, [sp, #16]
 8008bdc:	68a1      	ldr	r1, [r4, #8]
 8008bde:	4620      	mov	r0, r4
 8008be0:	9301      	str	r3, [sp, #4]
 8008be2:	f003 f963 	bl	800beac <_vfiprintf_r>
 8008be6:	b002      	add	sp, #8
 8008be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bec:	b004      	add	sp, #16
 8008bee:	4770      	bx	lr
 8008bf0:	200004bc 	.word	0x200004bc

08008bf4 <_puts_r>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	460e      	mov	r6, r1
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	b118      	cbz	r0, 8008c04 <_puts_r+0x10>
 8008bfc:	6983      	ldr	r3, [r0, #24]
 8008bfe:	b90b      	cbnz	r3, 8008c04 <_puts_r+0x10>
 8008c00:	f001 ff42 	bl	800aa88 <__sinit>
 8008c04:	69ab      	ldr	r3, [r5, #24]
 8008c06:	68ac      	ldr	r4, [r5, #8]
 8008c08:	b913      	cbnz	r3, 8008c10 <_puts_r+0x1c>
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f001 ff3c 	bl	800aa88 <__sinit>
 8008c10:	4b23      	ldr	r3, [pc, #140]	; (8008ca0 <_puts_r+0xac>)
 8008c12:	429c      	cmp	r4, r3
 8008c14:	d117      	bne.n	8008c46 <_puts_r+0x52>
 8008c16:	686c      	ldr	r4, [r5, #4]
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	071b      	lsls	r3, r3, #28
 8008c1c:	d51d      	bpl.n	8008c5a <_puts_r+0x66>
 8008c1e:	6923      	ldr	r3, [r4, #16]
 8008c20:	b1db      	cbz	r3, 8008c5a <_puts_r+0x66>
 8008c22:	3e01      	subs	r6, #1
 8008c24:	68a3      	ldr	r3, [r4, #8]
 8008c26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	60a3      	str	r3, [r4, #8]
 8008c2e:	b9e9      	cbnz	r1, 8008c6c <_puts_r+0x78>
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	da2e      	bge.n	8008c92 <_puts_r+0x9e>
 8008c34:	4622      	mov	r2, r4
 8008c36:	210a      	movs	r1, #10
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f000 ff33 	bl	8009aa4 <__swbuf_r>
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d011      	beq.n	8008c66 <_puts_r+0x72>
 8008c42:	200a      	movs	r0, #10
 8008c44:	e011      	b.n	8008c6a <_puts_r+0x76>
 8008c46:	4b17      	ldr	r3, [pc, #92]	; (8008ca4 <_puts_r+0xb0>)
 8008c48:	429c      	cmp	r4, r3
 8008c4a:	d101      	bne.n	8008c50 <_puts_r+0x5c>
 8008c4c:	68ac      	ldr	r4, [r5, #8]
 8008c4e:	e7e3      	b.n	8008c18 <_puts_r+0x24>
 8008c50:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <_puts_r+0xb4>)
 8008c52:	429c      	cmp	r4, r3
 8008c54:	bf08      	it	eq
 8008c56:	68ec      	ldreq	r4, [r5, #12]
 8008c58:	e7de      	b.n	8008c18 <_puts_r+0x24>
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f000 ff73 	bl	8009b48 <__swsetup_r>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d0dd      	beq.n	8008c22 <_puts_r+0x2e>
 8008c66:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	da04      	bge.n	8008c7a <_puts_r+0x86>
 8008c70:	69a2      	ldr	r2, [r4, #24]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	dc06      	bgt.n	8008c84 <_puts_r+0x90>
 8008c76:	290a      	cmp	r1, #10
 8008c78:	d004      	beq.n	8008c84 <_puts_r+0x90>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	6022      	str	r2, [r4, #0]
 8008c80:	7019      	strb	r1, [r3, #0]
 8008c82:	e7cf      	b.n	8008c24 <_puts_r+0x30>
 8008c84:	4622      	mov	r2, r4
 8008c86:	4628      	mov	r0, r5
 8008c88:	f000 ff0c 	bl	8009aa4 <__swbuf_r>
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d1c9      	bne.n	8008c24 <_puts_r+0x30>
 8008c90:	e7e9      	b.n	8008c66 <_puts_r+0x72>
 8008c92:	200a      	movs	r0, #10
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	6022      	str	r2, [r4, #0]
 8008c9a:	7018      	strb	r0, [r3, #0]
 8008c9c:	e7e5      	b.n	8008c6a <_puts_r+0x76>
 8008c9e:	bf00      	nop
 8008ca0:	0800c6d8 	.word	0x0800c6d8
 8008ca4:	0800c6f8 	.word	0x0800c6f8
 8008ca8:	0800c6b8 	.word	0x0800c6b8

08008cac <puts>:
 8008cac:	4b02      	ldr	r3, [pc, #8]	; (8008cb8 <puts+0xc>)
 8008cae:	4601      	mov	r1, r0
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	f7ff bf9f 	b.w	8008bf4 <_puts_r>
 8008cb6:	bf00      	nop
 8008cb8:	200004bc 	.word	0x200004bc

08008cbc <_sbrk_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	4c05      	ldr	r4, [pc, #20]	; (8008cd8 <_sbrk_r+0x1c>)
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	f003 fb26 	bl	800c318 <_sbrk>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_sbrk_r+0x1a>
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_sbrk_r+0x1a>
 8008cd4:	602b      	str	r3, [r5, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	20002d14 	.word	0x20002d14

08008cdc <nanf>:
 8008cdc:	4800      	ldr	r0, [pc, #0]	; (8008ce0 <nanf+0x4>)
 8008cde:	4770      	bx	lr
 8008ce0:	7fc00000 	.word	0x7fc00000

08008ce4 <siprintf>:
 8008ce4:	b40e      	push	{r1, r2, r3}
 8008ce6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cea:	b500      	push	{lr}
 8008cec:	b09c      	sub	sp, #112	; 0x70
 8008cee:	ab1d      	add	r3, sp, #116	; 0x74
 8008cf0:	9002      	str	r0, [sp, #8]
 8008cf2:	9006      	str	r0, [sp, #24]
 8008cf4:	9107      	str	r1, [sp, #28]
 8008cf6:	9104      	str	r1, [sp, #16]
 8008cf8:	4808      	ldr	r0, [pc, #32]	; (8008d1c <siprintf+0x38>)
 8008cfa:	4909      	ldr	r1, [pc, #36]	; (8008d20 <siprintf+0x3c>)
 8008cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d00:	9105      	str	r1, [sp, #20]
 8008d02:	6800      	ldr	r0, [r0, #0]
 8008d04:	a902      	add	r1, sp, #8
 8008d06:	9301      	str	r3, [sp, #4]
 8008d08:	f002 ffb0 	bl	800bc6c <_svfiprintf_r>
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	9b02      	ldr	r3, [sp, #8]
 8008d10:	701a      	strb	r2, [r3, #0]
 8008d12:	b01c      	add	sp, #112	; 0x70
 8008d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d18:	b003      	add	sp, #12
 8008d1a:	4770      	bx	lr
 8008d1c:	200004bc 	.word	0x200004bc
 8008d20:	ffff0208 	.word	0xffff0208

08008d24 <sulp>:
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	460f      	mov	r7, r1
 8008d2a:	4690      	mov	r8, r2
 8008d2c:	f002 fdca 	bl	800b8c4 <__ulp>
 8008d30:	4604      	mov	r4, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	f1b8 0f00 	cmp.w	r8, #0
 8008d38:	d011      	beq.n	8008d5e <sulp+0x3a>
 8008d3a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008d3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dd0b      	ble.n	8008d5e <sulp+0x3a>
 8008d46:	2400      	movs	r4, #0
 8008d48:	051b      	lsls	r3, r3, #20
 8008d4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008d4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008d52:	4622      	mov	r2, r4
 8008d54:	462b      	mov	r3, r5
 8008d56:	f7f7 fbbf 	bl	80004d8 <__aeabi_dmul>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	4620      	mov	r0, r4
 8008d60:	4629      	mov	r1, r5
 8008d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008d68 <_strtod_l>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	461f      	mov	r7, r3
 8008d6e:	2300      	movs	r3, #0
 8008d70:	b0a1      	sub	sp, #132	; 0x84
 8008d72:	4683      	mov	fp, r0
 8008d74:	4638      	mov	r0, r7
 8008d76:	460e      	mov	r6, r1
 8008d78:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d7a:	931c      	str	r3, [sp, #112]	; 0x70
 8008d7c:	f002 fa39 	bl	800b1f2 <__localeconv_l>
 8008d80:	4680      	mov	r8, r0
 8008d82:	6800      	ldr	r0, [r0, #0]
 8008d84:	f7f7 f9e4 	bl	8000150 <strlen>
 8008d88:	f04f 0900 	mov.w	r9, #0
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	f04f 0a00 	mov.w	sl, #0
 8008d92:	961b      	str	r6, [sp, #108]	; 0x6c
 8008d94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d96:	781a      	ldrb	r2, [r3, #0]
 8008d98:	2a0d      	cmp	r2, #13
 8008d9a:	d832      	bhi.n	8008e02 <_strtod_l+0x9a>
 8008d9c:	2a09      	cmp	r2, #9
 8008d9e:	d236      	bcs.n	8008e0e <_strtod_l+0xa6>
 8008da0:	2a00      	cmp	r2, #0
 8008da2:	d03e      	beq.n	8008e22 <_strtod_l+0xba>
 8008da4:	2300      	movs	r3, #0
 8008da6:	930d      	str	r3, [sp, #52]	; 0x34
 8008da8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008daa:	782b      	ldrb	r3, [r5, #0]
 8008dac:	2b30      	cmp	r3, #48	; 0x30
 8008dae:	f040 80ac 	bne.w	8008f0a <_strtod_l+0x1a2>
 8008db2:	786b      	ldrb	r3, [r5, #1]
 8008db4:	2b58      	cmp	r3, #88	; 0x58
 8008db6:	d001      	beq.n	8008dbc <_strtod_l+0x54>
 8008db8:	2b78      	cmp	r3, #120	; 0x78
 8008dba:	d167      	bne.n	8008e8c <_strtod_l+0x124>
 8008dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dbe:	9702      	str	r7, [sp, #8]
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	ab1c      	add	r3, sp, #112	; 0x70
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	4a89      	ldr	r2, [pc, #548]	; (8008fec <_strtod_l+0x284>)
 8008dc8:	ab1d      	add	r3, sp, #116	; 0x74
 8008dca:	a91b      	add	r1, sp, #108	; 0x6c
 8008dcc:	4658      	mov	r0, fp
 8008dce:	f001 ff35 	bl	800ac3c <__gethex>
 8008dd2:	f010 0407 	ands.w	r4, r0, #7
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	d005      	beq.n	8008de6 <_strtod_l+0x7e>
 8008dda:	2c06      	cmp	r4, #6
 8008ddc:	d12b      	bne.n	8008e36 <_strtod_l+0xce>
 8008dde:	2300      	movs	r3, #0
 8008de0:	3501      	adds	r5, #1
 8008de2:	951b      	str	r5, [sp, #108]	; 0x6c
 8008de4:	930d      	str	r3, [sp, #52]	; 0x34
 8008de6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f040 85a6 	bne.w	800993a <_strtod_l+0xbd2>
 8008dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008df0:	b1e3      	cbz	r3, 8008e2c <_strtod_l+0xc4>
 8008df2:	464a      	mov	r2, r9
 8008df4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8008df8:	4610      	mov	r0, r2
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	b021      	add	sp, #132	; 0x84
 8008dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e02:	2a2b      	cmp	r2, #43	; 0x2b
 8008e04:	d015      	beq.n	8008e32 <_strtod_l+0xca>
 8008e06:	2a2d      	cmp	r2, #45	; 0x2d
 8008e08:	d004      	beq.n	8008e14 <_strtod_l+0xac>
 8008e0a:	2a20      	cmp	r2, #32
 8008e0c:	d1ca      	bne.n	8008da4 <_strtod_l+0x3c>
 8008e0e:	3301      	adds	r3, #1
 8008e10:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e12:	e7bf      	b.n	8008d94 <_strtod_l+0x2c>
 8008e14:	2201      	movs	r2, #1
 8008e16:	920d      	str	r2, [sp, #52]	; 0x34
 8008e18:	1c5a      	adds	r2, r3, #1
 8008e1a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008e1c:	785b      	ldrb	r3, [r3, #1]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1c2      	bne.n	8008da8 <_strtod_l+0x40>
 8008e22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e24:	961b      	str	r6, [sp, #108]	; 0x6c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f040 8585 	bne.w	8009936 <_strtod_l+0xbce>
 8008e2c:	464a      	mov	r2, r9
 8008e2e:	4653      	mov	r3, sl
 8008e30:	e7e2      	b.n	8008df8 <_strtod_l+0x90>
 8008e32:	2200      	movs	r2, #0
 8008e34:	e7ef      	b.n	8008e16 <_strtod_l+0xae>
 8008e36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008e38:	b13a      	cbz	r2, 8008e4a <_strtod_l+0xe2>
 8008e3a:	2135      	movs	r1, #53	; 0x35
 8008e3c:	a81e      	add	r0, sp, #120	; 0x78
 8008e3e:	f002 fe34 	bl	800baaa <__copybits>
 8008e42:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008e44:	4658      	mov	r0, fp
 8008e46:	f002 faa7 	bl	800b398 <_Bfree>
 8008e4a:	3c01      	subs	r4, #1
 8008e4c:	2c04      	cmp	r4, #4
 8008e4e:	d806      	bhi.n	8008e5e <_strtod_l+0xf6>
 8008e50:	e8df f004 	tbb	[pc, r4]
 8008e54:	1714030a 	.word	0x1714030a
 8008e58:	0a          	.byte	0x0a
 8008e59:	00          	.byte	0x00
 8008e5a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8008e5e:	0731      	lsls	r1, r6, #28
 8008e60:	d5c1      	bpl.n	8008de6 <_strtod_l+0x7e>
 8008e62:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8008e66:	e7be      	b.n	8008de6 <_strtod_l+0x7e>
 8008e68:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008e6a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8008e6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e76:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8008e7a:	e7f0      	b.n	8008e5e <_strtod_l+0xf6>
 8008e7c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8008ff0 <_strtod_l+0x288>
 8008e80:	e7ed      	b.n	8008e5e <_strtod_l+0xf6>
 8008e82:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8008e86:	f04f 39ff 	mov.w	r9, #4294967295
 8008e8a:	e7e8      	b.n	8008e5e <_strtod_l+0xf6>
 8008e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	921b      	str	r2, [sp, #108]	; 0x6c
 8008e92:	785b      	ldrb	r3, [r3, #1]
 8008e94:	2b30      	cmp	r3, #48	; 0x30
 8008e96:	d0f9      	beq.n	8008e8c <_strtod_l+0x124>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0a4      	beq.n	8008de6 <_strtod_l+0x7e>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	2500      	movs	r5, #0
 8008ea0:	220a      	movs	r2, #10
 8008ea2:	9307      	str	r3, [sp, #28]
 8008ea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ea6:	9506      	str	r5, [sp, #24]
 8008ea8:	9308      	str	r3, [sp, #32]
 8008eaa:	9504      	str	r5, [sp, #16]
 8008eac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008eae:	7807      	ldrb	r7, [r0, #0]
 8008eb0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008eb4:	b2d9      	uxtb	r1, r3
 8008eb6:	2909      	cmp	r1, #9
 8008eb8:	d929      	bls.n	8008f0e <_strtod_l+0x1a6>
 8008eba:	4622      	mov	r2, r4
 8008ebc:	f8d8 1000 	ldr.w	r1, [r8]
 8008ec0:	f003 f94d 	bl	800c15e <strncmp>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d031      	beq.n	8008f2c <_strtod_l+0x1c4>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	463b      	mov	r3, r7
 8008ecc:	4602      	mov	r2, r0
 8008ece:	9c04      	ldr	r4, [sp, #16]
 8008ed0:	9005      	str	r0, [sp, #20]
 8008ed2:	2b65      	cmp	r3, #101	; 0x65
 8008ed4:	d001      	beq.n	8008eda <_strtod_l+0x172>
 8008ed6:	2b45      	cmp	r3, #69	; 0x45
 8008ed8:	d114      	bne.n	8008f04 <_strtod_l+0x19c>
 8008eda:	b924      	cbnz	r4, 8008ee6 <_strtod_l+0x17e>
 8008edc:	b910      	cbnz	r0, 8008ee4 <_strtod_l+0x17c>
 8008ede:	9b07      	ldr	r3, [sp, #28]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d09e      	beq.n	8008e22 <_strtod_l+0xba>
 8008ee4:	2400      	movs	r4, #0
 8008ee6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008ee8:	1c73      	adds	r3, r6, #1
 8008eea:	931b      	str	r3, [sp, #108]	; 0x6c
 8008eec:	7873      	ldrb	r3, [r6, #1]
 8008eee:	2b2b      	cmp	r3, #43	; 0x2b
 8008ef0:	d078      	beq.n	8008fe4 <_strtod_l+0x27c>
 8008ef2:	2b2d      	cmp	r3, #45	; 0x2d
 8008ef4:	d070      	beq.n	8008fd8 <_strtod_l+0x270>
 8008ef6:	f04f 0c00 	mov.w	ip, #0
 8008efa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008efe:	2f09      	cmp	r7, #9
 8008f00:	d97c      	bls.n	8008ffc <_strtod_l+0x294>
 8008f02:	961b      	str	r6, [sp, #108]	; 0x6c
 8008f04:	f04f 0e00 	mov.w	lr, #0
 8008f08:	e09a      	b.n	8009040 <_strtod_l+0x2d8>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e7c7      	b.n	8008e9e <_strtod_l+0x136>
 8008f0e:	9904      	ldr	r1, [sp, #16]
 8008f10:	3001      	adds	r0, #1
 8008f12:	2908      	cmp	r1, #8
 8008f14:	bfd7      	itett	le
 8008f16:	9906      	ldrle	r1, [sp, #24]
 8008f18:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008f1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f20:	9306      	strle	r3, [sp, #24]
 8008f22:	9b04      	ldr	r3, [sp, #16]
 8008f24:	901b      	str	r0, [sp, #108]	; 0x6c
 8008f26:	3301      	adds	r3, #1
 8008f28:	9304      	str	r3, [sp, #16]
 8008f2a:	e7bf      	b.n	8008eac <_strtod_l+0x144>
 8008f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f2e:	191a      	adds	r2, r3, r4
 8008f30:	921b      	str	r2, [sp, #108]	; 0x6c
 8008f32:	9a04      	ldr	r2, [sp, #16]
 8008f34:	5d1b      	ldrb	r3, [r3, r4]
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	d037      	beq.n	8008faa <_strtod_l+0x242>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	9c04      	ldr	r4, [sp, #16]
 8008f3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008f42:	2909      	cmp	r1, #9
 8008f44:	d913      	bls.n	8008f6e <_strtod_l+0x206>
 8008f46:	2101      	movs	r1, #1
 8008f48:	9105      	str	r1, [sp, #20]
 8008f4a:	e7c2      	b.n	8008ed2 <_strtod_l+0x16a>
 8008f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f4e:	3001      	adds	r0, #1
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	921b      	str	r2, [sp, #108]	; 0x6c
 8008f54:	785b      	ldrb	r3, [r3, #1]
 8008f56:	2b30      	cmp	r3, #48	; 0x30
 8008f58:	d0f8      	beq.n	8008f4c <_strtod_l+0x1e4>
 8008f5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008f5e:	2a08      	cmp	r2, #8
 8008f60:	f200 84f0 	bhi.w	8009944 <_strtod_l+0xbdc>
 8008f64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008f66:	9208      	str	r2, [sp, #32]
 8008f68:	4602      	mov	r2, r0
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008f72:	f100 0101 	add.w	r1, r0, #1
 8008f76:	d012      	beq.n	8008f9e <_strtod_l+0x236>
 8008f78:	440a      	add	r2, r1
 8008f7a:	270a      	movs	r7, #10
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	eb00 0c04 	add.w	ip, r0, r4
 8008f82:	458c      	cmp	ip, r1
 8008f84:	d113      	bne.n	8008fae <_strtod_l+0x246>
 8008f86:	1821      	adds	r1, r4, r0
 8008f88:	2908      	cmp	r1, #8
 8008f8a:	f104 0401 	add.w	r4, r4, #1
 8008f8e:	4404      	add	r4, r0
 8008f90:	dc19      	bgt.n	8008fc6 <_strtod_l+0x25e>
 8008f92:	210a      	movs	r1, #10
 8008f94:	9b06      	ldr	r3, [sp, #24]
 8008f96:	fb01 e303 	mla	r3, r1, r3, lr
 8008f9a:	9306      	str	r3, [sp, #24]
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fa0:	1c58      	adds	r0, r3, #1
 8008fa2:	901b      	str	r0, [sp, #108]	; 0x6c
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	4608      	mov	r0, r1
 8008fa8:	e7c9      	b.n	8008f3e <_strtod_l+0x1d6>
 8008faa:	9804      	ldr	r0, [sp, #16]
 8008fac:	e7d3      	b.n	8008f56 <_strtod_l+0x1ee>
 8008fae:	2908      	cmp	r1, #8
 8008fb0:	f101 0101 	add.w	r1, r1, #1
 8008fb4:	dc03      	bgt.n	8008fbe <_strtod_l+0x256>
 8008fb6:	9b06      	ldr	r3, [sp, #24]
 8008fb8:	437b      	muls	r3, r7
 8008fba:	9306      	str	r3, [sp, #24]
 8008fbc:	e7e1      	b.n	8008f82 <_strtod_l+0x21a>
 8008fbe:	2910      	cmp	r1, #16
 8008fc0:	bfd8      	it	le
 8008fc2:	437d      	mulle	r5, r7
 8008fc4:	e7dd      	b.n	8008f82 <_strtod_l+0x21a>
 8008fc6:	2c10      	cmp	r4, #16
 8008fc8:	bfdc      	itt	le
 8008fca:	210a      	movle	r1, #10
 8008fcc:	fb01 e505 	mlale	r5, r1, r5, lr
 8008fd0:	e7e4      	b.n	8008f9c <_strtod_l+0x234>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	9305      	str	r3, [sp, #20]
 8008fd6:	e781      	b.n	8008edc <_strtod_l+0x174>
 8008fd8:	f04f 0c01 	mov.w	ip, #1
 8008fdc:	1cb3      	adds	r3, r6, #2
 8008fde:	931b      	str	r3, [sp, #108]	; 0x6c
 8008fe0:	78b3      	ldrb	r3, [r6, #2]
 8008fe2:	e78a      	b.n	8008efa <_strtod_l+0x192>
 8008fe4:	f04f 0c00 	mov.w	ip, #0
 8008fe8:	e7f8      	b.n	8008fdc <_strtod_l+0x274>
 8008fea:	bf00      	nop
 8008fec:	0800c658 	.word	0x0800c658
 8008ff0:	7ff00000 	.word	0x7ff00000
 8008ff4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ff6:	1c5f      	adds	r7, r3, #1
 8008ff8:	971b      	str	r7, [sp, #108]	; 0x6c
 8008ffa:	785b      	ldrb	r3, [r3, #1]
 8008ffc:	2b30      	cmp	r3, #48	; 0x30
 8008ffe:	d0f9      	beq.n	8008ff4 <_strtod_l+0x28c>
 8009000:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009004:	2f08      	cmp	r7, #8
 8009006:	f63f af7d 	bhi.w	8008f04 <_strtod_l+0x19c>
 800900a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800900e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009010:	9309      	str	r3, [sp, #36]	; 0x24
 8009012:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009014:	1c5f      	adds	r7, r3, #1
 8009016:	971b      	str	r7, [sp, #108]	; 0x6c
 8009018:	785b      	ldrb	r3, [r3, #1]
 800901a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800901e:	f1b8 0f09 	cmp.w	r8, #9
 8009022:	d937      	bls.n	8009094 <_strtod_l+0x32c>
 8009024:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009026:	1a7f      	subs	r7, r7, r1
 8009028:	2f08      	cmp	r7, #8
 800902a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800902e:	dc37      	bgt.n	80090a0 <_strtod_l+0x338>
 8009030:	45be      	cmp	lr, r7
 8009032:	bfa8      	it	ge
 8009034:	46be      	movge	lr, r7
 8009036:	f1bc 0f00 	cmp.w	ip, #0
 800903a:	d001      	beq.n	8009040 <_strtod_l+0x2d8>
 800903c:	f1ce 0e00 	rsb	lr, lr, #0
 8009040:	2c00      	cmp	r4, #0
 8009042:	d151      	bne.n	80090e8 <_strtod_l+0x380>
 8009044:	2800      	cmp	r0, #0
 8009046:	f47f aece 	bne.w	8008de6 <_strtod_l+0x7e>
 800904a:	9a07      	ldr	r2, [sp, #28]
 800904c:	2a00      	cmp	r2, #0
 800904e:	f47f aeca 	bne.w	8008de6 <_strtod_l+0x7e>
 8009052:	9a05      	ldr	r2, [sp, #20]
 8009054:	2a00      	cmp	r2, #0
 8009056:	f47f aee4 	bne.w	8008e22 <_strtod_l+0xba>
 800905a:	2b4e      	cmp	r3, #78	; 0x4e
 800905c:	d027      	beq.n	80090ae <_strtod_l+0x346>
 800905e:	dc21      	bgt.n	80090a4 <_strtod_l+0x33c>
 8009060:	2b49      	cmp	r3, #73	; 0x49
 8009062:	f47f aede 	bne.w	8008e22 <_strtod_l+0xba>
 8009066:	49a4      	ldr	r1, [pc, #656]	; (80092f8 <_strtod_l+0x590>)
 8009068:	a81b      	add	r0, sp, #108	; 0x6c
 800906a:	f002 f81b 	bl	800b0a4 <__match>
 800906e:	2800      	cmp	r0, #0
 8009070:	f43f aed7 	beq.w	8008e22 <_strtod_l+0xba>
 8009074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009076:	49a1      	ldr	r1, [pc, #644]	; (80092fc <_strtod_l+0x594>)
 8009078:	3b01      	subs	r3, #1
 800907a:	a81b      	add	r0, sp, #108	; 0x6c
 800907c:	931b      	str	r3, [sp, #108]	; 0x6c
 800907e:	f002 f811 	bl	800b0a4 <__match>
 8009082:	b910      	cbnz	r0, 800908a <_strtod_l+0x322>
 8009084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009086:	3301      	adds	r3, #1
 8009088:	931b      	str	r3, [sp, #108]	; 0x6c
 800908a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8009310 <_strtod_l+0x5a8>
 800908e:	f04f 0900 	mov.w	r9, #0
 8009092:	e6a8      	b.n	8008de6 <_strtod_l+0x7e>
 8009094:	210a      	movs	r1, #10
 8009096:	fb01 3e0e 	mla	lr, r1, lr, r3
 800909a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800909e:	e7b8      	b.n	8009012 <_strtod_l+0x2aa>
 80090a0:	46be      	mov	lr, r7
 80090a2:	e7c8      	b.n	8009036 <_strtod_l+0x2ce>
 80090a4:	2b69      	cmp	r3, #105	; 0x69
 80090a6:	d0de      	beq.n	8009066 <_strtod_l+0x2fe>
 80090a8:	2b6e      	cmp	r3, #110	; 0x6e
 80090aa:	f47f aeba 	bne.w	8008e22 <_strtod_l+0xba>
 80090ae:	4994      	ldr	r1, [pc, #592]	; (8009300 <_strtod_l+0x598>)
 80090b0:	a81b      	add	r0, sp, #108	; 0x6c
 80090b2:	f001 fff7 	bl	800b0a4 <__match>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f43f aeb3 	beq.w	8008e22 <_strtod_l+0xba>
 80090bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	2b28      	cmp	r3, #40	; 0x28
 80090c2:	d10e      	bne.n	80090e2 <_strtod_l+0x37a>
 80090c4:	aa1e      	add	r2, sp, #120	; 0x78
 80090c6:	498f      	ldr	r1, [pc, #572]	; (8009304 <_strtod_l+0x59c>)
 80090c8:	a81b      	add	r0, sp, #108	; 0x6c
 80090ca:	f001 ffff 	bl	800b0cc <__hexnan>
 80090ce:	2805      	cmp	r0, #5
 80090d0:	d107      	bne.n	80090e2 <_strtod_l+0x37a>
 80090d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80090d4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80090d8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80090dc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80090e0:	e681      	b.n	8008de6 <_strtod_l+0x7e>
 80090e2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8009318 <_strtod_l+0x5b0>
 80090e6:	e7d2      	b.n	800908e <_strtod_l+0x326>
 80090e8:	ebae 0302 	sub.w	r3, lr, r2
 80090ec:	9307      	str	r3, [sp, #28]
 80090ee:	9b04      	ldr	r3, [sp, #16]
 80090f0:	9806      	ldr	r0, [sp, #24]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	bf08      	it	eq
 80090f6:	4623      	moveq	r3, r4
 80090f8:	2c10      	cmp	r4, #16
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	46a0      	mov	r8, r4
 80090fe:	bfa8      	it	ge
 8009100:	f04f 0810 	movge.w	r8, #16
 8009104:	f7f7 f96e 	bl	80003e4 <__aeabi_ui2d>
 8009108:	2c09      	cmp	r4, #9
 800910a:	4681      	mov	r9, r0
 800910c:	468a      	mov	sl, r1
 800910e:	dc13      	bgt.n	8009138 <_strtod_l+0x3d0>
 8009110:	9b07      	ldr	r3, [sp, #28]
 8009112:	2b00      	cmp	r3, #0
 8009114:	f43f ae67 	beq.w	8008de6 <_strtod_l+0x7e>
 8009118:	9b07      	ldr	r3, [sp, #28]
 800911a:	dd7e      	ble.n	800921a <_strtod_l+0x4b2>
 800911c:	2b16      	cmp	r3, #22
 800911e:	dc65      	bgt.n	80091ec <_strtod_l+0x484>
 8009120:	4a79      	ldr	r2, [pc, #484]	; (8009308 <_strtod_l+0x5a0>)
 8009122:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009126:	464a      	mov	r2, r9
 8009128:	e9de 0100 	ldrd	r0, r1, [lr]
 800912c:	4653      	mov	r3, sl
 800912e:	f7f7 f9d3 	bl	80004d8 <__aeabi_dmul>
 8009132:	4681      	mov	r9, r0
 8009134:	468a      	mov	sl, r1
 8009136:	e656      	b.n	8008de6 <_strtod_l+0x7e>
 8009138:	4b73      	ldr	r3, [pc, #460]	; (8009308 <_strtod_l+0x5a0>)
 800913a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800913e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009142:	f7f7 f9c9 	bl	80004d8 <__aeabi_dmul>
 8009146:	4606      	mov	r6, r0
 8009148:	4628      	mov	r0, r5
 800914a:	460f      	mov	r7, r1
 800914c:	f7f7 f94a 	bl	80003e4 <__aeabi_ui2d>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4630      	mov	r0, r6
 8009156:	4639      	mov	r1, r7
 8009158:	f7f7 f808 	bl	800016c <__adddf3>
 800915c:	2c0f      	cmp	r4, #15
 800915e:	4681      	mov	r9, r0
 8009160:	468a      	mov	sl, r1
 8009162:	ddd5      	ble.n	8009110 <_strtod_l+0x3a8>
 8009164:	9b07      	ldr	r3, [sp, #28]
 8009166:	eba4 0808 	sub.w	r8, r4, r8
 800916a:	4498      	add	r8, r3
 800916c:	f1b8 0f00 	cmp.w	r8, #0
 8009170:	f340 809a 	ble.w	80092a8 <_strtod_l+0x540>
 8009174:	f018 030f 	ands.w	r3, r8, #15
 8009178:	d00a      	beq.n	8009190 <_strtod_l+0x428>
 800917a:	4963      	ldr	r1, [pc, #396]	; (8009308 <_strtod_l+0x5a0>)
 800917c:	464a      	mov	r2, r9
 800917e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009182:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009186:	4653      	mov	r3, sl
 8009188:	f7f7 f9a6 	bl	80004d8 <__aeabi_dmul>
 800918c:	4681      	mov	r9, r0
 800918e:	468a      	mov	sl, r1
 8009190:	f038 080f 	bics.w	r8, r8, #15
 8009194:	d077      	beq.n	8009286 <_strtod_l+0x51e>
 8009196:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800919a:	dd4b      	ble.n	8009234 <_strtod_l+0x4cc>
 800919c:	f04f 0800 	mov.w	r8, #0
 80091a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80091a4:	f8cd 8020 	str.w	r8, [sp, #32]
 80091a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80091ac:	2322      	movs	r3, #34	; 0x22
 80091ae:	f04f 0900 	mov.w	r9, #0
 80091b2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8009310 <_strtod_l+0x5a8>
 80091b6:	f8cb 3000 	str.w	r3, [fp]
 80091ba:	9b08      	ldr	r3, [sp, #32]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f43f ae12 	beq.w	8008de6 <_strtod_l+0x7e>
 80091c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80091c4:	4658      	mov	r0, fp
 80091c6:	f002 f8e7 	bl	800b398 <_Bfree>
 80091ca:	9906      	ldr	r1, [sp, #24]
 80091cc:	4658      	mov	r0, fp
 80091ce:	f002 f8e3 	bl	800b398 <_Bfree>
 80091d2:	9904      	ldr	r1, [sp, #16]
 80091d4:	4658      	mov	r0, fp
 80091d6:	f002 f8df 	bl	800b398 <_Bfree>
 80091da:	9908      	ldr	r1, [sp, #32]
 80091dc:	4658      	mov	r0, fp
 80091de:	f002 f8db 	bl	800b398 <_Bfree>
 80091e2:	4641      	mov	r1, r8
 80091e4:	4658      	mov	r0, fp
 80091e6:	f002 f8d7 	bl	800b398 <_Bfree>
 80091ea:	e5fc      	b.n	8008de6 <_strtod_l+0x7e>
 80091ec:	9a07      	ldr	r2, [sp, #28]
 80091ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80091f2:	4293      	cmp	r3, r2
 80091f4:	dbb6      	blt.n	8009164 <_strtod_l+0x3fc>
 80091f6:	4d44      	ldr	r5, [pc, #272]	; (8009308 <_strtod_l+0x5a0>)
 80091f8:	f1c4 040f 	rsb	r4, r4, #15
 80091fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009200:	464a      	mov	r2, r9
 8009202:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009206:	4653      	mov	r3, sl
 8009208:	f7f7 f966 	bl	80004d8 <__aeabi_dmul>
 800920c:	9b07      	ldr	r3, [sp, #28]
 800920e:	1b1c      	subs	r4, r3, r4
 8009210:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009214:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009218:	e789      	b.n	800912e <_strtod_l+0x3c6>
 800921a:	f113 0f16 	cmn.w	r3, #22
 800921e:	dba1      	blt.n	8009164 <_strtod_l+0x3fc>
 8009220:	4a39      	ldr	r2, [pc, #228]	; (8009308 <_strtod_l+0x5a0>)
 8009222:	4648      	mov	r0, r9
 8009224:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009228:	e9d2 2300 	ldrd	r2, r3, [r2]
 800922c:	4651      	mov	r1, sl
 800922e:	f7f7 fa7d 	bl	800072c <__aeabi_ddiv>
 8009232:	e77e      	b.n	8009132 <_strtod_l+0x3ca>
 8009234:	2300      	movs	r3, #0
 8009236:	4648      	mov	r0, r9
 8009238:	4651      	mov	r1, sl
 800923a:	461d      	mov	r5, r3
 800923c:	4e33      	ldr	r6, [pc, #204]	; (800930c <_strtod_l+0x5a4>)
 800923e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009242:	f1b8 0f01 	cmp.w	r8, #1
 8009246:	dc21      	bgt.n	800928c <_strtod_l+0x524>
 8009248:	b10b      	cbz	r3, 800924e <_strtod_l+0x4e6>
 800924a:	4681      	mov	r9, r0
 800924c:	468a      	mov	sl, r1
 800924e:	4b2f      	ldr	r3, [pc, #188]	; (800930c <_strtod_l+0x5a4>)
 8009250:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8009254:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009258:	464a      	mov	r2, r9
 800925a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800925e:	4653      	mov	r3, sl
 8009260:	f7f7 f93a 	bl	80004d8 <__aeabi_dmul>
 8009264:	4b2a      	ldr	r3, [pc, #168]	; (8009310 <_strtod_l+0x5a8>)
 8009266:	460a      	mov	r2, r1
 8009268:	400b      	ands	r3, r1
 800926a:	492a      	ldr	r1, [pc, #168]	; (8009314 <_strtod_l+0x5ac>)
 800926c:	4681      	mov	r9, r0
 800926e:	428b      	cmp	r3, r1
 8009270:	d894      	bhi.n	800919c <_strtod_l+0x434>
 8009272:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009276:	428b      	cmp	r3, r1
 8009278:	bf86      	itte	hi
 800927a:	f04f 39ff 	movhi.w	r9, #4294967295
 800927e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800931c <_strtod_l+0x5b4>
 8009282:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8009286:	2300      	movs	r3, #0
 8009288:	9305      	str	r3, [sp, #20]
 800928a:	e07b      	b.n	8009384 <_strtod_l+0x61c>
 800928c:	f018 0f01 	tst.w	r8, #1
 8009290:	d006      	beq.n	80092a0 <_strtod_l+0x538>
 8009292:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f7f7 f91d 	bl	80004d8 <__aeabi_dmul>
 800929e:	2301      	movs	r3, #1
 80092a0:	3501      	adds	r5, #1
 80092a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80092a6:	e7cc      	b.n	8009242 <_strtod_l+0x4da>
 80092a8:	d0ed      	beq.n	8009286 <_strtod_l+0x51e>
 80092aa:	f1c8 0800 	rsb	r8, r8, #0
 80092ae:	f018 020f 	ands.w	r2, r8, #15
 80092b2:	d00a      	beq.n	80092ca <_strtod_l+0x562>
 80092b4:	4b14      	ldr	r3, [pc, #80]	; (8009308 <_strtod_l+0x5a0>)
 80092b6:	4648      	mov	r0, r9
 80092b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092bc:	4651      	mov	r1, sl
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	f7f7 fa33 	bl	800072c <__aeabi_ddiv>
 80092c6:	4681      	mov	r9, r0
 80092c8:	468a      	mov	sl, r1
 80092ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 80092ce:	d0da      	beq.n	8009286 <_strtod_l+0x51e>
 80092d0:	f1b8 0f1f 	cmp.w	r8, #31
 80092d4:	dd24      	ble.n	8009320 <_strtod_l+0x5b8>
 80092d6:	f04f 0800 	mov.w	r8, #0
 80092da:	f8cd 8010 	str.w	r8, [sp, #16]
 80092de:	f8cd 8020 	str.w	r8, [sp, #32]
 80092e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80092e6:	2322      	movs	r3, #34	; 0x22
 80092e8:	f04f 0900 	mov.w	r9, #0
 80092ec:	f04f 0a00 	mov.w	sl, #0
 80092f0:	f8cb 3000 	str.w	r3, [fp]
 80092f4:	e761      	b.n	80091ba <_strtod_l+0x452>
 80092f6:	bf00      	nop
 80092f8:	0800c621 	.word	0x0800c621
 80092fc:	0800c6ab 	.word	0x0800c6ab
 8009300:	0800c629 	.word	0x0800c629
 8009304:	0800c66c 	.word	0x0800c66c
 8009308:	0800c750 	.word	0x0800c750
 800930c:	0800c728 	.word	0x0800c728
 8009310:	7ff00000 	.word	0x7ff00000
 8009314:	7ca00000 	.word	0x7ca00000
 8009318:	fff80000 	.word	0xfff80000
 800931c:	7fefffff 	.word	0x7fefffff
 8009320:	f018 0310 	ands.w	r3, r8, #16
 8009324:	bf18      	it	ne
 8009326:	236a      	movne	r3, #106	; 0x6a
 8009328:	4648      	mov	r0, r9
 800932a:	9305      	str	r3, [sp, #20]
 800932c:	4651      	mov	r1, sl
 800932e:	2300      	movs	r3, #0
 8009330:	4da1      	ldr	r5, [pc, #644]	; (80095b8 <_strtod_l+0x850>)
 8009332:	f1b8 0f00 	cmp.w	r8, #0
 8009336:	f300 8113 	bgt.w	8009560 <_strtod_l+0x7f8>
 800933a:	b10b      	cbz	r3, 8009340 <_strtod_l+0x5d8>
 800933c:	4681      	mov	r9, r0
 800933e:	468a      	mov	sl, r1
 8009340:	9b05      	ldr	r3, [sp, #20]
 8009342:	b1bb      	cbz	r3, 8009374 <_strtod_l+0x60c>
 8009344:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8009348:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800934c:	2b00      	cmp	r3, #0
 800934e:	4651      	mov	r1, sl
 8009350:	dd10      	ble.n	8009374 <_strtod_l+0x60c>
 8009352:	2b1f      	cmp	r3, #31
 8009354:	f340 8110 	ble.w	8009578 <_strtod_l+0x810>
 8009358:	2b34      	cmp	r3, #52	; 0x34
 800935a:	bfd8      	it	le
 800935c:	f04f 32ff 	movle.w	r2, #4294967295
 8009360:	f04f 0900 	mov.w	r9, #0
 8009364:	bfcf      	iteee	gt
 8009366:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800936a:	3b20      	suble	r3, #32
 800936c:	fa02 f303 	lslle.w	r3, r2, r3
 8009370:	ea03 0a01 	andle.w	sl, r3, r1
 8009374:	2200      	movs	r2, #0
 8009376:	2300      	movs	r3, #0
 8009378:	4648      	mov	r0, r9
 800937a:	4651      	mov	r1, sl
 800937c:	f7f7 fb14 	bl	80009a8 <__aeabi_dcmpeq>
 8009380:	2800      	cmp	r0, #0
 8009382:	d1a8      	bne.n	80092d6 <_strtod_l+0x56e>
 8009384:	9b06      	ldr	r3, [sp, #24]
 8009386:	9a04      	ldr	r2, [sp, #16]
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	9908      	ldr	r1, [sp, #32]
 800938c:	4623      	mov	r3, r4
 800938e:	4658      	mov	r0, fp
 8009390:	f002 f854 	bl	800b43c <__s2b>
 8009394:	9008      	str	r0, [sp, #32]
 8009396:	2800      	cmp	r0, #0
 8009398:	f43f af00 	beq.w	800919c <_strtod_l+0x434>
 800939c:	9a07      	ldr	r2, [sp, #28]
 800939e:	9b07      	ldr	r3, [sp, #28]
 80093a0:	2a00      	cmp	r2, #0
 80093a2:	f1c3 0300 	rsb	r3, r3, #0
 80093a6:	bfa8      	it	ge
 80093a8:	2300      	movge	r3, #0
 80093aa:	f04f 0800 	mov.w	r8, #0
 80093ae:	930e      	str	r3, [sp, #56]	; 0x38
 80093b0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80093b4:	9316      	str	r3, [sp, #88]	; 0x58
 80093b6:	f8cd 8010 	str.w	r8, [sp, #16]
 80093ba:	9b08      	ldr	r3, [sp, #32]
 80093bc:	4658      	mov	r0, fp
 80093be:	6859      	ldr	r1, [r3, #4]
 80093c0:	f001 ffb6 	bl	800b330 <_Balloc>
 80093c4:	9006      	str	r0, [sp, #24]
 80093c6:	2800      	cmp	r0, #0
 80093c8:	f43f aef0 	beq.w	80091ac <_strtod_l+0x444>
 80093cc:	9b08      	ldr	r3, [sp, #32]
 80093ce:	300c      	adds	r0, #12
 80093d0:	691a      	ldr	r2, [r3, #16]
 80093d2:	f103 010c 	add.w	r1, r3, #12
 80093d6:	3202      	adds	r2, #2
 80093d8:	0092      	lsls	r2, r2, #2
 80093da:	f7fe fd2f 	bl	8007e3c <memcpy>
 80093de:	ab1e      	add	r3, sp, #120	; 0x78
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	ab1d      	add	r3, sp, #116	; 0x74
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	464a      	mov	r2, r9
 80093e8:	4653      	mov	r3, sl
 80093ea:	4658      	mov	r0, fp
 80093ec:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80093f0:	f002 fade 	bl	800b9b0 <__d2b>
 80093f4:	901c      	str	r0, [sp, #112]	; 0x70
 80093f6:	2800      	cmp	r0, #0
 80093f8:	f43f aed8 	beq.w	80091ac <_strtod_l+0x444>
 80093fc:	2101      	movs	r1, #1
 80093fe:	4658      	mov	r0, fp
 8009400:	f002 f8a8 	bl	800b554 <__i2b>
 8009404:	9004      	str	r0, [sp, #16]
 8009406:	4603      	mov	r3, r0
 8009408:	2800      	cmp	r0, #0
 800940a:	f43f aecf 	beq.w	80091ac <_strtod_l+0x444>
 800940e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009410:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009412:	2d00      	cmp	r5, #0
 8009414:	bfab      	itete	ge
 8009416:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009418:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800941a:	18ee      	addge	r6, r5, r3
 800941c:	1b5c      	sublt	r4, r3, r5
 800941e:	9b05      	ldr	r3, [sp, #20]
 8009420:	bfa8      	it	ge
 8009422:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009424:	eba5 0503 	sub.w	r5, r5, r3
 8009428:	4415      	add	r5, r2
 800942a:	4b64      	ldr	r3, [pc, #400]	; (80095bc <_strtod_l+0x854>)
 800942c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009430:	bfb8      	it	lt
 8009432:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009434:	429d      	cmp	r5, r3
 8009436:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800943a:	f280 80af 	bge.w	800959c <_strtod_l+0x834>
 800943e:	1b5b      	subs	r3, r3, r5
 8009440:	2b1f      	cmp	r3, #31
 8009442:	eba2 0203 	sub.w	r2, r2, r3
 8009446:	f04f 0701 	mov.w	r7, #1
 800944a:	f300 809c 	bgt.w	8009586 <_strtod_l+0x81e>
 800944e:	2500      	movs	r5, #0
 8009450:	fa07 f303 	lsl.w	r3, r7, r3
 8009454:	930f      	str	r3, [sp, #60]	; 0x3c
 8009456:	18b7      	adds	r7, r6, r2
 8009458:	9b05      	ldr	r3, [sp, #20]
 800945a:	42be      	cmp	r6, r7
 800945c:	4414      	add	r4, r2
 800945e:	441c      	add	r4, r3
 8009460:	4633      	mov	r3, r6
 8009462:	bfa8      	it	ge
 8009464:	463b      	movge	r3, r7
 8009466:	42a3      	cmp	r3, r4
 8009468:	bfa8      	it	ge
 800946a:	4623      	movge	r3, r4
 800946c:	2b00      	cmp	r3, #0
 800946e:	bfc2      	ittt	gt
 8009470:	1aff      	subgt	r7, r7, r3
 8009472:	1ae4      	subgt	r4, r4, r3
 8009474:	1af6      	subgt	r6, r6, r3
 8009476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009478:	b1bb      	cbz	r3, 80094aa <_strtod_l+0x742>
 800947a:	461a      	mov	r2, r3
 800947c:	9904      	ldr	r1, [sp, #16]
 800947e:	4658      	mov	r0, fp
 8009480:	f002 f906 	bl	800b690 <__pow5mult>
 8009484:	9004      	str	r0, [sp, #16]
 8009486:	2800      	cmp	r0, #0
 8009488:	f43f ae90 	beq.w	80091ac <_strtod_l+0x444>
 800948c:	4601      	mov	r1, r0
 800948e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009490:	4658      	mov	r0, fp
 8009492:	f002 f868 	bl	800b566 <__multiply>
 8009496:	9009      	str	r0, [sp, #36]	; 0x24
 8009498:	2800      	cmp	r0, #0
 800949a:	f43f ae87 	beq.w	80091ac <_strtod_l+0x444>
 800949e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80094a0:	4658      	mov	r0, fp
 80094a2:	f001 ff79 	bl	800b398 <_Bfree>
 80094a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a8:	931c      	str	r3, [sp, #112]	; 0x70
 80094aa:	2f00      	cmp	r7, #0
 80094ac:	dc7a      	bgt.n	80095a4 <_strtod_l+0x83c>
 80094ae:	9b07      	ldr	r3, [sp, #28]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	dd08      	ble.n	80094c6 <_strtod_l+0x75e>
 80094b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094b6:	9906      	ldr	r1, [sp, #24]
 80094b8:	4658      	mov	r0, fp
 80094ba:	f002 f8e9 	bl	800b690 <__pow5mult>
 80094be:	9006      	str	r0, [sp, #24]
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f43f ae73 	beq.w	80091ac <_strtod_l+0x444>
 80094c6:	2c00      	cmp	r4, #0
 80094c8:	dd08      	ble.n	80094dc <_strtod_l+0x774>
 80094ca:	4622      	mov	r2, r4
 80094cc:	9906      	ldr	r1, [sp, #24]
 80094ce:	4658      	mov	r0, fp
 80094d0:	f002 f92c 	bl	800b72c <__lshift>
 80094d4:	9006      	str	r0, [sp, #24]
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f43f ae68 	beq.w	80091ac <_strtod_l+0x444>
 80094dc:	2e00      	cmp	r6, #0
 80094de:	dd08      	ble.n	80094f2 <_strtod_l+0x78a>
 80094e0:	4632      	mov	r2, r6
 80094e2:	9904      	ldr	r1, [sp, #16]
 80094e4:	4658      	mov	r0, fp
 80094e6:	f002 f921 	bl	800b72c <__lshift>
 80094ea:	9004      	str	r0, [sp, #16]
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f43f ae5d 	beq.w	80091ac <_strtod_l+0x444>
 80094f2:	9a06      	ldr	r2, [sp, #24]
 80094f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80094f6:	4658      	mov	r0, fp
 80094f8:	f002 f986 	bl	800b808 <__mdiff>
 80094fc:	4680      	mov	r8, r0
 80094fe:	2800      	cmp	r0, #0
 8009500:	f43f ae54 	beq.w	80091ac <_strtod_l+0x444>
 8009504:	2400      	movs	r4, #0
 8009506:	68c3      	ldr	r3, [r0, #12]
 8009508:	9904      	ldr	r1, [sp, #16]
 800950a:	60c4      	str	r4, [r0, #12]
 800950c:	930c      	str	r3, [sp, #48]	; 0x30
 800950e:	f002 f961 	bl	800b7d4 <__mcmp>
 8009512:	42a0      	cmp	r0, r4
 8009514:	da54      	bge.n	80095c0 <_strtod_l+0x858>
 8009516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009518:	b9f3      	cbnz	r3, 8009558 <_strtod_l+0x7f0>
 800951a:	f1b9 0f00 	cmp.w	r9, #0
 800951e:	d11b      	bne.n	8009558 <_strtod_l+0x7f0>
 8009520:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8009524:	b9c3      	cbnz	r3, 8009558 <_strtod_l+0x7f0>
 8009526:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800952a:	0d1b      	lsrs	r3, r3, #20
 800952c:	051b      	lsls	r3, r3, #20
 800952e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009532:	d911      	bls.n	8009558 <_strtod_l+0x7f0>
 8009534:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009538:	b91b      	cbnz	r3, 8009542 <_strtod_l+0x7da>
 800953a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800953e:	2b01      	cmp	r3, #1
 8009540:	dd0a      	ble.n	8009558 <_strtod_l+0x7f0>
 8009542:	4641      	mov	r1, r8
 8009544:	2201      	movs	r2, #1
 8009546:	4658      	mov	r0, fp
 8009548:	f002 f8f0 	bl	800b72c <__lshift>
 800954c:	9904      	ldr	r1, [sp, #16]
 800954e:	4680      	mov	r8, r0
 8009550:	f002 f940 	bl	800b7d4 <__mcmp>
 8009554:	2800      	cmp	r0, #0
 8009556:	dc68      	bgt.n	800962a <_strtod_l+0x8c2>
 8009558:	9b05      	ldr	r3, [sp, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d172      	bne.n	8009644 <_strtod_l+0x8dc>
 800955e:	e630      	b.n	80091c2 <_strtod_l+0x45a>
 8009560:	f018 0f01 	tst.w	r8, #1
 8009564:	d004      	beq.n	8009570 <_strtod_l+0x808>
 8009566:	e9d5 2300 	ldrd	r2, r3, [r5]
 800956a:	f7f6 ffb5 	bl	80004d8 <__aeabi_dmul>
 800956e:	2301      	movs	r3, #1
 8009570:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009574:	3508      	adds	r5, #8
 8009576:	e6dc      	b.n	8009332 <_strtod_l+0x5ca>
 8009578:	f04f 32ff 	mov.w	r2, #4294967295
 800957c:	fa02 f303 	lsl.w	r3, r2, r3
 8009580:	ea03 0909 	and.w	r9, r3, r9
 8009584:	e6f6      	b.n	8009374 <_strtod_l+0x60c>
 8009586:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800958a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800958e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009592:	35e2      	adds	r5, #226	; 0xe2
 8009594:	fa07 f505 	lsl.w	r5, r7, r5
 8009598:	970f      	str	r7, [sp, #60]	; 0x3c
 800959a:	e75c      	b.n	8009456 <_strtod_l+0x6ee>
 800959c:	2301      	movs	r3, #1
 800959e:	2500      	movs	r5, #0
 80095a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80095a2:	e758      	b.n	8009456 <_strtod_l+0x6ee>
 80095a4:	463a      	mov	r2, r7
 80095a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80095a8:	4658      	mov	r0, fp
 80095aa:	f002 f8bf 	bl	800b72c <__lshift>
 80095ae:	901c      	str	r0, [sp, #112]	; 0x70
 80095b0:	2800      	cmp	r0, #0
 80095b2:	f47f af7c 	bne.w	80094ae <_strtod_l+0x746>
 80095b6:	e5f9      	b.n	80091ac <_strtod_l+0x444>
 80095b8:	0800c680 	.word	0x0800c680
 80095bc:	fffffc02 	.word	0xfffffc02
 80095c0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80095c4:	f040 8089 	bne.w	80096da <_strtod_l+0x972>
 80095c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095ca:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80095ce:	b342      	cbz	r2, 8009622 <_strtod_l+0x8ba>
 80095d0:	4aaf      	ldr	r2, [pc, #700]	; (8009890 <_strtod_l+0xb28>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d156      	bne.n	8009684 <_strtod_l+0x91c>
 80095d6:	9b05      	ldr	r3, [sp, #20]
 80095d8:	4648      	mov	r0, r9
 80095da:	b1eb      	cbz	r3, 8009618 <_strtod_l+0x8b0>
 80095dc:	4653      	mov	r3, sl
 80095de:	4aad      	ldr	r2, [pc, #692]	; (8009894 <_strtod_l+0xb2c>)
 80095e0:	f04f 31ff 	mov.w	r1, #4294967295
 80095e4:	401a      	ands	r2, r3
 80095e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80095ea:	d818      	bhi.n	800961e <_strtod_l+0x8b6>
 80095ec:	0d12      	lsrs	r2, r2, #20
 80095ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80095f2:	fa01 f303 	lsl.w	r3, r1, r3
 80095f6:	4298      	cmp	r0, r3
 80095f8:	d144      	bne.n	8009684 <_strtod_l+0x91c>
 80095fa:	4ba7      	ldr	r3, [pc, #668]	; (8009898 <_strtod_l+0xb30>)
 80095fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095fe:	429a      	cmp	r2, r3
 8009600:	d102      	bne.n	8009608 <_strtod_l+0x8a0>
 8009602:	3001      	adds	r0, #1
 8009604:	f43f add2 	beq.w	80091ac <_strtod_l+0x444>
 8009608:	4ba2      	ldr	r3, [pc, #648]	; (8009894 <_strtod_l+0xb2c>)
 800960a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800960c:	f04f 0900 	mov.w	r9, #0
 8009610:	401a      	ands	r2, r3
 8009612:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8009616:	e79f      	b.n	8009558 <_strtod_l+0x7f0>
 8009618:	f04f 33ff 	mov.w	r3, #4294967295
 800961c:	e7eb      	b.n	80095f6 <_strtod_l+0x88e>
 800961e:	460b      	mov	r3, r1
 8009620:	e7e9      	b.n	80095f6 <_strtod_l+0x88e>
 8009622:	bb7b      	cbnz	r3, 8009684 <_strtod_l+0x91c>
 8009624:	f1b9 0f00 	cmp.w	r9, #0
 8009628:	d12c      	bne.n	8009684 <_strtod_l+0x91c>
 800962a:	9905      	ldr	r1, [sp, #20]
 800962c:	4653      	mov	r3, sl
 800962e:	4a99      	ldr	r2, [pc, #612]	; (8009894 <_strtod_l+0xb2c>)
 8009630:	b1f1      	cbz	r1, 8009670 <_strtod_l+0x908>
 8009632:	ea02 010a 	and.w	r1, r2, sl
 8009636:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800963a:	dc19      	bgt.n	8009670 <_strtod_l+0x908>
 800963c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009640:	f77f ae51 	ble.w	80092e6 <_strtod_l+0x57e>
 8009644:	2300      	movs	r3, #0
 8009646:	4a95      	ldr	r2, [pc, #596]	; (800989c <_strtod_l+0xb34>)
 8009648:	4648      	mov	r0, r9
 800964a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800964e:	4651      	mov	r1, sl
 8009650:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009654:	f7f6 ff40 	bl	80004d8 <__aeabi_dmul>
 8009658:	4681      	mov	r9, r0
 800965a:	468a      	mov	sl, r1
 800965c:	2900      	cmp	r1, #0
 800965e:	f47f adb0 	bne.w	80091c2 <_strtod_l+0x45a>
 8009662:	2800      	cmp	r0, #0
 8009664:	f47f adad 	bne.w	80091c2 <_strtod_l+0x45a>
 8009668:	2322      	movs	r3, #34	; 0x22
 800966a:	f8cb 3000 	str.w	r3, [fp]
 800966e:	e5a8      	b.n	80091c2 <_strtod_l+0x45a>
 8009670:	4013      	ands	r3, r2
 8009672:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009676:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800967a:	f04f 39ff 	mov.w	r9, #4294967295
 800967e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8009682:	e769      	b.n	8009558 <_strtod_l+0x7f0>
 8009684:	b19d      	cbz	r5, 80096ae <_strtod_l+0x946>
 8009686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009688:	421d      	tst	r5, r3
 800968a:	f43f af65 	beq.w	8009558 <_strtod_l+0x7f0>
 800968e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009690:	9a05      	ldr	r2, [sp, #20]
 8009692:	4648      	mov	r0, r9
 8009694:	4651      	mov	r1, sl
 8009696:	b173      	cbz	r3, 80096b6 <_strtod_l+0x94e>
 8009698:	f7ff fb44 	bl	8008d24 <sulp>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096a4:	f7f6 fd62 	bl	800016c <__adddf3>
 80096a8:	4681      	mov	r9, r0
 80096aa:	468a      	mov	sl, r1
 80096ac:	e754      	b.n	8009558 <_strtod_l+0x7f0>
 80096ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096b0:	ea13 0f09 	tst.w	r3, r9
 80096b4:	e7e9      	b.n	800968a <_strtod_l+0x922>
 80096b6:	f7ff fb35 	bl	8008d24 <sulp>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096c2:	f7f6 fd51 	bl	8000168 <__aeabi_dsub>
 80096c6:	2200      	movs	r2, #0
 80096c8:	2300      	movs	r3, #0
 80096ca:	4681      	mov	r9, r0
 80096cc:	468a      	mov	sl, r1
 80096ce:	f7f7 f96b 	bl	80009a8 <__aeabi_dcmpeq>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	f47f ae07 	bne.w	80092e6 <_strtod_l+0x57e>
 80096d8:	e73e      	b.n	8009558 <_strtod_l+0x7f0>
 80096da:	9904      	ldr	r1, [sp, #16]
 80096dc:	4640      	mov	r0, r8
 80096de:	f002 f9b6 	bl	800ba4e <__ratio>
 80096e2:	2200      	movs	r2, #0
 80096e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096e8:	4606      	mov	r6, r0
 80096ea:	460f      	mov	r7, r1
 80096ec:	f7f7 f970 	bl	80009d0 <__aeabi_dcmple>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d075      	beq.n	80097e0 <_strtod_l+0xa78>
 80096f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d047      	beq.n	800978a <_strtod_l+0xa22>
 80096fa:	2600      	movs	r6, #0
 80096fc:	4f68      	ldr	r7, [pc, #416]	; (80098a0 <_strtod_l+0xb38>)
 80096fe:	4d68      	ldr	r5, [pc, #416]	; (80098a0 <_strtod_l+0xb38>)
 8009700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009706:	0d1b      	lsrs	r3, r3, #20
 8009708:	051b      	lsls	r3, r3, #20
 800970a:	930f      	str	r3, [sp, #60]	; 0x3c
 800970c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800970e:	4b65      	ldr	r3, [pc, #404]	; (80098a4 <_strtod_l+0xb3c>)
 8009710:	429a      	cmp	r2, r3
 8009712:	f040 80cf 	bne.w	80098b4 <_strtod_l+0xb4c>
 8009716:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800971a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800971e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009720:	4648      	mov	r0, r9
 8009722:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8009726:	4651      	mov	r1, sl
 8009728:	f002 f8cc 	bl	800b8c4 <__ulp>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4630      	mov	r0, r6
 8009732:	4639      	mov	r1, r7
 8009734:	f7f6 fed0 	bl	80004d8 <__aeabi_dmul>
 8009738:	464a      	mov	r2, r9
 800973a:	4653      	mov	r3, sl
 800973c:	f7f6 fd16 	bl	800016c <__adddf3>
 8009740:	460b      	mov	r3, r1
 8009742:	4954      	ldr	r1, [pc, #336]	; (8009894 <_strtod_l+0xb2c>)
 8009744:	4a58      	ldr	r2, [pc, #352]	; (80098a8 <_strtod_l+0xb40>)
 8009746:	4019      	ands	r1, r3
 8009748:	4291      	cmp	r1, r2
 800974a:	4681      	mov	r9, r0
 800974c:	d95e      	bls.n	800980c <_strtod_l+0xaa4>
 800974e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009750:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009754:	4293      	cmp	r3, r2
 8009756:	d103      	bne.n	8009760 <_strtod_l+0x9f8>
 8009758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800975a:	3301      	adds	r3, #1
 800975c:	f43f ad26 	beq.w	80091ac <_strtod_l+0x444>
 8009760:	f04f 39ff 	mov.w	r9, #4294967295
 8009764:	f8df a130 	ldr.w	sl, [pc, #304]	; 8009898 <_strtod_l+0xb30>
 8009768:	991c      	ldr	r1, [sp, #112]	; 0x70
 800976a:	4658      	mov	r0, fp
 800976c:	f001 fe14 	bl	800b398 <_Bfree>
 8009770:	9906      	ldr	r1, [sp, #24]
 8009772:	4658      	mov	r0, fp
 8009774:	f001 fe10 	bl	800b398 <_Bfree>
 8009778:	9904      	ldr	r1, [sp, #16]
 800977a:	4658      	mov	r0, fp
 800977c:	f001 fe0c 	bl	800b398 <_Bfree>
 8009780:	4641      	mov	r1, r8
 8009782:	4658      	mov	r0, fp
 8009784:	f001 fe08 	bl	800b398 <_Bfree>
 8009788:	e617      	b.n	80093ba <_strtod_l+0x652>
 800978a:	f1b9 0f00 	cmp.w	r9, #0
 800978e:	d119      	bne.n	80097c4 <_strtod_l+0xa5c>
 8009790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009792:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009796:	b9e3      	cbnz	r3, 80097d2 <_strtod_l+0xa6a>
 8009798:	2200      	movs	r2, #0
 800979a:	4b41      	ldr	r3, [pc, #260]	; (80098a0 <_strtod_l+0xb38>)
 800979c:	4630      	mov	r0, r6
 800979e:	4639      	mov	r1, r7
 80097a0:	f7f7 f90c 	bl	80009bc <__aeabi_dcmplt>
 80097a4:	b9c8      	cbnz	r0, 80097da <_strtod_l+0xa72>
 80097a6:	2200      	movs	r2, #0
 80097a8:	4b40      	ldr	r3, [pc, #256]	; (80098ac <_strtod_l+0xb44>)
 80097aa:	4630      	mov	r0, r6
 80097ac:	4639      	mov	r1, r7
 80097ae:	f7f6 fe93 	bl	80004d8 <__aeabi_dmul>
 80097b2:	4604      	mov	r4, r0
 80097b4:	460d      	mov	r5, r1
 80097b6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80097ba:	9418      	str	r4, [sp, #96]	; 0x60
 80097bc:	9319      	str	r3, [sp, #100]	; 0x64
 80097be:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80097c2:	e79d      	b.n	8009700 <_strtod_l+0x998>
 80097c4:	f1b9 0f01 	cmp.w	r9, #1
 80097c8:	d103      	bne.n	80097d2 <_strtod_l+0xa6a>
 80097ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f43f ad8a 	beq.w	80092e6 <_strtod_l+0x57e>
 80097d2:	2600      	movs	r6, #0
 80097d4:	4f36      	ldr	r7, [pc, #216]	; (80098b0 <_strtod_l+0xb48>)
 80097d6:	2400      	movs	r4, #0
 80097d8:	e791      	b.n	80096fe <_strtod_l+0x996>
 80097da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80097dc:	4d33      	ldr	r5, [pc, #204]	; (80098ac <_strtod_l+0xb44>)
 80097de:	e7ea      	b.n	80097b6 <_strtod_l+0xa4e>
 80097e0:	4b32      	ldr	r3, [pc, #200]	; (80098ac <_strtod_l+0xb44>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	4630      	mov	r0, r6
 80097e6:	4639      	mov	r1, r7
 80097e8:	f7f6 fe76 	bl	80004d8 <__aeabi_dmul>
 80097ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097ee:	4604      	mov	r4, r0
 80097f0:	460d      	mov	r5, r1
 80097f2:	b933      	cbnz	r3, 8009802 <_strtod_l+0xa9a>
 80097f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097f8:	9010      	str	r0, [sp, #64]	; 0x40
 80097fa:	9311      	str	r3, [sp, #68]	; 0x44
 80097fc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009800:	e77e      	b.n	8009700 <_strtod_l+0x998>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800980a:	e7f7      	b.n	80097fc <_strtod_l+0xa94>
 800980c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8009810:	9b05      	ldr	r3, [sp, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1a8      	bne.n	8009768 <_strtod_l+0xa00>
 8009816:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800981a:	0d1b      	lsrs	r3, r3, #20
 800981c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800981e:	051b      	lsls	r3, r3, #20
 8009820:	429a      	cmp	r2, r3
 8009822:	4656      	mov	r6, sl
 8009824:	d1a0      	bne.n	8009768 <_strtod_l+0xa00>
 8009826:	4629      	mov	r1, r5
 8009828:	4620      	mov	r0, r4
 800982a:	f7f7 f905 	bl	8000a38 <__aeabi_d2iz>
 800982e:	f7f6 fde9 	bl	8000404 <__aeabi_i2d>
 8009832:	460b      	mov	r3, r1
 8009834:	4602      	mov	r2, r0
 8009836:	4629      	mov	r1, r5
 8009838:	4620      	mov	r0, r4
 800983a:	f7f6 fc95 	bl	8000168 <__aeabi_dsub>
 800983e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009840:	4604      	mov	r4, r0
 8009842:	460d      	mov	r5, r1
 8009844:	b933      	cbnz	r3, 8009854 <_strtod_l+0xaec>
 8009846:	f1b9 0f00 	cmp.w	r9, #0
 800984a:	d103      	bne.n	8009854 <_strtod_l+0xaec>
 800984c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8009850:	2e00      	cmp	r6, #0
 8009852:	d06a      	beq.n	800992a <_strtod_l+0xbc2>
 8009854:	a30a      	add	r3, pc, #40	; (adr r3, 8009880 <_strtod_l+0xb18>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	f7f7 f8ad 	bl	80009bc <__aeabi_dcmplt>
 8009862:	2800      	cmp	r0, #0
 8009864:	f47f acad 	bne.w	80091c2 <_strtod_l+0x45a>
 8009868:	a307      	add	r3, pc, #28	; (adr r3, 8009888 <_strtod_l+0xb20>)
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	4620      	mov	r0, r4
 8009870:	4629      	mov	r1, r5
 8009872:	f7f7 f8c1 	bl	80009f8 <__aeabi_dcmpgt>
 8009876:	2800      	cmp	r0, #0
 8009878:	f43f af76 	beq.w	8009768 <_strtod_l+0xa00>
 800987c:	e4a1      	b.n	80091c2 <_strtod_l+0x45a>
 800987e:	bf00      	nop
 8009880:	94a03595 	.word	0x94a03595
 8009884:	3fdfffff 	.word	0x3fdfffff
 8009888:	35afe535 	.word	0x35afe535
 800988c:	3fe00000 	.word	0x3fe00000
 8009890:	000fffff 	.word	0x000fffff
 8009894:	7ff00000 	.word	0x7ff00000
 8009898:	7fefffff 	.word	0x7fefffff
 800989c:	39500000 	.word	0x39500000
 80098a0:	3ff00000 	.word	0x3ff00000
 80098a4:	7fe00000 	.word	0x7fe00000
 80098a8:	7c9fffff 	.word	0x7c9fffff
 80098ac:	3fe00000 	.word	0x3fe00000
 80098b0:	bff00000 	.word	0xbff00000
 80098b4:	9b05      	ldr	r3, [sp, #20]
 80098b6:	b313      	cbz	r3, 80098fe <_strtod_l+0xb96>
 80098b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098be:	d81e      	bhi.n	80098fe <_strtod_l+0xb96>
 80098c0:	a325      	add	r3, pc, #148	; (adr r3, 8009958 <_strtod_l+0xbf0>)
 80098c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c6:	4620      	mov	r0, r4
 80098c8:	4629      	mov	r1, r5
 80098ca:	f7f7 f881 	bl	80009d0 <__aeabi_dcmple>
 80098ce:	b190      	cbz	r0, 80098f6 <_strtod_l+0xb8e>
 80098d0:	4629      	mov	r1, r5
 80098d2:	4620      	mov	r0, r4
 80098d4:	f7f7 f8d8 	bl	8000a88 <__aeabi_d2uiz>
 80098d8:	2800      	cmp	r0, #0
 80098da:	bf08      	it	eq
 80098dc:	2001      	moveq	r0, #1
 80098de:	f7f6 fd81 	bl	80003e4 <__aeabi_ui2d>
 80098e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098e4:	4604      	mov	r4, r0
 80098e6:	460d      	mov	r5, r1
 80098e8:	b9d3      	cbnz	r3, 8009920 <_strtod_l+0xbb8>
 80098ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098ee:	9012      	str	r0, [sp, #72]	; 0x48
 80098f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80098f2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80098f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098f8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80098fc:	1a9f      	subs	r7, r3, r2
 80098fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009902:	f001 ffdf 	bl	800b8c4 <__ulp>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4630      	mov	r0, r6
 800990c:	4639      	mov	r1, r7
 800990e:	f7f6 fde3 	bl	80004d8 <__aeabi_dmul>
 8009912:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009916:	f7f6 fc29 	bl	800016c <__adddf3>
 800991a:	4681      	mov	r9, r0
 800991c:	468a      	mov	sl, r1
 800991e:	e777      	b.n	8009810 <_strtod_l+0xaa8>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009928:	e7e3      	b.n	80098f2 <_strtod_l+0xb8a>
 800992a:	a30d      	add	r3, pc, #52	; (adr r3, 8009960 <_strtod_l+0xbf8>)
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	f7f7 f844 	bl	80009bc <__aeabi_dcmplt>
 8009934:	e79f      	b.n	8009876 <_strtod_l+0xb0e>
 8009936:	2300      	movs	r3, #0
 8009938:	930d      	str	r3, [sp, #52]	; 0x34
 800993a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800993c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	f7ff ba55 	b.w	8008dee <_strtod_l+0x86>
 8009944:	2b65      	cmp	r3, #101	; 0x65
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	f43f ab42 	beq.w	8008fd2 <_strtod_l+0x26a>
 800994e:	2101      	movs	r1, #1
 8009950:	4614      	mov	r4, r2
 8009952:	9105      	str	r1, [sp, #20]
 8009954:	f7ff babf 	b.w	8008ed6 <_strtod_l+0x16e>
 8009958:	ffc00000 	.word	0xffc00000
 800995c:	41dfffff 	.word	0x41dfffff
 8009960:	94a03595 	.word	0x94a03595
 8009964:	3fcfffff 	.word	0x3fcfffff

08009968 <_strtod_r>:
 8009968:	4b05      	ldr	r3, [pc, #20]	; (8009980 <_strtod_r+0x18>)
 800996a:	b410      	push	{r4}
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4c05      	ldr	r4, [pc, #20]	; (8009984 <_strtod_r+0x1c>)
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	2b00      	cmp	r3, #0
 8009974:	bf08      	it	eq
 8009976:	4623      	moveq	r3, r4
 8009978:	bc10      	pop	{r4}
 800997a:	f7ff b9f5 	b.w	8008d68 <_strtod_l>
 800997e:	bf00      	nop
 8009980:	200004bc 	.word	0x200004bc
 8009984:	20000520 	.word	0x20000520

08009988 <_strtol_l.isra.0>:
 8009988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800998c:	4680      	mov	r8, r0
 800998e:	4689      	mov	r9, r1
 8009990:	4692      	mov	sl, r2
 8009992:	461e      	mov	r6, r3
 8009994:	460f      	mov	r7, r1
 8009996:	463d      	mov	r5, r7
 8009998:	9808      	ldr	r0, [sp, #32]
 800999a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800999e:	f001 fc25 	bl	800b1ec <__locale_ctype_ptr_l>
 80099a2:	4420      	add	r0, r4
 80099a4:	7843      	ldrb	r3, [r0, #1]
 80099a6:	f013 0308 	ands.w	r3, r3, #8
 80099aa:	d132      	bne.n	8009a12 <_strtol_l.isra.0+0x8a>
 80099ac:	2c2d      	cmp	r4, #45	; 0x2d
 80099ae:	d132      	bne.n	8009a16 <_strtol_l.isra.0+0x8e>
 80099b0:	2201      	movs	r2, #1
 80099b2:	787c      	ldrb	r4, [r7, #1]
 80099b4:	1cbd      	adds	r5, r7, #2
 80099b6:	2e00      	cmp	r6, #0
 80099b8:	d05d      	beq.n	8009a76 <_strtol_l.isra.0+0xee>
 80099ba:	2e10      	cmp	r6, #16
 80099bc:	d109      	bne.n	80099d2 <_strtol_l.isra.0+0x4a>
 80099be:	2c30      	cmp	r4, #48	; 0x30
 80099c0:	d107      	bne.n	80099d2 <_strtol_l.isra.0+0x4a>
 80099c2:	782b      	ldrb	r3, [r5, #0]
 80099c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099c8:	2b58      	cmp	r3, #88	; 0x58
 80099ca:	d14f      	bne.n	8009a6c <_strtol_l.isra.0+0xe4>
 80099cc:	2610      	movs	r6, #16
 80099ce:	786c      	ldrb	r4, [r5, #1]
 80099d0:	3502      	adds	r5, #2
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	bf14      	ite	ne
 80099d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80099da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80099de:	2700      	movs	r7, #0
 80099e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80099e4:	4638      	mov	r0, r7
 80099e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80099ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80099ee:	2b09      	cmp	r3, #9
 80099f0:	d817      	bhi.n	8009a22 <_strtol_l.isra.0+0x9a>
 80099f2:	461c      	mov	r4, r3
 80099f4:	42a6      	cmp	r6, r4
 80099f6:	dd23      	ble.n	8009a40 <_strtol_l.isra.0+0xb8>
 80099f8:	1c7b      	adds	r3, r7, #1
 80099fa:	d007      	beq.n	8009a0c <_strtol_l.isra.0+0x84>
 80099fc:	4584      	cmp	ip, r0
 80099fe:	d31c      	bcc.n	8009a3a <_strtol_l.isra.0+0xb2>
 8009a00:	d101      	bne.n	8009a06 <_strtol_l.isra.0+0x7e>
 8009a02:	45a6      	cmp	lr, r4
 8009a04:	db19      	blt.n	8009a3a <_strtol_l.isra.0+0xb2>
 8009a06:	2701      	movs	r7, #1
 8009a08:	fb00 4006 	mla	r0, r0, r6, r4
 8009a0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a10:	e7eb      	b.n	80099ea <_strtol_l.isra.0+0x62>
 8009a12:	462f      	mov	r7, r5
 8009a14:	e7bf      	b.n	8009996 <_strtol_l.isra.0+0xe>
 8009a16:	2c2b      	cmp	r4, #43	; 0x2b
 8009a18:	bf04      	itt	eq
 8009a1a:	1cbd      	addeq	r5, r7, #2
 8009a1c:	787c      	ldrbeq	r4, [r7, #1]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	e7c9      	b.n	80099b6 <_strtol_l.isra.0+0x2e>
 8009a22:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009a26:	2b19      	cmp	r3, #25
 8009a28:	d801      	bhi.n	8009a2e <_strtol_l.isra.0+0xa6>
 8009a2a:	3c37      	subs	r4, #55	; 0x37
 8009a2c:	e7e2      	b.n	80099f4 <_strtol_l.isra.0+0x6c>
 8009a2e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009a32:	2b19      	cmp	r3, #25
 8009a34:	d804      	bhi.n	8009a40 <_strtol_l.isra.0+0xb8>
 8009a36:	3c57      	subs	r4, #87	; 0x57
 8009a38:	e7dc      	b.n	80099f4 <_strtol_l.isra.0+0x6c>
 8009a3a:	f04f 37ff 	mov.w	r7, #4294967295
 8009a3e:	e7e5      	b.n	8009a0c <_strtol_l.isra.0+0x84>
 8009a40:	1c7b      	adds	r3, r7, #1
 8009a42:	d108      	bne.n	8009a56 <_strtol_l.isra.0+0xce>
 8009a44:	2322      	movs	r3, #34	; 0x22
 8009a46:	4608      	mov	r0, r1
 8009a48:	f8c8 3000 	str.w	r3, [r8]
 8009a4c:	f1ba 0f00 	cmp.w	sl, #0
 8009a50:	d107      	bne.n	8009a62 <_strtol_l.isra.0+0xda>
 8009a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a56:	b102      	cbz	r2, 8009a5a <_strtol_l.isra.0+0xd2>
 8009a58:	4240      	negs	r0, r0
 8009a5a:	f1ba 0f00 	cmp.w	sl, #0
 8009a5e:	d0f8      	beq.n	8009a52 <_strtol_l.isra.0+0xca>
 8009a60:	b10f      	cbz	r7, 8009a66 <_strtol_l.isra.0+0xde>
 8009a62:	f105 39ff 	add.w	r9, r5, #4294967295
 8009a66:	f8ca 9000 	str.w	r9, [sl]
 8009a6a:	e7f2      	b.n	8009a52 <_strtol_l.isra.0+0xca>
 8009a6c:	2430      	movs	r4, #48	; 0x30
 8009a6e:	2e00      	cmp	r6, #0
 8009a70:	d1af      	bne.n	80099d2 <_strtol_l.isra.0+0x4a>
 8009a72:	2608      	movs	r6, #8
 8009a74:	e7ad      	b.n	80099d2 <_strtol_l.isra.0+0x4a>
 8009a76:	2c30      	cmp	r4, #48	; 0x30
 8009a78:	d0a3      	beq.n	80099c2 <_strtol_l.isra.0+0x3a>
 8009a7a:	260a      	movs	r6, #10
 8009a7c:	e7a9      	b.n	80099d2 <_strtol_l.isra.0+0x4a>
	...

08009a80 <_strtol_r>:
 8009a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a82:	4c06      	ldr	r4, [pc, #24]	; (8009a9c <_strtol_r+0x1c>)
 8009a84:	4d06      	ldr	r5, [pc, #24]	; (8009aa0 <_strtol_r+0x20>)
 8009a86:	6824      	ldr	r4, [r4, #0]
 8009a88:	6a24      	ldr	r4, [r4, #32]
 8009a8a:	2c00      	cmp	r4, #0
 8009a8c:	bf08      	it	eq
 8009a8e:	462c      	moveq	r4, r5
 8009a90:	9400      	str	r4, [sp, #0]
 8009a92:	f7ff ff79 	bl	8009988 <_strtol_l.isra.0>
 8009a96:	b003      	add	sp, #12
 8009a98:	bd30      	pop	{r4, r5, pc}
 8009a9a:	bf00      	nop
 8009a9c:	200004bc 	.word	0x200004bc
 8009aa0:	20000520 	.word	0x20000520

08009aa4 <__swbuf_r>:
 8009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa6:	460e      	mov	r6, r1
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	4605      	mov	r5, r0
 8009aac:	b118      	cbz	r0, 8009ab6 <__swbuf_r+0x12>
 8009aae:	6983      	ldr	r3, [r0, #24]
 8009ab0:	b90b      	cbnz	r3, 8009ab6 <__swbuf_r+0x12>
 8009ab2:	f000 ffe9 	bl	800aa88 <__sinit>
 8009ab6:	4b21      	ldr	r3, [pc, #132]	; (8009b3c <__swbuf_r+0x98>)
 8009ab8:	429c      	cmp	r4, r3
 8009aba:	d12a      	bne.n	8009b12 <__swbuf_r+0x6e>
 8009abc:	686c      	ldr	r4, [r5, #4]
 8009abe:	69a3      	ldr	r3, [r4, #24]
 8009ac0:	60a3      	str	r3, [r4, #8]
 8009ac2:	89a3      	ldrh	r3, [r4, #12]
 8009ac4:	071a      	lsls	r2, r3, #28
 8009ac6:	d52e      	bpl.n	8009b26 <__swbuf_r+0x82>
 8009ac8:	6923      	ldr	r3, [r4, #16]
 8009aca:	b363      	cbz	r3, 8009b26 <__swbuf_r+0x82>
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	6820      	ldr	r0, [r4, #0]
 8009ad0:	b2f6      	uxtb	r6, r6
 8009ad2:	1ac0      	subs	r0, r0, r3
 8009ad4:	6963      	ldr	r3, [r4, #20]
 8009ad6:	4637      	mov	r7, r6
 8009ad8:	4283      	cmp	r3, r0
 8009ada:	dc04      	bgt.n	8009ae6 <__swbuf_r+0x42>
 8009adc:	4621      	mov	r1, r4
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f000 ff68 	bl	800a9b4 <_fflush_r>
 8009ae4:	bb28      	cbnz	r0, 8009b32 <__swbuf_r+0x8e>
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	3001      	adds	r0, #1
 8009aea:	3b01      	subs	r3, #1
 8009aec:	60a3      	str	r3, [r4, #8]
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	6022      	str	r2, [r4, #0]
 8009af4:	701e      	strb	r6, [r3, #0]
 8009af6:	6963      	ldr	r3, [r4, #20]
 8009af8:	4283      	cmp	r3, r0
 8009afa:	d004      	beq.n	8009b06 <__swbuf_r+0x62>
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	07db      	lsls	r3, r3, #31
 8009b00:	d519      	bpl.n	8009b36 <__swbuf_r+0x92>
 8009b02:	2e0a      	cmp	r6, #10
 8009b04:	d117      	bne.n	8009b36 <__swbuf_r+0x92>
 8009b06:	4621      	mov	r1, r4
 8009b08:	4628      	mov	r0, r5
 8009b0a:	f000 ff53 	bl	800a9b4 <_fflush_r>
 8009b0e:	b190      	cbz	r0, 8009b36 <__swbuf_r+0x92>
 8009b10:	e00f      	b.n	8009b32 <__swbuf_r+0x8e>
 8009b12:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <__swbuf_r+0x9c>)
 8009b14:	429c      	cmp	r4, r3
 8009b16:	d101      	bne.n	8009b1c <__swbuf_r+0x78>
 8009b18:	68ac      	ldr	r4, [r5, #8]
 8009b1a:	e7d0      	b.n	8009abe <__swbuf_r+0x1a>
 8009b1c:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <__swbuf_r+0xa0>)
 8009b1e:	429c      	cmp	r4, r3
 8009b20:	bf08      	it	eq
 8009b22:	68ec      	ldreq	r4, [r5, #12]
 8009b24:	e7cb      	b.n	8009abe <__swbuf_r+0x1a>
 8009b26:	4621      	mov	r1, r4
 8009b28:	4628      	mov	r0, r5
 8009b2a:	f000 f80d 	bl	8009b48 <__swsetup_r>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d0cc      	beq.n	8009acc <__swbuf_r+0x28>
 8009b32:	f04f 37ff 	mov.w	r7, #4294967295
 8009b36:	4638      	mov	r0, r7
 8009b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	0800c6d8 	.word	0x0800c6d8
 8009b40:	0800c6f8 	.word	0x0800c6f8
 8009b44:	0800c6b8 	.word	0x0800c6b8

08009b48 <__swsetup_r>:
 8009b48:	4b32      	ldr	r3, [pc, #200]	; (8009c14 <__swsetup_r+0xcc>)
 8009b4a:	b570      	push	{r4, r5, r6, lr}
 8009b4c:	681d      	ldr	r5, [r3, #0]
 8009b4e:	4606      	mov	r6, r0
 8009b50:	460c      	mov	r4, r1
 8009b52:	b125      	cbz	r5, 8009b5e <__swsetup_r+0x16>
 8009b54:	69ab      	ldr	r3, [r5, #24]
 8009b56:	b913      	cbnz	r3, 8009b5e <__swsetup_r+0x16>
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f000 ff95 	bl	800aa88 <__sinit>
 8009b5e:	4b2e      	ldr	r3, [pc, #184]	; (8009c18 <__swsetup_r+0xd0>)
 8009b60:	429c      	cmp	r4, r3
 8009b62:	d10f      	bne.n	8009b84 <__swsetup_r+0x3c>
 8009b64:	686c      	ldr	r4, [r5, #4]
 8009b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	0715      	lsls	r5, r2, #28
 8009b6e:	d42c      	bmi.n	8009bca <__swsetup_r+0x82>
 8009b70:	06d0      	lsls	r0, r2, #27
 8009b72:	d411      	bmi.n	8009b98 <__swsetup_r+0x50>
 8009b74:	2209      	movs	r2, #9
 8009b76:	6032      	str	r2, [r6, #0]
 8009b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b7c:	81a3      	strh	r3, [r4, #12]
 8009b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b82:	e03e      	b.n	8009c02 <__swsetup_r+0xba>
 8009b84:	4b25      	ldr	r3, [pc, #148]	; (8009c1c <__swsetup_r+0xd4>)
 8009b86:	429c      	cmp	r4, r3
 8009b88:	d101      	bne.n	8009b8e <__swsetup_r+0x46>
 8009b8a:	68ac      	ldr	r4, [r5, #8]
 8009b8c:	e7eb      	b.n	8009b66 <__swsetup_r+0x1e>
 8009b8e:	4b24      	ldr	r3, [pc, #144]	; (8009c20 <__swsetup_r+0xd8>)
 8009b90:	429c      	cmp	r4, r3
 8009b92:	bf08      	it	eq
 8009b94:	68ec      	ldreq	r4, [r5, #12]
 8009b96:	e7e6      	b.n	8009b66 <__swsetup_r+0x1e>
 8009b98:	0751      	lsls	r1, r2, #29
 8009b9a:	d512      	bpl.n	8009bc2 <__swsetup_r+0x7a>
 8009b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b9e:	b141      	cbz	r1, 8009bb2 <__swsetup_r+0x6a>
 8009ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ba4:	4299      	cmp	r1, r3
 8009ba6:	d002      	beq.n	8009bae <__swsetup_r+0x66>
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f001 ffb9 	bl	800bb20 <_free_r>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bb8:	81a3      	strh	r3, [r4, #12]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	6063      	str	r3, [r4, #4]
 8009bbe:	6923      	ldr	r3, [r4, #16]
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	f043 0308 	orr.w	r3, r3, #8
 8009bc8:	81a3      	strh	r3, [r4, #12]
 8009bca:	6923      	ldr	r3, [r4, #16]
 8009bcc:	b94b      	cbnz	r3, 8009be2 <__swsetup_r+0x9a>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bd8:	d003      	beq.n	8009be2 <__swsetup_r+0x9a>
 8009bda:	4621      	mov	r1, r4
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f001 fb3d 	bl	800b25c <__smakebuf_r>
 8009be2:	89a2      	ldrh	r2, [r4, #12]
 8009be4:	f012 0301 	ands.w	r3, r2, #1
 8009be8:	d00c      	beq.n	8009c04 <__swsetup_r+0xbc>
 8009bea:	2300      	movs	r3, #0
 8009bec:	60a3      	str	r3, [r4, #8]
 8009bee:	6963      	ldr	r3, [r4, #20]
 8009bf0:	425b      	negs	r3, r3
 8009bf2:	61a3      	str	r3, [r4, #24]
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	b953      	cbnz	r3, 8009c0e <__swsetup_r+0xc6>
 8009bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bfc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009c00:	d1ba      	bne.n	8009b78 <__swsetup_r+0x30>
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	0792      	lsls	r2, r2, #30
 8009c06:	bf58      	it	pl
 8009c08:	6963      	ldrpl	r3, [r4, #20]
 8009c0a:	60a3      	str	r3, [r4, #8]
 8009c0c:	e7f2      	b.n	8009bf4 <__swsetup_r+0xac>
 8009c0e:	2000      	movs	r0, #0
 8009c10:	e7f7      	b.n	8009c02 <__swsetup_r+0xba>
 8009c12:	bf00      	nop
 8009c14:	200004bc 	.word	0x200004bc
 8009c18:	0800c6d8 	.word	0x0800c6d8
 8009c1c:	0800c6f8 	.word	0x0800c6f8
 8009c20:	0800c6b8 	.word	0x0800c6b8

08009c24 <quorem>:
 8009c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	6903      	ldr	r3, [r0, #16]
 8009c2a:	690c      	ldr	r4, [r1, #16]
 8009c2c:	4680      	mov	r8, r0
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	f2c0 8084 	blt.w	8009d3c <quorem+0x118>
 8009c34:	3c01      	subs	r4, #1
 8009c36:	f101 0714 	add.w	r7, r1, #20
 8009c3a:	f100 0614 	add.w	r6, r0, #20
 8009c3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009c42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009c46:	3501      	adds	r5, #1
 8009c48:	fbb0 f5f5 	udiv	r5, r0, r5
 8009c4c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009c50:	eb06 030c 	add.w	r3, r6, ip
 8009c54:	eb07 090c 	add.w	r9, r7, ip
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	b39d      	cbz	r5, 8009cc4 <quorem+0xa0>
 8009c5c:	f04f 0a00 	mov.w	sl, #0
 8009c60:	4638      	mov	r0, r7
 8009c62:	46b6      	mov	lr, r6
 8009c64:	46d3      	mov	fp, sl
 8009c66:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c6a:	b293      	uxth	r3, r2
 8009c6c:	fb05 a303 	mla	r3, r5, r3, sl
 8009c70:	0c12      	lsrs	r2, r2, #16
 8009c72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c76:	fb05 a202 	mla	r2, r5, r2, sl
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	ebab 0303 	sub.w	r3, fp, r3
 8009c80:	f8de b000 	ldr.w	fp, [lr]
 8009c84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009c88:	fa1f fb8b 	uxth.w	fp, fp
 8009c8c:	445b      	add	r3, fp
 8009c8e:	fa1f fb82 	uxth.w	fp, r2
 8009c92:	f8de 2000 	ldr.w	r2, [lr]
 8009c96:	4581      	cmp	r9, r0
 8009c98:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009c9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ca6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009caa:	f84e 3b04 	str.w	r3, [lr], #4
 8009cae:	d2da      	bcs.n	8009c66 <quorem+0x42>
 8009cb0:	f856 300c 	ldr.w	r3, [r6, ip]
 8009cb4:	b933      	cbnz	r3, 8009cc4 <quorem+0xa0>
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	3b04      	subs	r3, #4
 8009cba:	429e      	cmp	r6, r3
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	d331      	bcc.n	8009d24 <quorem+0x100>
 8009cc0:	f8c8 4010 	str.w	r4, [r8, #16]
 8009cc4:	4640      	mov	r0, r8
 8009cc6:	f001 fd85 	bl	800b7d4 <__mcmp>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	db26      	blt.n	8009d1c <quorem+0xf8>
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f04f 0c00 	mov.w	ip, #0
 8009cd4:	3501      	adds	r5, #1
 8009cd6:	f857 1b04 	ldr.w	r1, [r7], #4
 8009cda:	f8d0 e000 	ldr.w	lr, [r0]
 8009cde:	b28b      	uxth	r3, r1
 8009ce0:	ebac 0303 	sub.w	r3, ip, r3
 8009ce4:	fa1f f28e 	uxth.w	r2, lr
 8009ce8:	4413      	add	r3, r2
 8009cea:	0c0a      	lsrs	r2, r1, #16
 8009cec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009cf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cfa:	45b9      	cmp	r9, r7
 8009cfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d00:	f840 3b04 	str.w	r3, [r0], #4
 8009d04:	d2e7      	bcs.n	8009cd6 <quorem+0xb2>
 8009d06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009d0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009d0e:	b92a      	cbnz	r2, 8009d1c <quorem+0xf8>
 8009d10:	3b04      	subs	r3, #4
 8009d12:	429e      	cmp	r6, r3
 8009d14:	461a      	mov	r2, r3
 8009d16:	d30b      	bcc.n	8009d30 <quorem+0x10c>
 8009d18:	f8c8 4010 	str.w	r4, [r8, #16]
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	b003      	add	sp, #12
 8009d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d24:	6812      	ldr	r2, [r2, #0]
 8009d26:	3b04      	subs	r3, #4
 8009d28:	2a00      	cmp	r2, #0
 8009d2a:	d1c9      	bne.n	8009cc0 <quorem+0x9c>
 8009d2c:	3c01      	subs	r4, #1
 8009d2e:	e7c4      	b.n	8009cba <quorem+0x96>
 8009d30:	6812      	ldr	r2, [r2, #0]
 8009d32:	3b04      	subs	r3, #4
 8009d34:	2a00      	cmp	r2, #0
 8009d36:	d1ef      	bne.n	8009d18 <quorem+0xf4>
 8009d38:	3c01      	subs	r4, #1
 8009d3a:	e7ea      	b.n	8009d12 <quorem+0xee>
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	e7ee      	b.n	8009d1e <quorem+0xfa>

08009d40 <_dtoa_r>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	4616      	mov	r6, r2
 8009d46:	461f      	mov	r7, r3
 8009d48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d4a:	b095      	sub	sp, #84	; 0x54
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8009d52:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009d56:	b93d      	cbnz	r5, 8009d68 <_dtoa_r+0x28>
 8009d58:	2010      	movs	r0, #16
 8009d5a:	f001 fabf 	bl	800b2dc <malloc>
 8009d5e:	6260      	str	r0, [r4, #36]	; 0x24
 8009d60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d64:	6005      	str	r5, [r0, #0]
 8009d66:	60c5      	str	r5, [r0, #12]
 8009d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d6a:	6819      	ldr	r1, [r3, #0]
 8009d6c:	b151      	cbz	r1, 8009d84 <_dtoa_r+0x44>
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	2301      	movs	r3, #1
 8009d72:	4093      	lsls	r3, r2
 8009d74:	604a      	str	r2, [r1, #4]
 8009d76:	608b      	str	r3, [r1, #8]
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f001 fb0d 	bl	800b398 <_Bfree>
 8009d7e:	2200      	movs	r2, #0
 8009d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	1e3b      	subs	r3, r7, #0
 8009d86:	bfaf      	iteee	ge
 8009d88:	2300      	movge	r3, #0
 8009d8a:	2201      	movlt	r2, #1
 8009d8c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d90:	9303      	strlt	r3, [sp, #12]
 8009d92:	bfac      	ite	ge
 8009d94:	f8c8 3000 	strge.w	r3, [r8]
 8009d98:	f8c8 2000 	strlt.w	r2, [r8]
 8009d9c:	4bae      	ldr	r3, [pc, #696]	; (800a058 <_dtoa_r+0x318>)
 8009d9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009da2:	ea33 0308 	bics.w	r3, r3, r8
 8009da6:	d11b      	bne.n	8009de0 <_dtoa_r+0xa0>
 8009da8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009dac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009dae:	6013      	str	r3, [r2, #0]
 8009db0:	9b02      	ldr	r3, [sp, #8]
 8009db2:	b923      	cbnz	r3, 8009dbe <_dtoa_r+0x7e>
 8009db4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009db8:	2800      	cmp	r0, #0
 8009dba:	f000 8545 	beq.w	800a848 <_dtoa_r+0xb08>
 8009dbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009dc0:	b953      	cbnz	r3, 8009dd8 <_dtoa_r+0x98>
 8009dc2:	4ba6      	ldr	r3, [pc, #664]	; (800a05c <_dtoa_r+0x31c>)
 8009dc4:	e021      	b.n	8009e0a <_dtoa_r+0xca>
 8009dc6:	4ba6      	ldr	r3, [pc, #664]	; (800a060 <_dtoa_r+0x320>)
 8009dc8:	9306      	str	r3, [sp, #24]
 8009dca:	3308      	adds	r3, #8
 8009dcc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	9806      	ldr	r0, [sp, #24]
 8009dd2:	b015      	add	sp, #84	; 0x54
 8009dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd8:	4ba0      	ldr	r3, [pc, #640]	; (800a05c <_dtoa_r+0x31c>)
 8009dda:	9306      	str	r3, [sp, #24]
 8009ddc:	3303      	adds	r3, #3
 8009dde:	e7f5      	b.n	8009dcc <_dtoa_r+0x8c>
 8009de0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009de4:	2200      	movs	r2, #0
 8009de6:	2300      	movs	r3, #0
 8009de8:	4630      	mov	r0, r6
 8009dea:	4639      	mov	r1, r7
 8009dec:	f7f6 fddc 	bl	80009a8 <__aeabi_dcmpeq>
 8009df0:	4682      	mov	sl, r0
 8009df2:	b160      	cbz	r0, 8009e0e <_dtoa_r+0xce>
 8009df4:	2301      	movs	r3, #1
 8009df6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 8520 	beq.w	800a842 <_dtoa_r+0xb02>
 8009e02:	4b98      	ldr	r3, [pc, #608]	; (800a064 <_dtoa_r+0x324>)
 8009e04:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	9306      	str	r3, [sp, #24]
 8009e0c:	e7e0      	b.n	8009dd0 <_dtoa_r+0x90>
 8009e0e:	ab12      	add	r3, sp, #72	; 0x48
 8009e10:	9301      	str	r3, [sp, #4]
 8009e12:	ab13      	add	r3, sp, #76	; 0x4c
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	4632      	mov	r2, r6
 8009e18:	463b      	mov	r3, r7
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f001 fdc8 	bl	800b9b0 <__d2b>
 8009e20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009e24:	4683      	mov	fp, r0
 8009e26:	2d00      	cmp	r5, #0
 8009e28:	d07d      	beq.n	8009f26 <_dtoa_r+0x1e6>
 8009e2a:	46b0      	mov	r8, r6
 8009e2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e30:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009e34:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009e38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e3c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009e40:	2200      	movs	r2, #0
 8009e42:	4b89      	ldr	r3, [pc, #548]	; (800a068 <_dtoa_r+0x328>)
 8009e44:	4640      	mov	r0, r8
 8009e46:	4649      	mov	r1, r9
 8009e48:	f7f6 f98e 	bl	8000168 <__aeabi_dsub>
 8009e4c:	a37c      	add	r3, pc, #496	; (adr r3, 800a040 <_dtoa_r+0x300>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	f7f6 fb41 	bl	80004d8 <__aeabi_dmul>
 8009e56:	a37c      	add	r3, pc, #496	; (adr r3, 800a048 <_dtoa_r+0x308>)
 8009e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5c:	f7f6 f986 	bl	800016c <__adddf3>
 8009e60:	4606      	mov	r6, r0
 8009e62:	4628      	mov	r0, r5
 8009e64:	460f      	mov	r7, r1
 8009e66:	f7f6 facd 	bl	8000404 <__aeabi_i2d>
 8009e6a:	a379      	add	r3, pc, #484	; (adr r3, 800a050 <_dtoa_r+0x310>)
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	f7f6 fb32 	bl	80004d8 <__aeabi_dmul>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	4630      	mov	r0, r6
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f6 f976 	bl	800016c <__adddf3>
 8009e80:	4606      	mov	r6, r0
 8009e82:	460f      	mov	r7, r1
 8009e84:	f7f6 fdd8 	bl	8000a38 <__aeabi_d2iz>
 8009e88:	2200      	movs	r2, #0
 8009e8a:	4682      	mov	sl, r0
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	4630      	mov	r0, r6
 8009e90:	4639      	mov	r1, r7
 8009e92:	f7f6 fd93 	bl	80009bc <__aeabi_dcmplt>
 8009e96:	b148      	cbz	r0, 8009eac <_dtoa_r+0x16c>
 8009e98:	4650      	mov	r0, sl
 8009e9a:	f7f6 fab3 	bl	8000404 <__aeabi_i2d>
 8009e9e:	4632      	mov	r2, r6
 8009ea0:	463b      	mov	r3, r7
 8009ea2:	f7f6 fd81 	bl	80009a8 <__aeabi_dcmpeq>
 8009ea6:	b908      	cbnz	r0, 8009eac <_dtoa_r+0x16c>
 8009ea8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009eac:	f1ba 0f16 	cmp.w	sl, #22
 8009eb0:	d85a      	bhi.n	8009f68 <_dtoa_r+0x228>
 8009eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eb6:	496d      	ldr	r1, [pc, #436]	; (800a06c <_dtoa_r+0x32c>)
 8009eb8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ec0:	f7f6 fd9a 	bl	80009f8 <__aeabi_dcmpgt>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d051      	beq.n	8009f6c <_dtoa_r+0x22c>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ece:	930d      	str	r3, [sp, #52]	; 0x34
 8009ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ed2:	1b5d      	subs	r5, r3, r5
 8009ed4:	1e6b      	subs	r3, r5, #1
 8009ed6:	9307      	str	r3, [sp, #28]
 8009ed8:	bf43      	ittte	mi
 8009eda:	2300      	movmi	r3, #0
 8009edc:	f1c5 0901 	rsbmi	r9, r5, #1
 8009ee0:	9307      	strmi	r3, [sp, #28]
 8009ee2:	f04f 0900 	movpl.w	r9, #0
 8009ee6:	f1ba 0f00 	cmp.w	sl, #0
 8009eea:	db41      	blt.n	8009f70 <_dtoa_r+0x230>
 8009eec:	9b07      	ldr	r3, [sp, #28]
 8009eee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009ef2:	4453      	add	r3, sl
 8009ef4:	9307      	str	r3, [sp, #28]
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	9308      	str	r3, [sp, #32]
 8009efa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009efc:	2b09      	cmp	r3, #9
 8009efe:	f200 808f 	bhi.w	800a020 <_dtoa_r+0x2e0>
 8009f02:	2b05      	cmp	r3, #5
 8009f04:	bfc4      	itt	gt
 8009f06:	3b04      	subgt	r3, #4
 8009f08:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009f0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009f0c:	bfc8      	it	gt
 8009f0e:	2500      	movgt	r5, #0
 8009f10:	f1a3 0302 	sub.w	r3, r3, #2
 8009f14:	bfd8      	it	le
 8009f16:	2501      	movle	r5, #1
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	f200 808d 	bhi.w	800a038 <_dtoa_r+0x2f8>
 8009f1e:	e8df f003 	tbb	[pc, r3]
 8009f22:	7d7b      	.short	0x7d7b
 8009f24:	6f2f      	.short	0x6f2f
 8009f26:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009f2a:	441d      	add	r5, r3
 8009f2c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009f30:	2820      	cmp	r0, #32
 8009f32:	dd13      	ble.n	8009f5c <_dtoa_r+0x21c>
 8009f34:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009f38:	9b02      	ldr	r3, [sp, #8]
 8009f3a:	fa08 f800 	lsl.w	r8, r8, r0
 8009f3e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009f42:	fa23 f000 	lsr.w	r0, r3, r0
 8009f46:	ea48 0000 	orr.w	r0, r8, r0
 8009f4a:	f7f6 fa4b 	bl	80003e4 <__aeabi_ui2d>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4680      	mov	r8, r0
 8009f52:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009f56:	3d01      	subs	r5, #1
 8009f58:	9310      	str	r3, [sp, #64]	; 0x40
 8009f5a:	e771      	b.n	8009e40 <_dtoa_r+0x100>
 8009f5c:	9b02      	ldr	r3, [sp, #8]
 8009f5e:	f1c0 0020 	rsb	r0, r0, #32
 8009f62:	fa03 f000 	lsl.w	r0, r3, r0
 8009f66:	e7f0      	b.n	8009f4a <_dtoa_r+0x20a>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e7b0      	b.n	8009ece <_dtoa_r+0x18e>
 8009f6c:	900d      	str	r0, [sp, #52]	; 0x34
 8009f6e:	e7af      	b.n	8009ed0 <_dtoa_r+0x190>
 8009f70:	f1ca 0300 	rsb	r3, sl, #0
 8009f74:	9308      	str	r3, [sp, #32]
 8009f76:	2300      	movs	r3, #0
 8009f78:	eba9 090a 	sub.w	r9, r9, sl
 8009f7c:	930c      	str	r3, [sp, #48]	; 0x30
 8009f7e:	e7bc      	b.n	8009efa <_dtoa_r+0x1ba>
 8009f80:	2301      	movs	r3, #1
 8009f82:	9309      	str	r3, [sp, #36]	; 0x24
 8009f84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dd74      	ble.n	800a074 <_dtoa_r+0x334>
 8009f8a:	4698      	mov	r8, r3
 8009f8c:	9304      	str	r3, [sp, #16]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f92:	6072      	str	r2, [r6, #4]
 8009f94:	2204      	movs	r2, #4
 8009f96:	f102 0014 	add.w	r0, r2, #20
 8009f9a:	4298      	cmp	r0, r3
 8009f9c:	6871      	ldr	r1, [r6, #4]
 8009f9e:	d96e      	bls.n	800a07e <_dtoa_r+0x33e>
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f001 f9c5 	bl	800b330 <_Balloc>
 8009fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fa8:	6030      	str	r0, [r6, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f1b8 0f0e 	cmp.w	r8, #14
 8009fb0:	9306      	str	r3, [sp, #24]
 8009fb2:	f200 80ed 	bhi.w	800a190 <_dtoa_r+0x450>
 8009fb6:	2d00      	cmp	r5, #0
 8009fb8:	f000 80ea 	beq.w	800a190 <_dtoa_r+0x450>
 8009fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fc0:	f1ba 0f00 	cmp.w	sl, #0
 8009fc4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009fc8:	dd77      	ble.n	800a0ba <_dtoa_r+0x37a>
 8009fca:	4a28      	ldr	r2, [pc, #160]	; (800a06c <_dtoa_r+0x32c>)
 8009fcc:	f00a 030f 	and.w	r3, sl, #15
 8009fd0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009fd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009fd8:	06f0      	lsls	r0, r6, #27
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009fe2:	d568      	bpl.n	800a0b6 <_dtoa_r+0x376>
 8009fe4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009fe8:	4b21      	ldr	r3, [pc, #132]	; (800a070 <_dtoa_r+0x330>)
 8009fea:	2503      	movs	r5, #3
 8009fec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ff0:	f7f6 fb9c 	bl	800072c <__aeabi_ddiv>
 8009ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ff8:	f006 060f 	and.w	r6, r6, #15
 8009ffc:	4f1c      	ldr	r7, [pc, #112]	; (800a070 <_dtoa_r+0x330>)
 8009ffe:	e04f      	b.n	800a0a0 <_dtoa_r+0x360>
 800a000:	2301      	movs	r3, #1
 800a002:	9309      	str	r3, [sp, #36]	; 0x24
 800a004:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a006:	4453      	add	r3, sl
 800a008:	f103 0801 	add.w	r8, r3, #1
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	4643      	mov	r3, r8
 800a010:	2b01      	cmp	r3, #1
 800a012:	bfb8      	it	lt
 800a014:	2301      	movlt	r3, #1
 800a016:	e7ba      	b.n	8009f8e <_dtoa_r+0x24e>
 800a018:	2300      	movs	r3, #0
 800a01a:	e7b2      	b.n	8009f82 <_dtoa_r+0x242>
 800a01c:	2300      	movs	r3, #0
 800a01e:	e7f0      	b.n	800a002 <_dtoa_r+0x2c2>
 800a020:	2501      	movs	r5, #1
 800a022:	2300      	movs	r3, #0
 800a024:	9509      	str	r5, [sp, #36]	; 0x24
 800a026:	931e      	str	r3, [sp, #120]	; 0x78
 800a028:	f04f 33ff 	mov.w	r3, #4294967295
 800a02c:	2200      	movs	r2, #0
 800a02e:	9304      	str	r3, [sp, #16]
 800a030:	4698      	mov	r8, r3
 800a032:	2312      	movs	r3, #18
 800a034:	921f      	str	r2, [sp, #124]	; 0x7c
 800a036:	e7aa      	b.n	8009f8e <_dtoa_r+0x24e>
 800a038:	2301      	movs	r3, #1
 800a03a:	9309      	str	r3, [sp, #36]	; 0x24
 800a03c:	e7f4      	b.n	800a028 <_dtoa_r+0x2e8>
 800a03e:	bf00      	nop
 800a040:	636f4361 	.word	0x636f4361
 800a044:	3fd287a7 	.word	0x3fd287a7
 800a048:	8b60c8b3 	.word	0x8b60c8b3
 800a04c:	3fc68a28 	.word	0x3fc68a28
 800a050:	509f79fb 	.word	0x509f79fb
 800a054:	3fd34413 	.word	0x3fd34413
 800a058:	7ff00000 	.word	0x7ff00000
 800a05c:	0800c6b1 	.word	0x0800c6b1
 800a060:	0800c6a8 	.word	0x0800c6a8
 800a064:	0800c62d 	.word	0x0800c62d
 800a068:	3ff80000 	.word	0x3ff80000
 800a06c:	0800c750 	.word	0x0800c750
 800a070:	0800c728 	.word	0x0800c728
 800a074:	2301      	movs	r3, #1
 800a076:	9304      	str	r3, [sp, #16]
 800a078:	4698      	mov	r8, r3
 800a07a:	461a      	mov	r2, r3
 800a07c:	e7da      	b.n	800a034 <_dtoa_r+0x2f4>
 800a07e:	3101      	adds	r1, #1
 800a080:	6071      	str	r1, [r6, #4]
 800a082:	0052      	lsls	r2, r2, #1
 800a084:	e787      	b.n	8009f96 <_dtoa_r+0x256>
 800a086:	07f1      	lsls	r1, r6, #31
 800a088:	d508      	bpl.n	800a09c <_dtoa_r+0x35c>
 800a08a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a08e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a092:	f7f6 fa21 	bl	80004d8 <__aeabi_dmul>
 800a096:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a09a:	3501      	adds	r5, #1
 800a09c:	1076      	asrs	r6, r6, #1
 800a09e:	3708      	adds	r7, #8
 800a0a0:	2e00      	cmp	r6, #0
 800a0a2:	d1f0      	bne.n	800a086 <_dtoa_r+0x346>
 800a0a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ac:	f7f6 fb3e 	bl	800072c <__aeabi_ddiv>
 800a0b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0b4:	e01b      	b.n	800a0ee <_dtoa_r+0x3ae>
 800a0b6:	2502      	movs	r5, #2
 800a0b8:	e7a0      	b.n	8009ffc <_dtoa_r+0x2bc>
 800a0ba:	f000 80a4 	beq.w	800a206 <_dtoa_r+0x4c6>
 800a0be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a0c2:	f1ca 0600 	rsb	r6, sl, #0
 800a0c6:	4ba0      	ldr	r3, [pc, #640]	; (800a348 <_dtoa_r+0x608>)
 800a0c8:	f006 020f 	and.w	r2, r6, #15
 800a0cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 fa00 	bl	80004d8 <__aeabi_dmul>
 800a0d8:	2502      	movs	r5, #2
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0e0:	4f9a      	ldr	r7, [pc, #616]	; (800a34c <_dtoa_r+0x60c>)
 800a0e2:	1136      	asrs	r6, r6, #4
 800a0e4:	2e00      	cmp	r6, #0
 800a0e6:	f040 8083 	bne.w	800a1f0 <_dtoa_r+0x4b0>
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1e0      	bne.n	800a0b0 <_dtoa_r+0x370>
 800a0ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 808a 	beq.w	800a20a <_dtoa_r+0x4ca>
 800a0f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a0fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a102:	2200      	movs	r2, #0
 800a104:	4b92      	ldr	r3, [pc, #584]	; (800a350 <_dtoa_r+0x610>)
 800a106:	f7f6 fc59 	bl	80009bc <__aeabi_dcmplt>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d07d      	beq.n	800a20a <_dtoa_r+0x4ca>
 800a10e:	f1b8 0f00 	cmp.w	r8, #0
 800a112:	d07a      	beq.n	800a20a <_dtoa_r+0x4ca>
 800a114:	9b04      	ldr	r3, [sp, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	dd36      	ble.n	800a188 <_dtoa_r+0x448>
 800a11a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a11e:	2200      	movs	r2, #0
 800a120:	4b8c      	ldr	r3, [pc, #560]	; (800a354 <_dtoa_r+0x614>)
 800a122:	f7f6 f9d9 	bl	80004d8 <__aeabi_dmul>
 800a126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a12a:	9e04      	ldr	r6, [sp, #16]
 800a12c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800a130:	3501      	adds	r5, #1
 800a132:	4628      	mov	r0, r5
 800a134:	f7f6 f966 	bl	8000404 <__aeabi_i2d>
 800a138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a13c:	f7f6 f9cc 	bl	80004d8 <__aeabi_dmul>
 800a140:	2200      	movs	r2, #0
 800a142:	4b85      	ldr	r3, [pc, #532]	; (800a358 <_dtoa_r+0x618>)
 800a144:	f7f6 f812 	bl	800016c <__adddf3>
 800a148:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800a14c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a150:	950b      	str	r5, [sp, #44]	; 0x2c
 800a152:	2e00      	cmp	r6, #0
 800a154:	d15c      	bne.n	800a210 <_dtoa_r+0x4d0>
 800a156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a15a:	2200      	movs	r2, #0
 800a15c:	4b7f      	ldr	r3, [pc, #508]	; (800a35c <_dtoa_r+0x61c>)
 800a15e:	f7f6 f803 	bl	8000168 <__aeabi_dsub>
 800a162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a164:	462b      	mov	r3, r5
 800a166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a16a:	f7f6 fc45 	bl	80009f8 <__aeabi_dcmpgt>
 800a16e:	2800      	cmp	r0, #0
 800a170:	f040 8281 	bne.w	800a676 <_dtoa_r+0x936>
 800a174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a17a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a17e:	f7f6 fc1d 	bl	80009bc <__aeabi_dcmplt>
 800a182:	2800      	cmp	r0, #0
 800a184:	f040 8275 	bne.w	800a672 <_dtoa_r+0x932>
 800a188:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a18c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a192:	2b00      	cmp	r3, #0
 800a194:	f2c0 814b 	blt.w	800a42e <_dtoa_r+0x6ee>
 800a198:	f1ba 0f0e 	cmp.w	sl, #14
 800a19c:	f300 8147 	bgt.w	800a42e <_dtoa_r+0x6ee>
 800a1a0:	4b69      	ldr	r3, [pc, #420]	; (800a348 <_dtoa_r+0x608>)
 800a1a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f280 80d7 	bge.w	800a364 <_dtoa_r+0x624>
 800a1b6:	f1b8 0f00 	cmp.w	r8, #0
 800a1ba:	f300 80d3 	bgt.w	800a364 <_dtoa_r+0x624>
 800a1be:	f040 8257 	bne.w	800a670 <_dtoa_r+0x930>
 800a1c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	4b64      	ldr	r3, [pc, #400]	; (800a35c <_dtoa_r+0x61c>)
 800a1ca:	f7f6 f985 	bl	80004d8 <__aeabi_dmul>
 800a1ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1d2:	f7f6 fc07 	bl	80009e4 <__aeabi_dcmpge>
 800a1d6:	4646      	mov	r6, r8
 800a1d8:	4647      	mov	r7, r8
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	f040 822d 	bne.w	800a63a <_dtoa_r+0x8fa>
 800a1e0:	9b06      	ldr	r3, [sp, #24]
 800a1e2:	9a06      	ldr	r2, [sp, #24]
 800a1e4:	1c5d      	adds	r5, r3, #1
 800a1e6:	2331      	movs	r3, #49	; 0x31
 800a1e8:	f10a 0a01 	add.w	sl, sl, #1
 800a1ec:	7013      	strb	r3, [r2, #0]
 800a1ee:	e228      	b.n	800a642 <_dtoa_r+0x902>
 800a1f0:	07f2      	lsls	r2, r6, #31
 800a1f2:	d505      	bpl.n	800a200 <_dtoa_r+0x4c0>
 800a1f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1f8:	f7f6 f96e 	bl	80004d8 <__aeabi_dmul>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	3501      	adds	r5, #1
 800a200:	1076      	asrs	r6, r6, #1
 800a202:	3708      	adds	r7, #8
 800a204:	e76e      	b.n	800a0e4 <_dtoa_r+0x3a4>
 800a206:	2502      	movs	r5, #2
 800a208:	e771      	b.n	800a0ee <_dtoa_r+0x3ae>
 800a20a:	4657      	mov	r7, sl
 800a20c:	4646      	mov	r6, r8
 800a20e:	e790      	b.n	800a132 <_dtoa_r+0x3f2>
 800a210:	4b4d      	ldr	r3, [pc, #308]	; (800a348 <_dtoa_r+0x608>)
 800a212:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a216:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d048      	beq.n	800a2b2 <_dtoa_r+0x572>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	2000      	movs	r0, #0
 800a226:	494e      	ldr	r1, [pc, #312]	; (800a360 <_dtoa_r+0x620>)
 800a228:	f7f6 fa80 	bl	800072c <__aeabi_ddiv>
 800a22c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a230:	f7f5 ff9a 	bl	8000168 <__aeabi_dsub>
 800a234:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a238:	9d06      	ldr	r5, [sp, #24]
 800a23a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a23e:	f7f6 fbfb 	bl	8000a38 <__aeabi_d2iz>
 800a242:	9011      	str	r0, [sp, #68]	; 0x44
 800a244:	f7f6 f8de 	bl	8000404 <__aeabi_i2d>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a250:	f7f5 ff8a 	bl	8000168 <__aeabi_dsub>
 800a254:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a25a:	3330      	adds	r3, #48	; 0x30
 800a25c:	f805 3b01 	strb.w	r3, [r5], #1
 800a260:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a264:	f7f6 fbaa 	bl	80009bc <__aeabi_dcmplt>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d163      	bne.n	800a334 <_dtoa_r+0x5f4>
 800a26c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a270:	2000      	movs	r0, #0
 800a272:	4937      	ldr	r1, [pc, #220]	; (800a350 <_dtoa_r+0x610>)
 800a274:	f7f5 ff78 	bl	8000168 <__aeabi_dsub>
 800a278:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a27c:	f7f6 fb9e 	bl	80009bc <__aeabi_dcmplt>
 800a280:	2800      	cmp	r0, #0
 800a282:	f040 80b5 	bne.w	800a3f0 <_dtoa_r+0x6b0>
 800a286:	9b06      	ldr	r3, [sp, #24]
 800a288:	1aeb      	subs	r3, r5, r3
 800a28a:	429e      	cmp	r6, r3
 800a28c:	f77f af7c 	ble.w	800a188 <_dtoa_r+0x448>
 800a290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a294:	2200      	movs	r2, #0
 800a296:	4b2f      	ldr	r3, [pc, #188]	; (800a354 <_dtoa_r+0x614>)
 800a298:	f7f6 f91e 	bl	80004d8 <__aeabi_dmul>
 800a29c:	2200      	movs	r2, #0
 800a29e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a2a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2a6:	4b2b      	ldr	r3, [pc, #172]	; (800a354 <_dtoa_r+0x614>)
 800a2a8:	f7f6 f916 	bl	80004d8 <__aeabi_dmul>
 800a2ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2b0:	e7c3      	b.n	800a23a <_dtoa_r+0x4fa>
 800a2b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a2b6:	f7f6 f90f 	bl	80004d8 <__aeabi_dmul>
 800a2ba:	9b06      	ldr	r3, [sp, #24]
 800a2bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a2c0:	199d      	adds	r5, r3, r6
 800a2c2:	461e      	mov	r6, r3
 800a2c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c8:	f7f6 fbb6 	bl	8000a38 <__aeabi_d2iz>
 800a2cc:	9011      	str	r0, [sp, #68]	; 0x44
 800a2ce:	f7f6 f899 	bl	8000404 <__aeabi_i2d>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2da:	f7f5 ff45 	bl	8000168 <__aeabi_dsub>
 800a2de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2e4:	3330      	adds	r3, #48	; 0x30
 800a2e6:	f806 3b01 	strb.w	r3, [r6], #1
 800a2ea:	42ae      	cmp	r6, r5
 800a2ec:	f04f 0200 	mov.w	r2, #0
 800a2f0:	d124      	bne.n	800a33c <_dtoa_r+0x5fc>
 800a2f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2f6:	4b1a      	ldr	r3, [pc, #104]	; (800a360 <_dtoa_r+0x620>)
 800a2f8:	f7f5 ff38 	bl	800016c <__adddf3>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a304:	f7f6 fb78 	bl	80009f8 <__aeabi_dcmpgt>
 800a308:	2800      	cmp	r0, #0
 800a30a:	d171      	bne.n	800a3f0 <_dtoa_r+0x6b0>
 800a30c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a310:	2000      	movs	r0, #0
 800a312:	4913      	ldr	r1, [pc, #76]	; (800a360 <_dtoa_r+0x620>)
 800a314:	f7f5 ff28 	bl	8000168 <__aeabi_dsub>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a320:	f7f6 fb4c 	bl	80009bc <__aeabi_dcmplt>
 800a324:	2800      	cmp	r0, #0
 800a326:	f43f af2f 	beq.w	800a188 <_dtoa_r+0x448>
 800a32a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a32e:	1e6a      	subs	r2, r5, #1
 800a330:	2b30      	cmp	r3, #48	; 0x30
 800a332:	d001      	beq.n	800a338 <_dtoa_r+0x5f8>
 800a334:	46ba      	mov	sl, r7
 800a336:	e04a      	b.n	800a3ce <_dtoa_r+0x68e>
 800a338:	4615      	mov	r5, r2
 800a33a:	e7f6      	b.n	800a32a <_dtoa_r+0x5ea>
 800a33c:	4b05      	ldr	r3, [pc, #20]	; (800a354 <_dtoa_r+0x614>)
 800a33e:	f7f6 f8cb 	bl	80004d8 <__aeabi_dmul>
 800a342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a346:	e7bd      	b.n	800a2c4 <_dtoa_r+0x584>
 800a348:	0800c750 	.word	0x0800c750
 800a34c:	0800c728 	.word	0x0800c728
 800a350:	3ff00000 	.word	0x3ff00000
 800a354:	40240000 	.word	0x40240000
 800a358:	401c0000 	.word	0x401c0000
 800a35c:	40140000 	.word	0x40140000
 800a360:	3fe00000 	.word	0x3fe00000
 800a364:	9d06      	ldr	r5, [sp, #24]
 800a366:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a36a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a36e:	4630      	mov	r0, r6
 800a370:	4639      	mov	r1, r7
 800a372:	f7f6 f9db 	bl	800072c <__aeabi_ddiv>
 800a376:	f7f6 fb5f 	bl	8000a38 <__aeabi_d2iz>
 800a37a:	4681      	mov	r9, r0
 800a37c:	f7f6 f842 	bl	8000404 <__aeabi_i2d>
 800a380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a384:	f7f6 f8a8 	bl	80004d8 <__aeabi_dmul>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4630      	mov	r0, r6
 800a38e:	4639      	mov	r1, r7
 800a390:	f7f5 feea 	bl	8000168 <__aeabi_dsub>
 800a394:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a398:	f805 6b01 	strb.w	r6, [r5], #1
 800a39c:	9e06      	ldr	r6, [sp, #24]
 800a39e:	4602      	mov	r2, r0
 800a3a0:	1bae      	subs	r6, r5, r6
 800a3a2:	45b0      	cmp	r8, r6
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	d135      	bne.n	800a414 <_dtoa_r+0x6d4>
 800a3a8:	f7f5 fee0 	bl	800016c <__adddf3>
 800a3ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	460f      	mov	r7, r1
 800a3b4:	f7f6 fb20 	bl	80009f8 <__aeabi_dcmpgt>
 800a3b8:	b9c8      	cbnz	r0, 800a3ee <_dtoa_r+0x6ae>
 800a3ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3be:	4630      	mov	r0, r6
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	f7f6 faf1 	bl	80009a8 <__aeabi_dcmpeq>
 800a3c6:	b110      	cbz	r0, 800a3ce <_dtoa_r+0x68e>
 800a3c8:	f019 0f01 	tst.w	r9, #1
 800a3cc:	d10f      	bne.n	800a3ee <_dtoa_r+0x6ae>
 800a3ce:	4659      	mov	r1, fp
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f000 ffe1 	bl	800b398 <_Bfree>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3da:	702b      	strb	r3, [r5, #0]
 800a3dc:	f10a 0301 	add.w	r3, sl, #1
 800a3e0:	6013      	str	r3, [r2, #0]
 800a3e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f43f acf3 	beq.w	8009dd0 <_dtoa_r+0x90>
 800a3ea:	601d      	str	r5, [r3, #0]
 800a3ec:	e4f0      	b.n	8009dd0 <_dtoa_r+0x90>
 800a3ee:	4657      	mov	r7, sl
 800a3f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3f4:	1e6b      	subs	r3, r5, #1
 800a3f6:	2a39      	cmp	r2, #57	; 0x39
 800a3f8:	d106      	bne.n	800a408 <_dtoa_r+0x6c8>
 800a3fa:	9a06      	ldr	r2, [sp, #24]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d107      	bne.n	800a410 <_dtoa_r+0x6d0>
 800a400:	2330      	movs	r3, #48	; 0x30
 800a402:	7013      	strb	r3, [r2, #0]
 800a404:	4613      	mov	r3, r2
 800a406:	3701      	adds	r7, #1
 800a408:	781a      	ldrb	r2, [r3, #0]
 800a40a:	3201      	adds	r2, #1
 800a40c:	701a      	strb	r2, [r3, #0]
 800a40e:	e791      	b.n	800a334 <_dtoa_r+0x5f4>
 800a410:	461d      	mov	r5, r3
 800a412:	e7ed      	b.n	800a3f0 <_dtoa_r+0x6b0>
 800a414:	2200      	movs	r2, #0
 800a416:	4b99      	ldr	r3, [pc, #612]	; (800a67c <_dtoa_r+0x93c>)
 800a418:	f7f6 f85e 	bl	80004d8 <__aeabi_dmul>
 800a41c:	2200      	movs	r2, #0
 800a41e:	2300      	movs	r3, #0
 800a420:	4606      	mov	r6, r0
 800a422:	460f      	mov	r7, r1
 800a424:	f7f6 fac0 	bl	80009a8 <__aeabi_dcmpeq>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d09e      	beq.n	800a36a <_dtoa_r+0x62a>
 800a42c:	e7cf      	b.n	800a3ce <_dtoa_r+0x68e>
 800a42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a430:	2a00      	cmp	r2, #0
 800a432:	f000 8088 	beq.w	800a546 <_dtoa_r+0x806>
 800a436:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a438:	2a01      	cmp	r2, #1
 800a43a:	dc6d      	bgt.n	800a518 <_dtoa_r+0x7d8>
 800a43c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a43e:	2a00      	cmp	r2, #0
 800a440:	d066      	beq.n	800a510 <_dtoa_r+0x7d0>
 800a442:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a446:	464d      	mov	r5, r9
 800a448:	9e08      	ldr	r6, [sp, #32]
 800a44a:	9a07      	ldr	r2, [sp, #28]
 800a44c:	2101      	movs	r1, #1
 800a44e:	441a      	add	r2, r3
 800a450:	4620      	mov	r0, r4
 800a452:	4499      	add	r9, r3
 800a454:	9207      	str	r2, [sp, #28]
 800a456:	f001 f87d 	bl	800b554 <__i2b>
 800a45a:	4607      	mov	r7, r0
 800a45c:	2d00      	cmp	r5, #0
 800a45e:	dd0b      	ble.n	800a478 <_dtoa_r+0x738>
 800a460:	9b07      	ldr	r3, [sp, #28]
 800a462:	2b00      	cmp	r3, #0
 800a464:	dd08      	ble.n	800a478 <_dtoa_r+0x738>
 800a466:	42ab      	cmp	r3, r5
 800a468:	bfa8      	it	ge
 800a46a:	462b      	movge	r3, r5
 800a46c:	9a07      	ldr	r2, [sp, #28]
 800a46e:	eba9 0903 	sub.w	r9, r9, r3
 800a472:	1aed      	subs	r5, r5, r3
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	9307      	str	r3, [sp, #28]
 800a478:	9b08      	ldr	r3, [sp, #32]
 800a47a:	b1eb      	cbz	r3, 800a4b8 <_dtoa_r+0x778>
 800a47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d065      	beq.n	800a54e <_dtoa_r+0x80e>
 800a482:	b18e      	cbz	r6, 800a4a8 <_dtoa_r+0x768>
 800a484:	4639      	mov	r1, r7
 800a486:	4632      	mov	r2, r6
 800a488:	4620      	mov	r0, r4
 800a48a:	f001 f901 	bl	800b690 <__pow5mult>
 800a48e:	465a      	mov	r2, fp
 800a490:	4601      	mov	r1, r0
 800a492:	4607      	mov	r7, r0
 800a494:	4620      	mov	r0, r4
 800a496:	f001 f866 	bl	800b566 <__multiply>
 800a49a:	4659      	mov	r1, fp
 800a49c:	900a      	str	r0, [sp, #40]	; 0x28
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f000 ff7a 	bl	800b398 <_Bfree>
 800a4a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4a6:	469b      	mov	fp, r3
 800a4a8:	9b08      	ldr	r3, [sp, #32]
 800a4aa:	1b9a      	subs	r2, r3, r6
 800a4ac:	d004      	beq.n	800a4b8 <_dtoa_r+0x778>
 800a4ae:	4659      	mov	r1, fp
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f001 f8ed 	bl	800b690 <__pow5mult>
 800a4b6:	4683      	mov	fp, r0
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f001 f84a 	bl	800b554 <__i2b>
 800a4c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 81c6 	beq.w	800a856 <_dtoa_r+0xb16>
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	4601      	mov	r1, r0
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f001 f8de 	bl	800b690 <__pow5mult>
 800a4d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	dc3e      	bgt.n	800a55a <_dtoa_r+0x81a>
 800a4dc:	9b02      	ldr	r3, [sp, #8]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d137      	bne.n	800a552 <_dtoa_r+0x812>
 800a4e2:	9b03      	ldr	r3, [sp, #12]
 800a4e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d134      	bne.n	800a556 <_dtoa_r+0x816>
 800a4ec:	9b03      	ldr	r3, [sp, #12]
 800a4ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4f2:	0d1b      	lsrs	r3, r3, #20
 800a4f4:	051b      	lsls	r3, r3, #20
 800a4f6:	b12b      	cbz	r3, 800a504 <_dtoa_r+0x7c4>
 800a4f8:	9b07      	ldr	r3, [sp, #28]
 800a4fa:	f109 0901 	add.w	r9, r9, #1
 800a4fe:	3301      	adds	r3, #1
 800a500:	9307      	str	r3, [sp, #28]
 800a502:	2301      	movs	r3, #1
 800a504:	9308      	str	r3, [sp, #32]
 800a506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d128      	bne.n	800a55e <_dtoa_r+0x81e>
 800a50c:	2001      	movs	r0, #1
 800a50e:	e02e      	b.n	800a56e <_dtoa_r+0x82e>
 800a510:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a512:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a516:	e796      	b.n	800a446 <_dtoa_r+0x706>
 800a518:	9b08      	ldr	r3, [sp, #32]
 800a51a:	f108 36ff 	add.w	r6, r8, #4294967295
 800a51e:	42b3      	cmp	r3, r6
 800a520:	bfb7      	itett	lt
 800a522:	9b08      	ldrlt	r3, [sp, #32]
 800a524:	1b9e      	subge	r6, r3, r6
 800a526:	1af2      	sublt	r2, r6, r3
 800a528:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a52a:	bfbf      	itttt	lt
 800a52c:	9608      	strlt	r6, [sp, #32]
 800a52e:	189b      	addlt	r3, r3, r2
 800a530:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a532:	2600      	movlt	r6, #0
 800a534:	f1b8 0f00 	cmp.w	r8, #0
 800a538:	bfb9      	ittee	lt
 800a53a:	eba9 0508 	sublt.w	r5, r9, r8
 800a53e:	2300      	movlt	r3, #0
 800a540:	464d      	movge	r5, r9
 800a542:	4643      	movge	r3, r8
 800a544:	e781      	b.n	800a44a <_dtoa_r+0x70a>
 800a546:	9e08      	ldr	r6, [sp, #32]
 800a548:	464d      	mov	r5, r9
 800a54a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a54c:	e786      	b.n	800a45c <_dtoa_r+0x71c>
 800a54e:	9a08      	ldr	r2, [sp, #32]
 800a550:	e7ad      	b.n	800a4ae <_dtoa_r+0x76e>
 800a552:	2300      	movs	r3, #0
 800a554:	e7d6      	b.n	800a504 <_dtoa_r+0x7c4>
 800a556:	9b02      	ldr	r3, [sp, #8]
 800a558:	e7d4      	b.n	800a504 <_dtoa_r+0x7c4>
 800a55a:	2300      	movs	r3, #0
 800a55c:	9308      	str	r3, [sp, #32]
 800a55e:	6933      	ldr	r3, [r6, #16]
 800a560:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a564:	6918      	ldr	r0, [r3, #16]
 800a566:	f000 ffa7 	bl	800b4b8 <__hi0bits>
 800a56a:	f1c0 0020 	rsb	r0, r0, #32
 800a56e:	9b07      	ldr	r3, [sp, #28]
 800a570:	4418      	add	r0, r3
 800a572:	f010 001f 	ands.w	r0, r0, #31
 800a576:	d047      	beq.n	800a608 <_dtoa_r+0x8c8>
 800a578:	f1c0 0320 	rsb	r3, r0, #32
 800a57c:	2b04      	cmp	r3, #4
 800a57e:	dd3b      	ble.n	800a5f8 <_dtoa_r+0x8b8>
 800a580:	9b07      	ldr	r3, [sp, #28]
 800a582:	f1c0 001c 	rsb	r0, r0, #28
 800a586:	4481      	add	r9, r0
 800a588:	4405      	add	r5, r0
 800a58a:	4403      	add	r3, r0
 800a58c:	9307      	str	r3, [sp, #28]
 800a58e:	f1b9 0f00 	cmp.w	r9, #0
 800a592:	dd05      	ble.n	800a5a0 <_dtoa_r+0x860>
 800a594:	4659      	mov	r1, fp
 800a596:	464a      	mov	r2, r9
 800a598:	4620      	mov	r0, r4
 800a59a:	f001 f8c7 	bl	800b72c <__lshift>
 800a59e:	4683      	mov	fp, r0
 800a5a0:	9b07      	ldr	r3, [sp, #28]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	dd05      	ble.n	800a5b2 <_dtoa_r+0x872>
 800a5a6:	4631      	mov	r1, r6
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f001 f8be 	bl	800b72c <__lshift>
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5b4:	b353      	cbz	r3, 800a60c <_dtoa_r+0x8cc>
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4658      	mov	r0, fp
 800a5ba:	f001 f90b 	bl	800b7d4 <__mcmp>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	da24      	bge.n	800a60c <_dtoa_r+0x8cc>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4659      	mov	r1, fp
 800a5c6:	220a      	movs	r2, #10
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f000 fefc 	bl	800b3c6 <__multadd>
 800a5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5d4:	4683      	mov	fp, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 8144 	beq.w	800a864 <_dtoa_r+0xb24>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4639      	mov	r1, r7
 800a5e0:	220a      	movs	r2, #10
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 feef 	bl	800b3c6 <__multadd>
 800a5e8:	9b04      	ldr	r3, [sp, #16]
 800a5ea:	4607      	mov	r7, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	dc4d      	bgt.n	800a68c <_dtoa_r+0x94c>
 800a5f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	dd4a      	ble.n	800a68c <_dtoa_r+0x94c>
 800a5f6:	e011      	b.n	800a61c <_dtoa_r+0x8dc>
 800a5f8:	d0c9      	beq.n	800a58e <_dtoa_r+0x84e>
 800a5fa:	9a07      	ldr	r2, [sp, #28]
 800a5fc:	331c      	adds	r3, #28
 800a5fe:	441a      	add	r2, r3
 800a600:	4499      	add	r9, r3
 800a602:	441d      	add	r5, r3
 800a604:	4613      	mov	r3, r2
 800a606:	e7c1      	b.n	800a58c <_dtoa_r+0x84c>
 800a608:	4603      	mov	r3, r0
 800a60a:	e7f6      	b.n	800a5fa <_dtoa_r+0x8ba>
 800a60c:	f1b8 0f00 	cmp.w	r8, #0
 800a610:	dc36      	bgt.n	800a680 <_dtoa_r+0x940>
 800a612:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a614:	2b02      	cmp	r3, #2
 800a616:	dd33      	ble.n	800a680 <_dtoa_r+0x940>
 800a618:	f8cd 8010 	str.w	r8, [sp, #16]
 800a61c:	9b04      	ldr	r3, [sp, #16]
 800a61e:	b963      	cbnz	r3, 800a63a <_dtoa_r+0x8fa>
 800a620:	4631      	mov	r1, r6
 800a622:	2205      	movs	r2, #5
 800a624:	4620      	mov	r0, r4
 800a626:	f000 fece 	bl	800b3c6 <__multadd>
 800a62a:	4601      	mov	r1, r0
 800a62c:	4606      	mov	r6, r0
 800a62e:	4658      	mov	r0, fp
 800a630:	f001 f8d0 	bl	800b7d4 <__mcmp>
 800a634:	2800      	cmp	r0, #0
 800a636:	f73f add3 	bgt.w	800a1e0 <_dtoa_r+0x4a0>
 800a63a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a63c:	9d06      	ldr	r5, [sp, #24]
 800a63e:	ea6f 0a03 	mvn.w	sl, r3
 800a642:	f04f 0900 	mov.w	r9, #0
 800a646:	4631      	mov	r1, r6
 800a648:	4620      	mov	r0, r4
 800a64a:	f000 fea5 	bl	800b398 <_Bfree>
 800a64e:	2f00      	cmp	r7, #0
 800a650:	f43f aebd 	beq.w	800a3ce <_dtoa_r+0x68e>
 800a654:	f1b9 0f00 	cmp.w	r9, #0
 800a658:	d005      	beq.n	800a666 <_dtoa_r+0x926>
 800a65a:	45b9      	cmp	r9, r7
 800a65c:	d003      	beq.n	800a666 <_dtoa_r+0x926>
 800a65e:	4649      	mov	r1, r9
 800a660:	4620      	mov	r0, r4
 800a662:	f000 fe99 	bl	800b398 <_Bfree>
 800a666:	4639      	mov	r1, r7
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fe95 	bl	800b398 <_Bfree>
 800a66e:	e6ae      	b.n	800a3ce <_dtoa_r+0x68e>
 800a670:	2600      	movs	r6, #0
 800a672:	4637      	mov	r7, r6
 800a674:	e7e1      	b.n	800a63a <_dtoa_r+0x8fa>
 800a676:	46ba      	mov	sl, r7
 800a678:	4637      	mov	r7, r6
 800a67a:	e5b1      	b.n	800a1e0 <_dtoa_r+0x4a0>
 800a67c:	40240000 	.word	0x40240000
 800a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a682:	f8cd 8010 	str.w	r8, [sp, #16]
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 80f3 	beq.w	800a872 <_dtoa_r+0xb32>
 800a68c:	2d00      	cmp	r5, #0
 800a68e:	dd05      	ble.n	800a69c <_dtoa_r+0x95c>
 800a690:	4639      	mov	r1, r7
 800a692:	462a      	mov	r2, r5
 800a694:	4620      	mov	r0, r4
 800a696:	f001 f849 	bl	800b72c <__lshift>
 800a69a:	4607      	mov	r7, r0
 800a69c:	9b08      	ldr	r3, [sp, #32]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d04c      	beq.n	800a73c <_dtoa_r+0x9fc>
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f000 fe43 	bl	800b330 <_Balloc>
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	f107 010c 	add.w	r1, r7, #12
 800a6b2:	3202      	adds	r2, #2
 800a6b4:	0092      	lsls	r2, r2, #2
 800a6b6:	300c      	adds	r0, #12
 800a6b8:	f7fd fbc0 	bl	8007e3c <memcpy>
 800a6bc:	2201      	movs	r2, #1
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f001 f833 	bl	800b72c <__lshift>
 800a6c6:	46b9      	mov	r9, r7
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	9b06      	ldr	r3, [sp, #24]
 800a6cc:	9307      	str	r3, [sp, #28]
 800a6ce:	9b02      	ldr	r3, [sp, #8]
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	9308      	str	r3, [sp, #32]
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	4658      	mov	r0, fp
 800a6da:	f7ff faa3 	bl	8009c24 <quorem>
 800a6de:	4649      	mov	r1, r9
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a6e6:	4658      	mov	r0, fp
 800a6e8:	f001 f874 	bl	800b7d4 <__mcmp>
 800a6ec:	463a      	mov	r2, r7
 800a6ee:	9002      	str	r0, [sp, #8]
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f001 f888 	bl	800b808 <__mdiff>
 800a6f8:	68c3      	ldr	r3, [r0, #12]
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	bb03      	cbnz	r3, 800a740 <_dtoa_r+0xa00>
 800a6fe:	4601      	mov	r1, r0
 800a700:	9009      	str	r0, [sp, #36]	; 0x24
 800a702:	4658      	mov	r0, fp
 800a704:	f001 f866 	bl	800b7d4 <__mcmp>
 800a708:	4603      	mov	r3, r0
 800a70a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a70c:	4611      	mov	r1, r2
 800a70e:	4620      	mov	r0, r4
 800a710:	9309      	str	r3, [sp, #36]	; 0x24
 800a712:	f000 fe41 	bl	800b398 <_Bfree>
 800a716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a718:	b9a3      	cbnz	r3, 800a744 <_dtoa_r+0xa04>
 800a71a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a71c:	b992      	cbnz	r2, 800a744 <_dtoa_r+0xa04>
 800a71e:	9a08      	ldr	r2, [sp, #32]
 800a720:	b982      	cbnz	r2, 800a744 <_dtoa_r+0xa04>
 800a722:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a726:	d029      	beq.n	800a77c <_dtoa_r+0xa3c>
 800a728:	9b02      	ldr	r3, [sp, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	dd01      	ble.n	800a732 <_dtoa_r+0x9f2>
 800a72e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a732:	9b07      	ldr	r3, [sp, #28]
 800a734:	1c5d      	adds	r5, r3, #1
 800a736:	f883 8000 	strb.w	r8, [r3]
 800a73a:	e784      	b.n	800a646 <_dtoa_r+0x906>
 800a73c:	4638      	mov	r0, r7
 800a73e:	e7c2      	b.n	800a6c6 <_dtoa_r+0x986>
 800a740:	2301      	movs	r3, #1
 800a742:	e7e3      	b.n	800a70c <_dtoa_r+0x9cc>
 800a744:	9a02      	ldr	r2, [sp, #8]
 800a746:	2a00      	cmp	r2, #0
 800a748:	db04      	blt.n	800a754 <_dtoa_r+0xa14>
 800a74a:	d123      	bne.n	800a794 <_dtoa_r+0xa54>
 800a74c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a74e:	bb0a      	cbnz	r2, 800a794 <_dtoa_r+0xa54>
 800a750:	9a08      	ldr	r2, [sp, #32]
 800a752:	b9fa      	cbnz	r2, 800a794 <_dtoa_r+0xa54>
 800a754:	2b00      	cmp	r3, #0
 800a756:	ddec      	ble.n	800a732 <_dtoa_r+0x9f2>
 800a758:	4659      	mov	r1, fp
 800a75a:	2201      	movs	r2, #1
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 ffe5 	bl	800b72c <__lshift>
 800a762:	4631      	mov	r1, r6
 800a764:	4683      	mov	fp, r0
 800a766:	f001 f835 	bl	800b7d4 <__mcmp>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	dc03      	bgt.n	800a776 <_dtoa_r+0xa36>
 800a76e:	d1e0      	bne.n	800a732 <_dtoa_r+0x9f2>
 800a770:	f018 0f01 	tst.w	r8, #1
 800a774:	d0dd      	beq.n	800a732 <_dtoa_r+0x9f2>
 800a776:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a77a:	d1d8      	bne.n	800a72e <_dtoa_r+0x9ee>
 800a77c:	9b07      	ldr	r3, [sp, #28]
 800a77e:	9a07      	ldr	r2, [sp, #28]
 800a780:	1c5d      	adds	r5, r3, #1
 800a782:	2339      	movs	r3, #57	; 0x39
 800a784:	7013      	strb	r3, [r2, #0]
 800a786:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a78a:	1e6a      	subs	r2, r5, #1
 800a78c:	2b39      	cmp	r3, #57	; 0x39
 800a78e:	d04d      	beq.n	800a82c <_dtoa_r+0xaec>
 800a790:	3301      	adds	r3, #1
 800a792:	e052      	b.n	800a83a <_dtoa_r+0xafa>
 800a794:	9a07      	ldr	r2, [sp, #28]
 800a796:	2b00      	cmp	r3, #0
 800a798:	f102 0501 	add.w	r5, r2, #1
 800a79c:	dd06      	ble.n	800a7ac <_dtoa_r+0xa6c>
 800a79e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a7a2:	d0eb      	beq.n	800a77c <_dtoa_r+0xa3c>
 800a7a4:	f108 0801 	add.w	r8, r8, #1
 800a7a8:	9b07      	ldr	r3, [sp, #28]
 800a7aa:	e7c4      	b.n	800a736 <_dtoa_r+0x9f6>
 800a7ac:	9b06      	ldr	r3, [sp, #24]
 800a7ae:	9a04      	ldr	r2, [sp, #16]
 800a7b0:	1aeb      	subs	r3, r5, r3
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a7b8:	d021      	beq.n	800a7fe <_dtoa_r+0xabe>
 800a7ba:	4659      	mov	r1, fp
 800a7bc:	2300      	movs	r3, #0
 800a7be:	220a      	movs	r2, #10
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f000 fe00 	bl	800b3c6 <__multadd>
 800a7c6:	45b9      	cmp	r9, r7
 800a7c8:	4683      	mov	fp, r0
 800a7ca:	f04f 0300 	mov.w	r3, #0
 800a7ce:	f04f 020a 	mov.w	r2, #10
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	d105      	bne.n	800a7e4 <_dtoa_r+0xaa4>
 800a7d8:	f000 fdf5 	bl	800b3c6 <__multadd>
 800a7dc:	4681      	mov	r9, r0
 800a7de:	4607      	mov	r7, r0
 800a7e0:	9507      	str	r5, [sp, #28]
 800a7e2:	e778      	b.n	800a6d6 <_dtoa_r+0x996>
 800a7e4:	f000 fdef 	bl	800b3c6 <__multadd>
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	4681      	mov	r9, r0
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	220a      	movs	r2, #10
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 fde8 	bl	800b3c6 <__multadd>
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	e7f2      	b.n	800a7e0 <_dtoa_r+0xaa0>
 800a7fa:	f04f 0900 	mov.w	r9, #0
 800a7fe:	4659      	mov	r1, fp
 800a800:	2201      	movs	r2, #1
 800a802:	4620      	mov	r0, r4
 800a804:	f000 ff92 	bl	800b72c <__lshift>
 800a808:	4631      	mov	r1, r6
 800a80a:	4683      	mov	fp, r0
 800a80c:	f000 ffe2 	bl	800b7d4 <__mcmp>
 800a810:	2800      	cmp	r0, #0
 800a812:	dcb8      	bgt.n	800a786 <_dtoa_r+0xa46>
 800a814:	d102      	bne.n	800a81c <_dtoa_r+0xadc>
 800a816:	f018 0f01 	tst.w	r8, #1
 800a81a:	d1b4      	bne.n	800a786 <_dtoa_r+0xa46>
 800a81c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a820:	1e6a      	subs	r2, r5, #1
 800a822:	2b30      	cmp	r3, #48	; 0x30
 800a824:	f47f af0f 	bne.w	800a646 <_dtoa_r+0x906>
 800a828:	4615      	mov	r5, r2
 800a82a:	e7f7      	b.n	800a81c <_dtoa_r+0xadc>
 800a82c:	9b06      	ldr	r3, [sp, #24]
 800a82e:	4293      	cmp	r3, r2
 800a830:	d105      	bne.n	800a83e <_dtoa_r+0xafe>
 800a832:	2331      	movs	r3, #49	; 0x31
 800a834:	9a06      	ldr	r2, [sp, #24]
 800a836:	f10a 0a01 	add.w	sl, sl, #1
 800a83a:	7013      	strb	r3, [r2, #0]
 800a83c:	e703      	b.n	800a646 <_dtoa_r+0x906>
 800a83e:	4615      	mov	r5, r2
 800a840:	e7a1      	b.n	800a786 <_dtoa_r+0xa46>
 800a842:	4b17      	ldr	r3, [pc, #92]	; (800a8a0 <_dtoa_r+0xb60>)
 800a844:	f7ff bae1 	b.w	8009e0a <_dtoa_r+0xca>
 800a848:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f47f aabb 	bne.w	8009dc6 <_dtoa_r+0x86>
 800a850:	4b14      	ldr	r3, [pc, #80]	; (800a8a4 <_dtoa_r+0xb64>)
 800a852:	f7ff bada 	b.w	8009e0a <_dtoa_r+0xca>
 800a856:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a858:	2b01      	cmp	r3, #1
 800a85a:	f77f ae3f 	ble.w	800a4dc <_dtoa_r+0x79c>
 800a85e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a860:	9308      	str	r3, [sp, #32]
 800a862:	e653      	b.n	800a50c <_dtoa_r+0x7cc>
 800a864:	9b04      	ldr	r3, [sp, #16]
 800a866:	2b00      	cmp	r3, #0
 800a868:	dc03      	bgt.n	800a872 <_dtoa_r+0xb32>
 800a86a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	f73f aed5 	bgt.w	800a61c <_dtoa_r+0x8dc>
 800a872:	9d06      	ldr	r5, [sp, #24]
 800a874:	4631      	mov	r1, r6
 800a876:	4658      	mov	r0, fp
 800a878:	f7ff f9d4 	bl	8009c24 <quorem>
 800a87c:	9b06      	ldr	r3, [sp, #24]
 800a87e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a882:	f805 8b01 	strb.w	r8, [r5], #1
 800a886:	9a04      	ldr	r2, [sp, #16]
 800a888:	1aeb      	subs	r3, r5, r3
 800a88a:	429a      	cmp	r2, r3
 800a88c:	ddb5      	ble.n	800a7fa <_dtoa_r+0xaba>
 800a88e:	4659      	mov	r1, fp
 800a890:	2300      	movs	r3, #0
 800a892:	220a      	movs	r2, #10
 800a894:	4620      	mov	r0, r4
 800a896:	f000 fd96 	bl	800b3c6 <__multadd>
 800a89a:	4683      	mov	fp, r0
 800a89c:	e7ea      	b.n	800a874 <_dtoa_r+0xb34>
 800a89e:	bf00      	nop
 800a8a0:	0800c62c 	.word	0x0800c62c
 800a8a4:	0800c6a8 	.word	0x0800c6a8

0800a8a8 <__sflush_r>:
 800a8a8:	898a      	ldrh	r2, [r1, #12]
 800a8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	0710      	lsls	r0, r2, #28
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	d458      	bmi.n	800a968 <__sflush_r+0xc0>
 800a8b6:	684b      	ldr	r3, [r1, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	dc05      	bgt.n	800a8c8 <__sflush_r+0x20>
 800a8bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	dc02      	bgt.n	800a8c8 <__sflush_r+0x20>
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8ca:	2e00      	cmp	r6, #0
 800a8cc:	d0f9      	beq.n	800a8c2 <__sflush_r+0x1a>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8d4:	682f      	ldr	r7, [r5, #0]
 800a8d6:	6a21      	ldr	r1, [r4, #32]
 800a8d8:	602b      	str	r3, [r5, #0]
 800a8da:	d032      	beq.n	800a942 <__sflush_r+0x9a>
 800a8dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	075a      	lsls	r2, r3, #29
 800a8e2:	d505      	bpl.n	800a8f0 <__sflush_r+0x48>
 800a8e4:	6863      	ldr	r3, [r4, #4]
 800a8e6:	1ac0      	subs	r0, r0, r3
 800a8e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8ea:	b10b      	cbz	r3, 800a8f0 <__sflush_r+0x48>
 800a8ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8ee:	1ac0      	subs	r0, r0, r3
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8f6:	6a21      	ldr	r1, [r4, #32]
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	47b0      	blx	r6
 800a8fc:	1c43      	adds	r3, r0, #1
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	d106      	bne.n	800a910 <__sflush_r+0x68>
 800a902:	6829      	ldr	r1, [r5, #0]
 800a904:	291d      	cmp	r1, #29
 800a906:	d848      	bhi.n	800a99a <__sflush_r+0xf2>
 800a908:	4a29      	ldr	r2, [pc, #164]	; (800a9b0 <__sflush_r+0x108>)
 800a90a:	40ca      	lsrs	r2, r1
 800a90c:	07d6      	lsls	r6, r2, #31
 800a90e:	d544      	bpl.n	800a99a <__sflush_r+0xf2>
 800a910:	2200      	movs	r2, #0
 800a912:	6062      	str	r2, [r4, #4]
 800a914:	6922      	ldr	r2, [r4, #16]
 800a916:	04d9      	lsls	r1, r3, #19
 800a918:	6022      	str	r2, [r4, #0]
 800a91a:	d504      	bpl.n	800a926 <__sflush_r+0x7e>
 800a91c:	1c42      	adds	r2, r0, #1
 800a91e:	d101      	bne.n	800a924 <__sflush_r+0x7c>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	b903      	cbnz	r3, 800a926 <__sflush_r+0x7e>
 800a924:	6560      	str	r0, [r4, #84]	; 0x54
 800a926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a928:	602f      	str	r7, [r5, #0]
 800a92a:	2900      	cmp	r1, #0
 800a92c:	d0c9      	beq.n	800a8c2 <__sflush_r+0x1a>
 800a92e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a932:	4299      	cmp	r1, r3
 800a934:	d002      	beq.n	800a93c <__sflush_r+0x94>
 800a936:	4628      	mov	r0, r5
 800a938:	f001 f8f2 	bl	800bb20 <_free_r>
 800a93c:	2000      	movs	r0, #0
 800a93e:	6360      	str	r0, [r4, #52]	; 0x34
 800a940:	e7c0      	b.n	800a8c4 <__sflush_r+0x1c>
 800a942:	2301      	movs	r3, #1
 800a944:	4628      	mov	r0, r5
 800a946:	47b0      	blx	r6
 800a948:	1c41      	adds	r1, r0, #1
 800a94a:	d1c8      	bne.n	800a8de <__sflush_r+0x36>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d0c5      	beq.n	800a8de <__sflush_r+0x36>
 800a952:	2b1d      	cmp	r3, #29
 800a954:	d001      	beq.n	800a95a <__sflush_r+0xb2>
 800a956:	2b16      	cmp	r3, #22
 800a958:	d101      	bne.n	800a95e <__sflush_r+0xb6>
 800a95a:	602f      	str	r7, [r5, #0]
 800a95c:	e7b1      	b.n	800a8c2 <__sflush_r+0x1a>
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	e7ad      	b.n	800a8c4 <__sflush_r+0x1c>
 800a968:	690f      	ldr	r7, [r1, #16]
 800a96a:	2f00      	cmp	r7, #0
 800a96c:	d0a9      	beq.n	800a8c2 <__sflush_r+0x1a>
 800a96e:	0793      	lsls	r3, r2, #30
 800a970:	bf18      	it	ne
 800a972:	2300      	movne	r3, #0
 800a974:	680e      	ldr	r6, [r1, #0]
 800a976:	bf08      	it	eq
 800a978:	694b      	ldreq	r3, [r1, #20]
 800a97a:	eba6 0807 	sub.w	r8, r6, r7
 800a97e:	600f      	str	r7, [r1, #0]
 800a980:	608b      	str	r3, [r1, #8]
 800a982:	f1b8 0f00 	cmp.w	r8, #0
 800a986:	dd9c      	ble.n	800a8c2 <__sflush_r+0x1a>
 800a988:	4643      	mov	r3, r8
 800a98a:	463a      	mov	r2, r7
 800a98c:	6a21      	ldr	r1, [r4, #32]
 800a98e:	4628      	mov	r0, r5
 800a990:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a992:	47b0      	blx	r6
 800a994:	2800      	cmp	r0, #0
 800a996:	dc06      	bgt.n	800a9a6 <__sflush_r+0xfe>
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a99e:	81a3      	strh	r3, [r4, #12]
 800a9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a4:	e78e      	b.n	800a8c4 <__sflush_r+0x1c>
 800a9a6:	4407      	add	r7, r0
 800a9a8:	eba8 0800 	sub.w	r8, r8, r0
 800a9ac:	e7e9      	b.n	800a982 <__sflush_r+0xda>
 800a9ae:	bf00      	nop
 800a9b0:	20400001 	.word	0x20400001

0800a9b4 <_fflush_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	690b      	ldr	r3, [r1, #16]
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	b1db      	cbz	r3, 800a9f6 <_fflush_r+0x42>
 800a9be:	b118      	cbz	r0, 800a9c8 <_fflush_r+0x14>
 800a9c0:	6983      	ldr	r3, [r0, #24]
 800a9c2:	b90b      	cbnz	r3, 800a9c8 <_fflush_r+0x14>
 800a9c4:	f000 f860 	bl	800aa88 <__sinit>
 800a9c8:	4b0c      	ldr	r3, [pc, #48]	; (800a9fc <_fflush_r+0x48>)
 800a9ca:	429c      	cmp	r4, r3
 800a9cc:	d109      	bne.n	800a9e2 <_fflush_r+0x2e>
 800a9ce:	686c      	ldr	r4, [r5, #4]
 800a9d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d4:	b17b      	cbz	r3, 800a9f6 <_fflush_r+0x42>
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	4628      	mov	r0, r5
 800a9da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9de:	f7ff bf63 	b.w	800a8a8 <__sflush_r>
 800a9e2:	4b07      	ldr	r3, [pc, #28]	; (800aa00 <_fflush_r+0x4c>)
 800a9e4:	429c      	cmp	r4, r3
 800a9e6:	d101      	bne.n	800a9ec <_fflush_r+0x38>
 800a9e8:	68ac      	ldr	r4, [r5, #8]
 800a9ea:	e7f1      	b.n	800a9d0 <_fflush_r+0x1c>
 800a9ec:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <_fflush_r+0x50>)
 800a9ee:	429c      	cmp	r4, r3
 800a9f0:	bf08      	it	eq
 800a9f2:	68ec      	ldreq	r4, [r5, #12]
 800a9f4:	e7ec      	b.n	800a9d0 <_fflush_r+0x1c>
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	bd38      	pop	{r3, r4, r5, pc}
 800a9fa:	bf00      	nop
 800a9fc:	0800c6d8 	.word	0x0800c6d8
 800aa00:	0800c6f8 	.word	0x0800c6f8
 800aa04:	0800c6b8 	.word	0x0800c6b8

0800aa08 <std>:
 800aa08:	2300      	movs	r3, #0
 800aa0a:	b510      	push	{r4, lr}
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	e9c0 3300 	strd	r3, r3, [r0]
 800aa12:	6083      	str	r3, [r0, #8]
 800aa14:	8181      	strh	r1, [r0, #12]
 800aa16:	6643      	str	r3, [r0, #100]	; 0x64
 800aa18:	81c2      	strh	r2, [r0, #14]
 800aa1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa1e:	6183      	str	r3, [r0, #24]
 800aa20:	4619      	mov	r1, r3
 800aa22:	2208      	movs	r2, #8
 800aa24:	305c      	adds	r0, #92	; 0x5c
 800aa26:	f7fd fa2d 	bl	8007e84 <memset>
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <std+0x38>)
 800aa2c:	6224      	str	r4, [r4, #32]
 800aa2e:	6263      	str	r3, [r4, #36]	; 0x24
 800aa30:	4b04      	ldr	r3, [pc, #16]	; (800aa44 <std+0x3c>)
 800aa32:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa34:	4b04      	ldr	r3, [pc, #16]	; (800aa48 <std+0x40>)
 800aa36:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa38:	4b04      	ldr	r3, [pc, #16]	; (800aa4c <std+0x44>)
 800aa3a:	6323      	str	r3, [r4, #48]	; 0x30
 800aa3c:	bd10      	pop	{r4, pc}
 800aa3e:	bf00      	nop
 800aa40:	0800c0d9 	.word	0x0800c0d9
 800aa44:	0800c0fb 	.word	0x0800c0fb
 800aa48:	0800c133 	.word	0x0800c133
 800aa4c:	0800c157 	.word	0x0800c157

0800aa50 <_cleanup_r>:
 800aa50:	4901      	ldr	r1, [pc, #4]	; (800aa58 <_cleanup_r+0x8>)
 800aa52:	f000 b885 	b.w	800ab60 <_fwalk_reent>
 800aa56:	bf00      	nop
 800aa58:	0800a9b5 	.word	0x0800a9b5

0800aa5c <__sfmoreglue>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	2568      	movs	r5, #104	; 0x68
 800aa60:	1e4a      	subs	r2, r1, #1
 800aa62:	4355      	muls	r5, r2
 800aa64:	460e      	mov	r6, r1
 800aa66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa6a:	f7fd fa21 	bl	8007eb0 <_malloc_r>
 800aa6e:	4604      	mov	r4, r0
 800aa70:	b140      	cbz	r0, 800aa84 <__sfmoreglue+0x28>
 800aa72:	2100      	movs	r1, #0
 800aa74:	e9c0 1600 	strd	r1, r6, [r0]
 800aa78:	300c      	adds	r0, #12
 800aa7a:	60a0      	str	r0, [r4, #8]
 800aa7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa80:	f7fd fa00 	bl	8007e84 <memset>
 800aa84:	4620      	mov	r0, r4
 800aa86:	bd70      	pop	{r4, r5, r6, pc}

0800aa88 <__sinit>:
 800aa88:	6983      	ldr	r3, [r0, #24]
 800aa8a:	b510      	push	{r4, lr}
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	bb33      	cbnz	r3, 800aade <__sinit+0x56>
 800aa90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800aa94:	6503      	str	r3, [r0, #80]	; 0x50
 800aa96:	4b12      	ldr	r3, [pc, #72]	; (800aae0 <__sinit+0x58>)
 800aa98:	4a12      	ldr	r2, [pc, #72]	; (800aae4 <__sinit+0x5c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	6282      	str	r2, [r0, #40]	; 0x28
 800aa9e:	4298      	cmp	r0, r3
 800aaa0:	bf04      	itt	eq
 800aaa2:	2301      	moveq	r3, #1
 800aaa4:	6183      	streq	r3, [r0, #24]
 800aaa6:	f000 f81f 	bl	800aae8 <__sfp>
 800aaaa:	6060      	str	r0, [r4, #4]
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 f81b 	bl	800aae8 <__sfp>
 800aab2:	60a0      	str	r0, [r4, #8]
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 f817 	bl	800aae8 <__sfp>
 800aaba:	2200      	movs	r2, #0
 800aabc:	60e0      	str	r0, [r4, #12]
 800aabe:	2104      	movs	r1, #4
 800aac0:	6860      	ldr	r0, [r4, #4]
 800aac2:	f7ff ffa1 	bl	800aa08 <std>
 800aac6:	2201      	movs	r2, #1
 800aac8:	2109      	movs	r1, #9
 800aaca:	68a0      	ldr	r0, [r4, #8]
 800aacc:	f7ff ff9c 	bl	800aa08 <std>
 800aad0:	2202      	movs	r2, #2
 800aad2:	2112      	movs	r1, #18
 800aad4:	68e0      	ldr	r0, [r4, #12]
 800aad6:	f7ff ff97 	bl	800aa08 <std>
 800aada:	2301      	movs	r3, #1
 800aadc:	61a3      	str	r3, [r4, #24]
 800aade:	bd10      	pop	{r4, pc}
 800aae0:	0800c618 	.word	0x0800c618
 800aae4:	0800aa51 	.word	0x0800aa51

0800aae8 <__sfp>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	4b1b      	ldr	r3, [pc, #108]	; (800ab58 <__sfp+0x70>)
 800aaec:	4607      	mov	r7, r0
 800aaee:	681e      	ldr	r6, [r3, #0]
 800aaf0:	69b3      	ldr	r3, [r6, #24]
 800aaf2:	b913      	cbnz	r3, 800aafa <__sfp+0x12>
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	f7ff ffc7 	bl	800aa88 <__sinit>
 800aafa:	3648      	adds	r6, #72	; 0x48
 800aafc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab00:	3b01      	subs	r3, #1
 800ab02:	d503      	bpl.n	800ab0c <__sfp+0x24>
 800ab04:	6833      	ldr	r3, [r6, #0]
 800ab06:	b133      	cbz	r3, 800ab16 <__sfp+0x2e>
 800ab08:	6836      	ldr	r6, [r6, #0]
 800ab0a:	e7f7      	b.n	800aafc <__sfp+0x14>
 800ab0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab10:	b16d      	cbz	r5, 800ab2e <__sfp+0x46>
 800ab12:	3468      	adds	r4, #104	; 0x68
 800ab14:	e7f4      	b.n	800ab00 <__sfp+0x18>
 800ab16:	2104      	movs	r1, #4
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f7ff ff9f 	bl	800aa5c <__sfmoreglue>
 800ab1e:	6030      	str	r0, [r6, #0]
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d1f1      	bne.n	800ab08 <__sfp+0x20>
 800ab24:	230c      	movs	r3, #12
 800ab26:	4604      	mov	r4, r0
 800ab28:	603b      	str	r3, [r7, #0]
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab2e:	4b0b      	ldr	r3, [pc, #44]	; (800ab5c <__sfp+0x74>)
 800ab30:	6665      	str	r5, [r4, #100]	; 0x64
 800ab32:	e9c4 5500 	strd	r5, r5, [r4]
 800ab36:	60a5      	str	r5, [r4, #8]
 800ab38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ab3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ab40:	2208      	movs	r2, #8
 800ab42:	4629      	mov	r1, r5
 800ab44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab48:	f7fd f99c 	bl	8007e84 <memset>
 800ab4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab54:	e7e9      	b.n	800ab2a <__sfp+0x42>
 800ab56:	bf00      	nop
 800ab58:	0800c618 	.word	0x0800c618
 800ab5c:	ffff0001 	.word	0xffff0001

0800ab60 <_fwalk_reent>:
 800ab60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab64:	4680      	mov	r8, r0
 800ab66:	4689      	mov	r9, r1
 800ab68:	2600      	movs	r6, #0
 800ab6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab6e:	b914      	cbnz	r4, 800ab76 <_fwalk_reent+0x16>
 800ab70:	4630      	mov	r0, r6
 800ab72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ab7a:	3f01      	subs	r7, #1
 800ab7c:	d501      	bpl.n	800ab82 <_fwalk_reent+0x22>
 800ab7e:	6824      	ldr	r4, [r4, #0]
 800ab80:	e7f5      	b.n	800ab6e <_fwalk_reent+0xe>
 800ab82:	89ab      	ldrh	r3, [r5, #12]
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d907      	bls.n	800ab98 <_fwalk_reent+0x38>
 800ab88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	d003      	beq.n	800ab98 <_fwalk_reent+0x38>
 800ab90:	4629      	mov	r1, r5
 800ab92:	4640      	mov	r0, r8
 800ab94:	47c8      	blx	r9
 800ab96:	4306      	orrs	r6, r0
 800ab98:	3568      	adds	r5, #104	; 0x68
 800ab9a:	e7ee      	b.n	800ab7a <_fwalk_reent+0x1a>

0800ab9c <rshift>:
 800ab9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab9e:	6906      	ldr	r6, [r0, #16]
 800aba0:	114b      	asrs	r3, r1, #5
 800aba2:	429e      	cmp	r6, r3
 800aba4:	f100 0414 	add.w	r4, r0, #20
 800aba8:	dd31      	ble.n	800ac0e <rshift+0x72>
 800abaa:	f011 011f 	ands.w	r1, r1, #31
 800abae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800abb2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800abb6:	d108      	bne.n	800abca <rshift+0x2e>
 800abb8:	4621      	mov	r1, r4
 800abba:	42b2      	cmp	r2, r6
 800abbc:	460b      	mov	r3, r1
 800abbe:	d211      	bcs.n	800abe4 <rshift+0x48>
 800abc0:	f852 3b04 	ldr.w	r3, [r2], #4
 800abc4:	f841 3b04 	str.w	r3, [r1], #4
 800abc8:	e7f7      	b.n	800abba <rshift+0x1e>
 800abca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800abce:	4623      	mov	r3, r4
 800abd0:	f1c1 0c20 	rsb	ip, r1, #32
 800abd4:	40cd      	lsrs	r5, r1
 800abd6:	3204      	adds	r2, #4
 800abd8:	42b2      	cmp	r2, r6
 800abda:	4617      	mov	r7, r2
 800abdc:	d30d      	bcc.n	800abfa <rshift+0x5e>
 800abde:	601d      	str	r5, [r3, #0]
 800abe0:	b105      	cbz	r5, 800abe4 <rshift+0x48>
 800abe2:	3304      	adds	r3, #4
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	eba3 0204 	sub.w	r2, r3, r4
 800abea:	bf08      	it	eq
 800abec:	2300      	moveq	r3, #0
 800abee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abf2:	6102      	str	r2, [r0, #16]
 800abf4:	bf08      	it	eq
 800abf6:	6143      	streq	r3, [r0, #20]
 800abf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abfa:	683f      	ldr	r7, [r7, #0]
 800abfc:	fa07 f70c 	lsl.w	r7, r7, ip
 800ac00:	433d      	orrs	r5, r7
 800ac02:	f843 5b04 	str.w	r5, [r3], #4
 800ac06:	f852 5b04 	ldr.w	r5, [r2], #4
 800ac0a:	40cd      	lsrs	r5, r1
 800ac0c:	e7e4      	b.n	800abd8 <rshift+0x3c>
 800ac0e:	4623      	mov	r3, r4
 800ac10:	e7e8      	b.n	800abe4 <rshift+0x48>

0800ac12 <__hexdig_fun>:
 800ac12:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ac16:	2b09      	cmp	r3, #9
 800ac18:	d802      	bhi.n	800ac20 <__hexdig_fun+0xe>
 800ac1a:	3820      	subs	r0, #32
 800ac1c:	b2c0      	uxtb	r0, r0
 800ac1e:	4770      	bx	lr
 800ac20:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ac24:	2b05      	cmp	r3, #5
 800ac26:	d801      	bhi.n	800ac2c <__hexdig_fun+0x1a>
 800ac28:	3847      	subs	r0, #71	; 0x47
 800ac2a:	e7f7      	b.n	800ac1c <__hexdig_fun+0xa>
 800ac2c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ac30:	2b05      	cmp	r3, #5
 800ac32:	d801      	bhi.n	800ac38 <__hexdig_fun+0x26>
 800ac34:	3827      	subs	r0, #39	; 0x27
 800ac36:	e7f1      	b.n	800ac1c <__hexdig_fun+0xa>
 800ac38:	2000      	movs	r0, #0
 800ac3a:	4770      	bx	lr

0800ac3c <__gethex>:
 800ac3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac40:	b08b      	sub	sp, #44	; 0x2c
 800ac42:	9002      	str	r0, [sp, #8]
 800ac44:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ac46:	468a      	mov	sl, r1
 800ac48:	4690      	mov	r8, r2
 800ac4a:	9306      	str	r3, [sp, #24]
 800ac4c:	f000 fad1 	bl	800b1f2 <__localeconv_l>
 800ac50:	6803      	ldr	r3, [r0, #0]
 800ac52:	f04f 0b00 	mov.w	fp, #0
 800ac56:	4618      	mov	r0, r3
 800ac58:	9303      	str	r3, [sp, #12]
 800ac5a:	f7f5 fa79 	bl	8000150 <strlen>
 800ac5e:	9b03      	ldr	r3, [sp, #12]
 800ac60:	9001      	str	r0, [sp, #4]
 800ac62:	4403      	add	r3, r0
 800ac64:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ac68:	9307      	str	r3, [sp, #28]
 800ac6a:	f8da 3000 	ldr.w	r3, [sl]
 800ac6e:	3302      	adds	r3, #2
 800ac70:	461f      	mov	r7, r3
 800ac72:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac76:	2830      	cmp	r0, #48	; 0x30
 800ac78:	d06c      	beq.n	800ad54 <__gethex+0x118>
 800ac7a:	f7ff ffca 	bl	800ac12 <__hexdig_fun>
 800ac7e:	4604      	mov	r4, r0
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d16a      	bne.n	800ad5a <__gethex+0x11e>
 800ac84:	9a01      	ldr	r2, [sp, #4]
 800ac86:	9903      	ldr	r1, [sp, #12]
 800ac88:	4638      	mov	r0, r7
 800ac8a:	f001 fa68 	bl	800c15e <strncmp>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d166      	bne.n	800ad60 <__gethex+0x124>
 800ac92:	9b01      	ldr	r3, [sp, #4]
 800ac94:	5cf8      	ldrb	r0, [r7, r3]
 800ac96:	18fe      	adds	r6, r7, r3
 800ac98:	f7ff ffbb 	bl	800ac12 <__hexdig_fun>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d062      	beq.n	800ad66 <__gethex+0x12a>
 800aca0:	4633      	mov	r3, r6
 800aca2:	7818      	ldrb	r0, [r3, #0]
 800aca4:	461f      	mov	r7, r3
 800aca6:	2830      	cmp	r0, #48	; 0x30
 800aca8:	f103 0301 	add.w	r3, r3, #1
 800acac:	d0f9      	beq.n	800aca2 <__gethex+0x66>
 800acae:	f7ff ffb0 	bl	800ac12 <__hexdig_fun>
 800acb2:	fab0 f580 	clz	r5, r0
 800acb6:	4634      	mov	r4, r6
 800acb8:	f04f 0b01 	mov.w	fp, #1
 800acbc:	096d      	lsrs	r5, r5, #5
 800acbe:	463a      	mov	r2, r7
 800acc0:	4616      	mov	r6, r2
 800acc2:	7830      	ldrb	r0, [r6, #0]
 800acc4:	3201      	adds	r2, #1
 800acc6:	f7ff ffa4 	bl	800ac12 <__hexdig_fun>
 800acca:	2800      	cmp	r0, #0
 800accc:	d1f8      	bne.n	800acc0 <__gethex+0x84>
 800acce:	9a01      	ldr	r2, [sp, #4]
 800acd0:	9903      	ldr	r1, [sp, #12]
 800acd2:	4630      	mov	r0, r6
 800acd4:	f001 fa43 	bl	800c15e <strncmp>
 800acd8:	b950      	cbnz	r0, 800acf0 <__gethex+0xb4>
 800acda:	b954      	cbnz	r4, 800acf2 <__gethex+0xb6>
 800acdc:	9b01      	ldr	r3, [sp, #4]
 800acde:	18f4      	adds	r4, r6, r3
 800ace0:	4622      	mov	r2, r4
 800ace2:	4616      	mov	r6, r2
 800ace4:	7830      	ldrb	r0, [r6, #0]
 800ace6:	3201      	adds	r2, #1
 800ace8:	f7ff ff93 	bl	800ac12 <__hexdig_fun>
 800acec:	2800      	cmp	r0, #0
 800acee:	d1f8      	bne.n	800ace2 <__gethex+0xa6>
 800acf0:	b10c      	cbz	r4, 800acf6 <__gethex+0xba>
 800acf2:	1ba4      	subs	r4, r4, r6
 800acf4:	00a4      	lsls	r4, r4, #2
 800acf6:	7833      	ldrb	r3, [r6, #0]
 800acf8:	2b50      	cmp	r3, #80	; 0x50
 800acfa:	d001      	beq.n	800ad00 <__gethex+0xc4>
 800acfc:	2b70      	cmp	r3, #112	; 0x70
 800acfe:	d140      	bne.n	800ad82 <__gethex+0x146>
 800ad00:	7873      	ldrb	r3, [r6, #1]
 800ad02:	2b2b      	cmp	r3, #43	; 0x2b
 800ad04:	d031      	beq.n	800ad6a <__gethex+0x12e>
 800ad06:	2b2d      	cmp	r3, #45	; 0x2d
 800ad08:	d033      	beq.n	800ad72 <__gethex+0x136>
 800ad0a:	f04f 0900 	mov.w	r9, #0
 800ad0e:	1c71      	adds	r1, r6, #1
 800ad10:	7808      	ldrb	r0, [r1, #0]
 800ad12:	f7ff ff7e 	bl	800ac12 <__hexdig_fun>
 800ad16:	1e43      	subs	r3, r0, #1
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b18      	cmp	r3, #24
 800ad1c:	d831      	bhi.n	800ad82 <__gethex+0x146>
 800ad1e:	f1a0 0210 	sub.w	r2, r0, #16
 800ad22:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad26:	f7ff ff74 	bl	800ac12 <__hexdig_fun>
 800ad2a:	1e43      	subs	r3, r0, #1
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b18      	cmp	r3, #24
 800ad30:	d922      	bls.n	800ad78 <__gethex+0x13c>
 800ad32:	f1b9 0f00 	cmp.w	r9, #0
 800ad36:	d000      	beq.n	800ad3a <__gethex+0xfe>
 800ad38:	4252      	negs	r2, r2
 800ad3a:	4414      	add	r4, r2
 800ad3c:	f8ca 1000 	str.w	r1, [sl]
 800ad40:	b30d      	cbz	r5, 800ad86 <__gethex+0x14a>
 800ad42:	f1bb 0f00 	cmp.w	fp, #0
 800ad46:	bf0c      	ite	eq
 800ad48:	2706      	moveq	r7, #6
 800ad4a:	2700      	movne	r7, #0
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	b00b      	add	sp, #44	; 0x2c
 800ad50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad54:	f10b 0b01 	add.w	fp, fp, #1
 800ad58:	e78a      	b.n	800ac70 <__gethex+0x34>
 800ad5a:	2500      	movs	r5, #0
 800ad5c:	462c      	mov	r4, r5
 800ad5e:	e7ae      	b.n	800acbe <__gethex+0x82>
 800ad60:	463e      	mov	r6, r7
 800ad62:	2501      	movs	r5, #1
 800ad64:	e7c7      	b.n	800acf6 <__gethex+0xba>
 800ad66:	4604      	mov	r4, r0
 800ad68:	e7fb      	b.n	800ad62 <__gethex+0x126>
 800ad6a:	f04f 0900 	mov.w	r9, #0
 800ad6e:	1cb1      	adds	r1, r6, #2
 800ad70:	e7ce      	b.n	800ad10 <__gethex+0xd4>
 800ad72:	f04f 0901 	mov.w	r9, #1
 800ad76:	e7fa      	b.n	800ad6e <__gethex+0x132>
 800ad78:	230a      	movs	r3, #10
 800ad7a:	fb03 0202 	mla	r2, r3, r2, r0
 800ad7e:	3a10      	subs	r2, #16
 800ad80:	e7cf      	b.n	800ad22 <__gethex+0xe6>
 800ad82:	4631      	mov	r1, r6
 800ad84:	e7da      	b.n	800ad3c <__gethex+0x100>
 800ad86:	4629      	mov	r1, r5
 800ad88:	1bf3      	subs	r3, r6, r7
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	2b07      	cmp	r3, #7
 800ad8e:	dc49      	bgt.n	800ae24 <__gethex+0x1e8>
 800ad90:	9802      	ldr	r0, [sp, #8]
 800ad92:	f000 facd 	bl	800b330 <_Balloc>
 800ad96:	f04f 0b00 	mov.w	fp, #0
 800ad9a:	4605      	mov	r5, r0
 800ad9c:	46da      	mov	sl, fp
 800ad9e:	9b01      	ldr	r3, [sp, #4]
 800ada0:	f100 0914 	add.w	r9, r0, #20
 800ada4:	f1c3 0301 	rsb	r3, r3, #1
 800ada8:	f8cd 9010 	str.w	r9, [sp, #16]
 800adac:	9308      	str	r3, [sp, #32]
 800adae:	42b7      	cmp	r7, r6
 800adb0:	d33b      	bcc.n	800ae2a <__gethex+0x1ee>
 800adb2:	9804      	ldr	r0, [sp, #16]
 800adb4:	f840 ab04 	str.w	sl, [r0], #4
 800adb8:	eba0 0009 	sub.w	r0, r0, r9
 800adbc:	1080      	asrs	r0, r0, #2
 800adbe:	6128      	str	r0, [r5, #16]
 800adc0:	0147      	lsls	r7, r0, #5
 800adc2:	4650      	mov	r0, sl
 800adc4:	f000 fb78 	bl	800b4b8 <__hi0bits>
 800adc8:	f8d8 6000 	ldr.w	r6, [r8]
 800adcc:	1a3f      	subs	r7, r7, r0
 800adce:	42b7      	cmp	r7, r6
 800add0:	dd64      	ble.n	800ae9c <__gethex+0x260>
 800add2:	1bbf      	subs	r7, r7, r6
 800add4:	4639      	mov	r1, r7
 800add6:	4628      	mov	r0, r5
 800add8:	f000 fe81 	bl	800bade <__any_on>
 800addc:	4682      	mov	sl, r0
 800adde:	b178      	cbz	r0, 800ae00 <__gethex+0x1c4>
 800ade0:	f04f 0a01 	mov.w	sl, #1
 800ade4:	1e7b      	subs	r3, r7, #1
 800ade6:	1159      	asrs	r1, r3, #5
 800ade8:	f003 021f 	and.w	r2, r3, #31
 800adec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800adf0:	fa0a f202 	lsl.w	r2, sl, r2
 800adf4:	420a      	tst	r2, r1
 800adf6:	d003      	beq.n	800ae00 <__gethex+0x1c4>
 800adf8:	4553      	cmp	r3, sl
 800adfa:	dc46      	bgt.n	800ae8a <__gethex+0x24e>
 800adfc:	f04f 0a02 	mov.w	sl, #2
 800ae00:	4639      	mov	r1, r7
 800ae02:	4628      	mov	r0, r5
 800ae04:	f7ff feca 	bl	800ab9c <rshift>
 800ae08:	443c      	add	r4, r7
 800ae0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae0e:	42a3      	cmp	r3, r4
 800ae10:	da52      	bge.n	800aeb8 <__gethex+0x27c>
 800ae12:	4629      	mov	r1, r5
 800ae14:	9802      	ldr	r0, [sp, #8]
 800ae16:	f000 fabf 	bl	800b398 <_Bfree>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae1e:	27a3      	movs	r7, #163	; 0xa3
 800ae20:	6013      	str	r3, [r2, #0]
 800ae22:	e793      	b.n	800ad4c <__gethex+0x110>
 800ae24:	3101      	adds	r1, #1
 800ae26:	105b      	asrs	r3, r3, #1
 800ae28:	e7b0      	b.n	800ad8c <__gethex+0x150>
 800ae2a:	1e73      	subs	r3, r6, #1
 800ae2c:	9305      	str	r3, [sp, #20]
 800ae2e:	9a07      	ldr	r2, [sp, #28]
 800ae30:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d018      	beq.n	800ae6a <__gethex+0x22e>
 800ae38:	f1bb 0f20 	cmp.w	fp, #32
 800ae3c:	d107      	bne.n	800ae4e <__gethex+0x212>
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	f8c3 a000 	str.w	sl, [r3]
 800ae44:	f04f 0a00 	mov.w	sl, #0
 800ae48:	46d3      	mov	fp, sl
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	9304      	str	r3, [sp, #16]
 800ae4e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ae52:	f7ff fede 	bl	800ac12 <__hexdig_fun>
 800ae56:	f000 000f 	and.w	r0, r0, #15
 800ae5a:	fa00 f00b 	lsl.w	r0, r0, fp
 800ae5e:	ea4a 0a00 	orr.w	sl, sl, r0
 800ae62:	f10b 0b04 	add.w	fp, fp, #4
 800ae66:	9b05      	ldr	r3, [sp, #20]
 800ae68:	e00d      	b.n	800ae86 <__gethex+0x24a>
 800ae6a:	9b05      	ldr	r3, [sp, #20]
 800ae6c:	9a08      	ldr	r2, [sp, #32]
 800ae6e:	4413      	add	r3, r2
 800ae70:	42bb      	cmp	r3, r7
 800ae72:	d3e1      	bcc.n	800ae38 <__gethex+0x1fc>
 800ae74:	4618      	mov	r0, r3
 800ae76:	9a01      	ldr	r2, [sp, #4]
 800ae78:	9903      	ldr	r1, [sp, #12]
 800ae7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7c:	f001 f96f 	bl	800c15e <strncmp>
 800ae80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d1d8      	bne.n	800ae38 <__gethex+0x1fc>
 800ae86:	461e      	mov	r6, r3
 800ae88:	e791      	b.n	800adae <__gethex+0x172>
 800ae8a:	1eb9      	subs	r1, r7, #2
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	f000 fe26 	bl	800bade <__any_on>
 800ae92:	2800      	cmp	r0, #0
 800ae94:	d0b2      	beq.n	800adfc <__gethex+0x1c0>
 800ae96:	f04f 0a03 	mov.w	sl, #3
 800ae9a:	e7b1      	b.n	800ae00 <__gethex+0x1c4>
 800ae9c:	da09      	bge.n	800aeb2 <__gethex+0x276>
 800ae9e:	1bf7      	subs	r7, r6, r7
 800aea0:	4629      	mov	r1, r5
 800aea2:	463a      	mov	r2, r7
 800aea4:	9802      	ldr	r0, [sp, #8]
 800aea6:	f000 fc41 	bl	800b72c <__lshift>
 800aeaa:	4605      	mov	r5, r0
 800aeac:	1be4      	subs	r4, r4, r7
 800aeae:	f100 0914 	add.w	r9, r0, #20
 800aeb2:	f04f 0a00 	mov.w	sl, #0
 800aeb6:	e7a8      	b.n	800ae0a <__gethex+0x1ce>
 800aeb8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aebc:	42a0      	cmp	r0, r4
 800aebe:	dd6b      	ble.n	800af98 <__gethex+0x35c>
 800aec0:	1b04      	subs	r4, r0, r4
 800aec2:	42a6      	cmp	r6, r4
 800aec4:	dc2e      	bgt.n	800af24 <__gethex+0x2e8>
 800aec6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d022      	beq.n	800af14 <__gethex+0x2d8>
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d024      	beq.n	800af1c <__gethex+0x2e0>
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d115      	bne.n	800af02 <__gethex+0x2c6>
 800aed6:	42a6      	cmp	r6, r4
 800aed8:	d113      	bne.n	800af02 <__gethex+0x2c6>
 800aeda:	2e01      	cmp	r6, #1
 800aedc:	dc0b      	bgt.n	800aef6 <__gethex+0x2ba>
 800aede:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aee2:	9a06      	ldr	r2, [sp, #24]
 800aee4:	2762      	movs	r7, #98	; 0x62
 800aee6:	6013      	str	r3, [r2, #0]
 800aee8:	2301      	movs	r3, #1
 800aeea:	612b      	str	r3, [r5, #16]
 800aeec:	f8c9 3000 	str.w	r3, [r9]
 800aef0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aef2:	601d      	str	r5, [r3, #0]
 800aef4:	e72a      	b.n	800ad4c <__gethex+0x110>
 800aef6:	1e71      	subs	r1, r6, #1
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 fdf0 	bl	800bade <__any_on>
 800aefe:	2800      	cmp	r0, #0
 800af00:	d1ed      	bne.n	800aede <__gethex+0x2a2>
 800af02:	4629      	mov	r1, r5
 800af04:	9802      	ldr	r0, [sp, #8]
 800af06:	f000 fa47 	bl	800b398 <_Bfree>
 800af0a:	2300      	movs	r3, #0
 800af0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af0e:	2750      	movs	r7, #80	; 0x50
 800af10:	6013      	str	r3, [r2, #0]
 800af12:	e71b      	b.n	800ad4c <__gethex+0x110>
 800af14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0e1      	beq.n	800aede <__gethex+0x2a2>
 800af1a:	e7f2      	b.n	800af02 <__gethex+0x2c6>
 800af1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1dd      	bne.n	800aede <__gethex+0x2a2>
 800af22:	e7ee      	b.n	800af02 <__gethex+0x2c6>
 800af24:	1e67      	subs	r7, r4, #1
 800af26:	f1ba 0f00 	cmp.w	sl, #0
 800af2a:	d132      	bne.n	800af92 <__gethex+0x356>
 800af2c:	b127      	cbz	r7, 800af38 <__gethex+0x2fc>
 800af2e:	4639      	mov	r1, r7
 800af30:	4628      	mov	r0, r5
 800af32:	f000 fdd4 	bl	800bade <__any_on>
 800af36:	4682      	mov	sl, r0
 800af38:	2301      	movs	r3, #1
 800af3a:	117a      	asrs	r2, r7, #5
 800af3c:	f007 071f 	and.w	r7, r7, #31
 800af40:	fa03 f707 	lsl.w	r7, r3, r7
 800af44:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800af48:	4621      	mov	r1, r4
 800af4a:	421f      	tst	r7, r3
 800af4c:	f04f 0702 	mov.w	r7, #2
 800af50:	4628      	mov	r0, r5
 800af52:	bf18      	it	ne
 800af54:	f04a 0a02 	orrne.w	sl, sl, #2
 800af58:	1b36      	subs	r6, r6, r4
 800af5a:	f7ff fe1f 	bl	800ab9c <rshift>
 800af5e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800af62:	f1ba 0f00 	cmp.w	sl, #0
 800af66:	d048      	beq.n	800affa <__gethex+0x3be>
 800af68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d015      	beq.n	800af9c <__gethex+0x360>
 800af70:	2b03      	cmp	r3, #3
 800af72:	d017      	beq.n	800afa4 <__gethex+0x368>
 800af74:	2b01      	cmp	r3, #1
 800af76:	d109      	bne.n	800af8c <__gethex+0x350>
 800af78:	f01a 0f02 	tst.w	sl, #2
 800af7c:	d006      	beq.n	800af8c <__gethex+0x350>
 800af7e:	f8d9 3000 	ldr.w	r3, [r9]
 800af82:	ea4a 0a03 	orr.w	sl, sl, r3
 800af86:	f01a 0f01 	tst.w	sl, #1
 800af8a:	d10e      	bne.n	800afaa <__gethex+0x36e>
 800af8c:	f047 0710 	orr.w	r7, r7, #16
 800af90:	e033      	b.n	800affa <__gethex+0x3be>
 800af92:	f04f 0a01 	mov.w	sl, #1
 800af96:	e7cf      	b.n	800af38 <__gethex+0x2fc>
 800af98:	2701      	movs	r7, #1
 800af9a:	e7e2      	b.n	800af62 <__gethex+0x326>
 800af9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af9e:	f1c3 0301 	rsb	r3, r3, #1
 800afa2:	9315      	str	r3, [sp, #84]	; 0x54
 800afa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0f0      	beq.n	800af8c <__gethex+0x350>
 800afaa:	f04f 0c00 	mov.w	ip, #0
 800afae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800afb2:	f105 0314 	add.w	r3, r5, #20
 800afb6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800afba:	eb03 010a 	add.w	r1, r3, sl
 800afbe:	4618      	mov	r0, r3
 800afc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800afc8:	d01c      	beq.n	800b004 <__gethex+0x3c8>
 800afca:	3201      	adds	r2, #1
 800afcc:	6002      	str	r2, [r0, #0]
 800afce:	2f02      	cmp	r7, #2
 800afd0:	f105 0314 	add.w	r3, r5, #20
 800afd4:	d138      	bne.n	800b048 <__gethex+0x40c>
 800afd6:	f8d8 2000 	ldr.w	r2, [r8]
 800afda:	3a01      	subs	r2, #1
 800afdc:	42b2      	cmp	r2, r6
 800afde:	d10a      	bne.n	800aff6 <__gethex+0x3ba>
 800afe0:	2201      	movs	r2, #1
 800afe2:	1171      	asrs	r1, r6, #5
 800afe4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afe8:	f006 061f 	and.w	r6, r6, #31
 800afec:	fa02 f606 	lsl.w	r6, r2, r6
 800aff0:	421e      	tst	r6, r3
 800aff2:	bf18      	it	ne
 800aff4:	4617      	movne	r7, r2
 800aff6:	f047 0720 	orr.w	r7, r7, #32
 800affa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800affc:	601d      	str	r5, [r3, #0]
 800affe:	9b06      	ldr	r3, [sp, #24]
 800b000:	601c      	str	r4, [r3, #0]
 800b002:	e6a3      	b.n	800ad4c <__gethex+0x110>
 800b004:	4299      	cmp	r1, r3
 800b006:	f843 cc04 	str.w	ip, [r3, #-4]
 800b00a:	d8d8      	bhi.n	800afbe <__gethex+0x382>
 800b00c:	68ab      	ldr	r3, [r5, #8]
 800b00e:	4599      	cmp	r9, r3
 800b010:	db12      	blt.n	800b038 <__gethex+0x3fc>
 800b012:	6869      	ldr	r1, [r5, #4]
 800b014:	9802      	ldr	r0, [sp, #8]
 800b016:	3101      	adds	r1, #1
 800b018:	f000 f98a 	bl	800b330 <_Balloc>
 800b01c:	4683      	mov	fp, r0
 800b01e:	692a      	ldr	r2, [r5, #16]
 800b020:	f105 010c 	add.w	r1, r5, #12
 800b024:	3202      	adds	r2, #2
 800b026:	0092      	lsls	r2, r2, #2
 800b028:	300c      	adds	r0, #12
 800b02a:	f7fc ff07 	bl	8007e3c <memcpy>
 800b02e:	4629      	mov	r1, r5
 800b030:	9802      	ldr	r0, [sp, #8]
 800b032:	f000 f9b1 	bl	800b398 <_Bfree>
 800b036:	465d      	mov	r5, fp
 800b038:	692b      	ldr	r3, [r5, #16]
 800b03a:	1c5a      	adds	r2, r3, #1
 800b03c:	612a      	str	r2, [r5, #16]
 800b03e:	2201      	movs	r2, #1
 800b040:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b044:	615a      	str	r2, [r3, #20]
 800b046:	e7c2      	b.n	800afce <__gethex+0x392>
 800b048:	692a      	ldr	r2, [r5, #16]
 800b04a:	454a      	cmp	r2, r9
 800b04c:	dd0b      	ble.n	800b066 <__gethex+0x42a>
 800b04e:	2101      	movs	r1, #1
 800b050:	4628      	mov	r0, r5
 800b052:	f7ff fda3 	bl	800ab9c <rshift>
 800b056:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b05a:	3401      	adds	r4, #1
 800b05c:	42a3      	cmp	r3, r4
 800b05e:	f6ff aed8 	blt.w	800ae12 <__gethex+0x1d6>
 800b062:	2701      	movs	r7, #1
 800b064:	e7c7      	b.n	800aff6 <__gethex+0x3ba>
 800b066:	f016 061f 	ands.w	r6, r6, #31
 800b06a:	d0fa      	beq.n	800b062 <__gethex+0x426>
 800b06c:	449a      	add	sl, r3
 800b06e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b072:	f000 fa21 	bl	800b4b8 <__hi0bits>
 800b076:	f1c6 0620 	rsb	r6, r6, #32
 800b07a:	42b0      	cmp	r0, r6
 800b07c:	dbe7      	blt.n	800b04e <__gethex+0x412>
 800b07e:	e7f0      	b.n	800b062 <__gethex+0x426>

0800b080 <L_shift>:
 800b080:	f1c2 0208 	rsb	r2, r2, #8
 800b084:	0092      	lsls	r2, r2, #2
 800b086:	b570      	push	{r4, r5, r6, lr}
 800b088:	f1c2 0620 	rsb	r6, r2, #32
 800b08c:	6843      	ldr	r3, [r0, #4]
 800b08e:	6804      	ldr	r4, [r0, #0]
 800b090:	fa03 f506 	lsl.w	r5, r3, r6
 800b094:	432c      	orrs	r4, r5
 800b096:	40d3      	lsrs	r3, r2
 800b098:	6004      	str	r4, [r0, #0]
 800b09a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b09e:	4288      	cmp	r0, r1
 800b0a0:	d3f4      	bcc.n	800b08c <L_shift+0xc>
 800b0a2:	bd70      	pop	{r4, r5, r6, pc}

0800b0a4 <__match>:
 800b0a4:	b530      	push	{r4, r5, lr}
 800b0a6:	6803      	ldr	r3, [r0, #0]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ae:	b914      	cbnz	r4, 800b0b6 <__match+0x12>
 800b0b0:	6003      	str	r3, [r0, #0]
 800b0b2:	2001      	movs	r0, #1
 800b0b4:	bd30      	pop	{r4, r5, pc}
 800b0b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b0be:	2d19      	cmp	r5, #25
 800b0c0:	bf98      	it	ls
 800b0c2:	3220      	addls	r2, #32
 800b0c4:	42a2      	cmp	r2, r4
 800b0c6:	d0f0      	beq.n	800b0aa <__match+0x6>
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	e7f3      	b.n	800b0b4 <__match+0x10>

0800b0cc <__hexnan>:
 800b0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d0:	2500      	movs	r5, #0
 800b0d2:	680b      	ldr	r3, [r1, #0]
 800b0d4:	4682      	mov	sl, r0
 800b0d6:	115f      	asrs	r7, r3, #5
 800b0d8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b0dc:	f013 031f 	ands.w	r3, r3, #31
 800b0e0:	bf18      	it	ne
 800b0e2:	3704      	addne	r7, #4
 800b0e4:	1f3e      	subs	r6, r7, #4
 800b0e6:	4690      	mov	r8, r2
 800b0e8:	46b1      	mov	r9, r6
 800b0ea:	4634      	mov	r4, r6
 800b0ec:	46ab      	mov	fp, r5
 800b0ee:	b087      	sub	sp, #28
 800b0f0:	6801      	ldr	r1, [r0, #0]
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	f847 5c04 	str.w	r5, [r7, #-4]
 800b0f8:	9502      	str	r5, [sp, #8]
 800b0fa:	784a      	ldrb	r2, [r1, #1]
 800b0fc:	1c4b      	adds	r3, r1, #1
 800b0fe:	9303      	str	r3, [sp, #12]
 800b100:	b342      	cbz	r2, 800b154 <__hexnan+0x88>
 800b102:	4610      	mov	r0, r2
 800b104:	9105      	str	r1, [sp, #20]
 800b106:	9204      	str	r2, [sp, #16]
 800b108:	f7ff fd83 	bl	800ac12 <__hexdig_fun>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d143      	bne.n	800b198 <__hexnan+0xcc>
 800b110:	9a04      	ldr	r2, [sp, #16]
 800b112:	9905      	ldr	r1, [sp, #20]
 800b114:	2a20      	cmp	r2, #32
 800b116:	d818      	bhi.n	800b14a <__hexnan+0x7e>
 800b118:	9b02      	ldr	r3, [sp, #8]
 800b11a:	459b      	cmp	fp, r3
 800b11c:	dd13      	ble.n	800b146 <__hexnan+0x7a>
 800b11e:	454c      	cmp	r4, r9
 800b120:	d206      	bcs.n	800b130 <__hexnan+0x64>
 800b122:	2d07      	cmp	r5, #7
 800b124:	dc04      	bgt.n	800b130 <__hexnan+0x64>
 800b126:	462a      	mov	r2, r5
 800b128:	4649      	mov	r1, r9
 800b12a:	4620      	mov	r0, r4
 800b12c:	f7ff ffa8 	bl	800b080 <L_shift>
 800b130:	4544      	cmp	r4, r8
 800b132:	d944      	bls.n	800b1be <__hexnan+0xf2>
 800b134:	2300      	movs	r3, #0
 800b136:	f1a4 0904 	sub.w	r9, r4, #4
 800b13a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b13e:	461d      	mov	r5, r3
 800b140:	464c      	mov	r4, r9
 800b142:	f8cd b008 	str.w	fp, [sp, #8]
 800b146:	9903      	ldr	r1, [sp, #12]
 800b148:	e7d7      	b.n	800b0fa <__hexnan+0x2e>
 800b14a:	2a29      	cmp	r2, #41	; 0x29
 800b14c:	d14a      	bne.n	800b1e4 <__hexnan+0x118>
 800b14e:	3102      	adds	r1, #2
 800b150:	f8ca 1000 	str.w	r1, [sl]
 800b154:	f1bb 0f00 	cmp.w	fp, #0
 800b158:	d044      	beq.n	800b1e4 <__hexnan+0x118>
 800b15a:	454c      	cmp	r4, r9
 800b15c:	d206      	bcs.n	800b16c <__hexnan+0xa0>
 800b15e:	2d07      	cmp	r5, #7
 800b160:	dc04      	bgt.n	800b16c <__hexnan+0xa0>
 800b162:	462a      	mov	r2, r5
 800b164:	4649      	mov	r1, r9
 800b166:	4620      	mov	r0, r4
 800b168:	f7ff ff8a 	bl	800b080 <L_shift>
 800b16c:	4544      	cmp	r4, r8
 800b16e:	d928      	bls.n	800b1c2 <__hexnan+0xf6>
 800b170:	4643      	mov	r3, r8
 800b172:	f854 2b04 	ldr.w	r2, [r4], #4
 800b176:	42a6      	cmp	r6, r4
 800b178:	f843 2b04 	str.w	r2, [r3], #4
 800b17c:	d2f9      	bcs.n	800b172 <__hexnan+0xa6>
 800b17e:	2200      	movs	r2, #0
 800b180:	f843 2b04 	str.w	r2, [r3], #4
 800b184:	429e      	cmp	r6, r3
 800b186:	d2fb      	bcs.n	800b180 <__hexnan+0xb4>
 800b188:	6833      	ldr	r3, [r6, #0]
 800b18a:	b91b      	cbnz	r3, 800b194 <__hexnan+0xc8>
 800b18c:	4546      	cmp	r6, r8
 800b18e:	d127      	bne.n	800b1e0 <__hexnan+0x114>
 800b190:	2301      	movs	r3, #1
 800b192:	6033      	str	r3, [r6, #0]
 800b194:	2005      	movs	r0, #5
 800b196:	e026      	b.n	800b1e6 <__hexnan+0x11a>
 800b198:	3501      	adds	r5, #1
 800b19a:	2d08      	cmp	r5, #8
 800b19c:	f10b 0b01 	add.w	fp, fp, #1
 800b1a0:	dd06      	ble.n	800b1b0 <__hexnan+0xe4>
 800b1a2:	4544      	cmp	r4, r8
 800b1a4:	d9cf      	bls.n	800b146 <__hexnan+0x7a>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	2501      	movs	r5, #1
 800b1aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1ae:	3c04      	subs	r4, #4
 800b1b0:	6822      	ldr	r2, [r4, #0]
 800b1b2:	f000 000f 	and.w	r0, r0, #15
 800b1b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b1ba:	6020      	str	r0, [r4, #0]
 800b1bc:	e7c3      	b.n	800b146 <__hexnan+0x7a>
 800b1be:	2508      	movs	r5, #8
 800b1c0:	e7c1      	b.n	800b146 <__hexnan+0x7a>
 800b1c2:	9b01      	ldr	r3, [sp, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d0df      	beq.n	800b188 <__hexnan+0xbc>
 800b1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1cc:	f1c3 0320 	rsb	r3, r3, #32
 800b1d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b1d8:	401a      	ands	r2, r3
 800b1da:	f847 2c04 	str.w	r2, [r7, #-4]
 800b1de:	e7d3      	b.n	800b188 <__hexnan+0xbc>
 800b1e0:	3e04      	subs	r6, #4
 800b1e2:	e7d1      	b.n	800b188 <__hexnan+0xbc>
 800b1e4:	2004      	movs	r0, #4
 800b1e6:	b007      	add	sp, #28
 800b1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1ec <__locale_ctype_ptr_l>:
 800b1ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b1f0:	4770      	bx	lr

0800b1f2 <__localeconv_l>:
 800b1f2:	30f0      	adds	r0, #240	; 0xf0
 800b1f4:	4770      	bx	lr
	...

0800b1f8 <_localeconv_r>:
 800b1f8:	4b04      	ldr	r3, [pc, #16]	; (800b20c <_localeconv_r+0x14>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6a18      	ldr	r0, [r3, #32]
 800b1fe:	4b04      	ldr	r3, [pc, #16]	; (800b210 <_localeconv_r+0x18>)
 800b200:	2800      	cmp	r0, #0
 800b202:	bf08      	it	eq
 800b204:	4618      	moveq	r0, r3
 800b206:	30f0      	adds	r0, #240	; 0xf0
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	200004bc 	.word	0x200004bc
 800b210:	20000520 	.word	0x20000520

0800b214 <__swhatbuf_r>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	460e      	mov	r6, r1
 800b218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b21c:	b096      	sub	sp, #88	; 0x58
 800b21e:	2900      	cmp	r1, #0
 800b220:	4614      	mov	r4, r2
 800b222:	461d      	mov	r5, r3
 800b224:	da07      	bge.n	800b236 <__swhatbuf_r+0x22>
 800b226:	2300      	movs	r3, #0
 800b228:	602b      	str	r3, [r5, #0]
 800b22a:	89b3      	ldrh	r3, [r6, #12]
 800b22c:	061a      	lsls	r2, r3, #24
 800b22e:	d410      	bmi.n	800b252 <__swhatbuf_r+0x3e>
 800b230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b234:	e00e      	b.n	800b254 <__swhatbuf_r+0x40>
 800b236:	466a      	mov	r2, sp
 800b238:	f000 ffd2 	bl	800c1e0 <_fstat_r>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	dbf2      	blt.n	800b226 <__swhatbuf_r+0x12>
 800b240:	9a01      	ldr	r2, [sp, #4]
 800b242:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b246:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b24a:	425a      	negs	r2, r3
 800b24c:	415a      	adcs	r2, r3
 800b24e:	602a      	str	r2, [r5, #0]
 800b250:	e7ee      	b.n	800b230 <__swhatbuf_r+0x1c>
 800b252:	2340      	movs	r3, #64	; 0x40
 800b254:	2000      	movs	r0, #0
 800b256:	6023      	str	r3, [r4, #0]
 800b258:	b016      	add	sp, #88	; 0x58
 800b25a:	bd70      	pop	{r4, r5, r6, pc}

0800b25c <__smakebuf_r>:
 800b25c:	898b      	ldrh	r3, [r1, #12]
 800b25e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b260:	079d      	lsls	r5, r3, #30
 800b262:	4606      	mov	r6, r0
 800b264:	460c      	mov	r4, r1
 800b266:	d507      	bpl.n	800b278 <__smakebuf_r+0x1c>
 800b268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	2301      	movs	r3, #1
 800b272:	6163      	str	r3, [r4, #20]
 800b274:	b002      	add	sp, #8
 800b276:	bd70      	pop	{r4, r5, r6, pc}
 800b278:	ab01      	add	r3, sp, #4
 800b27a:	466a      	mov	r2, sp
 800b27c:	f7ff ffca 	bl	800b214 <__swhatbuf_r>
 800b280:	9900      	ldr	r1, [sp, #0]
 800b282:	4605      	mov	r5, r0
 800b284:	4630      	mov	r0, r6
 800b286:	f7fc fe13 	bl	8007eb0 <_malloc_r>
 800b28a:	b948      	cbnz	r0, 800b2a0 <__smakebuf_r+0x44>
 800b28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b290:	059a      	lsls	r2, r3, #22
 800b292:	d4ef      	bmi.n	800b274 <__smakebuf_r+0x18>
 800b294:	f023 0303 	bic.w	r3, r3, #3
 800b298:	f043 0302 	orr.w	r3, r3, #2
 800b29c:	81a3      	strh	r3, [r4, #12]
 800b29e:	e7e3      	b.n	800b268 <__smakebuf_r+0xc>
 800b2a0:	4b0d      	ldr	r3, [pc, #52]	; (800b2d8 <__smakebuf_r+0x7c>)
 800b2a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2a4:	89a3      	ldrh	r3, [r4, #12]
 800b2a6:	6020      	str	r0, [r4, #0]
 800b2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	6120      	str	r0, [r4, #16]
 800b2b2:	6163      	str	r3, [r4, #20]
 800b2b4:	9b01      	ldr	r3, [sp, #4]
 800b2b6:	b15b      	cbz	r3, 800b2d0 <__smakebuf_r+0x74>
 800b2b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f000 ffa1 	bl	800c204 <_isatty_r>
 800b2c2:	b128      	cbz	r0, 800b2d0 <__smakebuf_r+0x74>
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	f023 0303 	bic.w	r3, r3, #3
 800b2ca:	f043 0301 	orr.w	r3, r3, #1
 800b2ce:	81a3      	strh	r3, [r4, #12]
 800b2d0:	89a3      	ldrh	r3, [r4, #12]
 800b2d2:	431d      	orrs	r5, r3
 800b2d4:	81a5      	strh	r5, [r4, #12]
 800b2d6:	e7cd      	b.n	800b274 <__smakebuf_r+0x18>
 800b2d8:	0800aa51 	.word	0x0800aa51

0800b2dc <malloc>:
 800b2dc:	4b02      	ldr	r3, [pc, #8]	; (800b2e8 <malloc+0xc>)
 800b2de:	4601      	mov	r1, r0
 800b2e0:	6818      	ldr	r0, [r3, #0]
 800b2e2:	f7fc bde5 	b.w	8007eb0 <_malloc_r>
 800b2e6:	bf00      	nop
 800b2e8:	200004bc 	.word	0x200004bc

0800b2ec <__ascii_mbtowc>:
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	b901      	cbnz	r1, 800b2f2 <__ascii_mbtowc+0x6>
 800b2f0:	a901      	add	r1, sp, #4
 800b2f2:	b142      	cbz	r2, 800b306 <__ascii_mbtowc+0x1a>
 800b2f4:	b14b      	cbz	r3, 800b30a <__ascii_mbtowc+0x1e>
 800b2f6:	7813      	ldrb	r3, [r2, #0]
 800b2f8:	600b      	str	r3, [r1, #0]
 800b2fa:	7812      	ldrb	r2, [r2, #0]
 800b2fc:	1c10      	adds	r0, r2, #0
 800b2fe:	bf18      	it	ne
 800b300:	2001      	movne	r0, #1
 800b302:	b002      	add	sp, #8
 800b304:	4770      	bx	lr
 800b306:	4610      	mov	r0, r2
 800b308:	e7fb      	b.n	800b302 <__ascii_mbtowc+0x16>
 800b30a:	f06f 0001 	mvn.w	r0, #1
 800b30e:	e7f8      	b.n	800b302 <__ascii_mbtowc+0x16>

0800b310 <memchr>:
 800b310:	b510      	push	{r4, lr}
 800b312:	b2c9      	uxtb	r1, r1
 800b314:	4402      	add	r2, r0
 800b316:	4290      	cmp	r0, r2
 800b318:	4603      	mov	r3, r0
 800b31a:	d101      	bne.n	800b320 <memchr+0x10>
 800b31c:	2300      	movs	r3, #0
 800b31e:	e003      	b.n	800b328 <memchr+0x18>
 800b320:	781c      	ldrb	r4, [r3, #0]
 800b322:	3001      	adds	r0, #1
 800b324:	428c      	cmp	r4, r1
 800b326:	d1f6      	bne.n	800b316 <memchr+0x6>
 800b328:	4618      	mov	r0, r3
 800b32a:	bd10      	pop	{r4, pc}

0800b32c <__malloc_lock>:
 800b32c:	4770      	bx	lr

0800b32e <__malloc_unlock>:
 800b32e:	4770      	bx	lr

0800b330 <_Balloc>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b334:	4604      	mov	r4, r0
 800b336:	460e      	mov	r6, r1
 800b338:	b93d      	cbnz	r5, 800b34a <_Balloc+0x1a>
 800b33a:	2010      	movs	r0, #16
 800b33c:	f7ff ffce 	bl	800b2dc <malloc>
 800b340:	6260      	str	r0, [r4, #36]	; 0x24
 800b342:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b346:	6005      	str	r5, [r0, #0]
 800b348:	60c5      	str	r5, [r0, #12]
 800b34a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b34c:	68eb      	ldr	r3, [r5, #12]
 800b34e:	b183      	cbz	r3, 800b372 <_Balloc+0x42>
 800b350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b358:	b9b8      	cbnz	r0, 800b38a <_Balloc+0x5a>
 800b35a:	2101      	movs	r1, #1
 800b35c:	fa01 f506 	lsl.w	r5, r1, r6
 800b360:	1d6a      	adds	r2, r5, #5
 800b362:	0092      	lsls	r2, r2, #2
 800b364:	4620      	mov	r0, r4
 800b366:	f7fc fd95 	bl	8007e94 <_calloc_r>
 800b36a:	b160      	cbz	r0, 800b386 <_Balloc+0x56>
 800b36c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b370:	e00e      	b.n	800b390 <_Balloc+0x60>
 800b372:	2221      	movs	r2, #33	; 0x21
 800b374:	2104      	movs	r1, #4
 800b376:	4620      	mov	r0, r4
 800b378:	f7fc fd8c 	bl	8007e94 <_calloc_r>
 800b37c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b37e:	60e8      	str	r0, [r5, #12]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e4      	bne.n	800b350 <_Balloc+0x20>
 800b386:	2000      	movs	r0, #0
 800b388:	bd70      	pop	{r4, r5, r6, pc}
 800b38a:	6802      	ldr	r2, [r0, #0]
 800b38c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b390:	2300      	movs	r3, #0
 800b392:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b396:	e7f7      	b.n	800b388 <_Balloc+0x58>

0800b398 <_Bfree>:
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b39c:	4606      	mov	r6, r0
 800b39e:	460d      	mov	r5, r1
 800b3a0:	b93c      	cbnz	r4, 800b3b2 <_Bfree+0x1a>
 800b3a2:	2010      	movs	r0, #16
 800b3a4:	f7ff ff9a 	bl	800b2dc <malloc>
 800b3a8:	6270      	str	r0, [r6, #36]	; 0x24
 800b3aa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3ae:	6004      	str	r4, [r0, #0]
 800b3b0:	60c4      	str	r4, [r0, #12]
 800b3b2:	b13d      	cbz	r5, 800b3c4 <_Bfree+0x2c>
 800b3b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b3b6:	686a      	ldr	r2, [r5, #4]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3be:	6029      	str	r1, [r5, #0]
 800b3c0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b3c4:	bd70      	pop	{r4, r5, r6, pc}

0800b3c6 <__multadd>:
 800b3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ca:	461f      	mov	r7, r3
 800b3cc:	4606      	mov	r6, r0
 800b3ce:	460c      	mov	r4, r1
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	690d      	ldr	r5, [r1, #16]
 800b3d4:	f101 0c14 	add.w	ip, r1, #20
 800b3d8:	f8dc 0000 	ldr.w	r0, [ip]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	b281      	uxth	r1, r0
 800b3e0:	fb02 7101 	mla	r1, r2, r1, r7
 800b3e4:	0c00      	lsrs	r0, r0, #16
 800b3e6:	0c0f      	lsrs	r7, r1, #16
 800b3e8:	fb02 7000 	mla	r0, r2, r0, r7
 800b3ec:	b289      	uxth	r1, r1
 800b3ee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b3f2:	429d      	cmp	r5, r3
 800b3f4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b3f8:	f84c 1b04 	str.w	r1, [ip], #4
 800b3fc:	dcec      	bgt.n	800b3d8 <__multadd+0x12>
 800b3fe:	b1d7      	cbz	r7, 800b436 <__multadd+0x70>
 800b400:	68a3      	ldr	r3, [r4, #8]
 800b402:	42ab      	cmp	r3, r5
 800b404:	dc12      	bgt.n	800b42c <__multadd+0x66>
 800b406:	6861      	ldr	r1, [r4, #4]
 800b408:	4630      	mov	r0, r6
 800b40a:	3101      	adds	r1, #1
 800b40c:	f7ff ff90 	bl	800b330 <_Balloc>
 800b410:	4680      	mov	r8, r0
 800b412:	6922      	ldr	r2, [r4, #16]
 800b414:	f104 010c 	add.w	r1, r4, #12
 800b418:	3202      	adds	r2, #2
 800b41a:	0092      	lsls	r2, r2, #2
 800b41c:	300c      	adds	r0, #12
 800b41e:	f7fc fd0d 	bl	8007e3c <memcpy>
 800b422:	4621      	mov	r1, r4
 800b424:	4630      	mov	r0, r6
 800b426:	f7ff ffb7 	bl	800b398 <_Bfree>
 800b42a:	4644      	mov	r4, r8
 800b42c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b430:	3501      	adds	r5, #1
 800b432:	615f      	str	r7, [r3, #20]
 800b434:	6125      	str	r5, [r4, #16]
 800b436:	4620      	mov	r0, r4
 800b438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b43c <__s2b>:
 800b43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b440:	4615      	mov	r5, r2
 800b442:	2209      	movs	r2, #9
 800b444:	461f      	mov	r7, r3
 800b446:	3308      	adds	r3, #8
 800b448:	460c      	mov	r4, r1
 800b44a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b44e:	4606      	mov	r6, r0
 800b450:	2201      	movs	r2, #1
 800b452:	2100      	movs	r1, #0
 800b454:	429a      	cmp	r2, r3
 800b456:	db20      	blt.n	800b49a <__s2b+0x5e>
 800b458:	4630      	mov	r0, r6
 800b45a:	f7ff ff69 	bl	800b330 <_Balloc>
 800b45e:	9b08      	ldr	r3, [sp, #32]
 800b460:	2d09      	cmp	r5, #9
 800b462:	6143      	str	r3, [r0, #20]
 800b464:	f04f 0301 	mov.w	r3, #1
 800b468:	6103      	str	r3, [r0, #16]
 800b46a:	dd19      	ble.n	800b4a0 <__s2b+0x64>
 800b46c:	f104 0809 	add.w	r8, r4, #9
 800b470:	46c1      	mov	r9, r8
 800b472:	442c      	add	r4, r5
 800b474:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b478:	4601      	mov	r1, r0
 800b47a:	3b30      	subs	r3, #48	; 0x30
 800b47c:	220a      	movs	r2, #10
 800b47e:	4630      	mov	r0, r6
 800b480:	f7ff ffa1 	bl	800b3c6 <__multadd>
 800b484:	45a1      	cmp	r9, r4
 800b486:	d1f5      	bne.n	800b474 <__s2b+0x38>
 800b488:	eb08 0405 	add.w	r4, r8, r5
 800b48c:	3c08      	subs	r4, #8
 800b48e:	1b2d      	subs	r5, r5, r4
 800b490:	1963      	adds	r3, r4, r5
 800b492:	42bb      	cmp	r3, r7
 800b494:	db07      	blt.n	800b4a6 <__s2b+0x6a>
 800b496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b49a:	0052      	lsls	r2, r2, #1
 800b49c:	3101      	adds	r1, #1
 800b49e:	e7d9      	b.n	800b454 <__s2b+0x18>
 800b4a0:	340a      	adds	r4, #10
 800b4a2:	2509      	movs	r5, #9
 800b4a4:	e7f3      	b.n	800b48e <__s2b+0x52>
 800b4a6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	3b30      	subs	r3, #48	; 0x30
 800b4ae:	220a      	movs	r2, #10
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f7ff ff88 	bl	800b3c6 <__multadd>
 800b4b6:	e7eb      	b.n	800b490 <__s2b+0x54>

0800b4b8 <__hi0bits>:
 800b4b8:	0c02      	lsrs	r2, r0, #16
 800b4ba:	0412      	lsls	r2, r2, #16
 800b4bc:	4603      	mov	r3, r0
 800b4be:	b9b2      	cbnz	r2, 800b4ee <__hi0bits+0x36>
 800b4c0:	0403      	lsls	r3, r0, #16
 800b4c2:	2010      	movs	r0, #16
 800b4c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b4c8:	bf04      	itt	eq
 800b4ca:	021b      	lsleq	r3, r3, #8
 800b4cc:	3008      	addeq	r0, #8
 800b4ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b4d2:	bf04      	itt	eq
 800b4d4:	011b      	lsleq	r3, r3, #4
 800b4d6:	3004      	addeq	r0, #4
 800b4d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b4dc:	bf04      	itt	eq
 800b4de:	009b      	lsleq	r3, r3, #2
 800b4e0:	3002      	addeq	r0, #2
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	db06      	blt.n	800b4f4 <__hi0bits+0x3c>
 800b4e6:	005b      	lsls	r3, r3, #1
 800b4e8:	d503      	bpl.n	800b4f2 <__hi0bits+0x3a>
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	4770      	bx	lr
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	e7e8      	b.n	800b4c4 <__hi0bits+0xc>
 800b4f2:	2020      	movs	r0, #32
 800b4f4:	4770      	bx	lr

0800b4f6 <__lo0bits>:
 800b4f6:	6803      	ldr	r3, [r0, #0]
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	f013 0207 	ands.w	r2, r3, #7
 800b4fe:	d00b      	beq.n	800b518 <__lo0bits+0x22>
 800b500:	07da      	lsls	r2, r3, #31
 800b502:	d423      	bmi.n	800b54c <__lo0bits+0x56>
 800b504:	0798      	lsls	r0, r3, #30
 800b506:	bf49      	itett	mi
 800b508:	085b      	lsrmi	r3, r3, #1
 800b50a:	089b      	lsrpl	r3, r3, #2
 800b50c:	2001      	movmi	r0, #1
 800b50e:	600b      	strmi	r3, [r1, #0]
 800b510:	bf5c      	itt	pl
 800b512:	600b      	strpl	r3, [r1, #0]
 800b514:	2002      	movpl	r0, #2
 800b516:	4770      	bx	lr
 800b518:	b298      	uxth	r0, r3
 800b51a:	b9a8      	cbnz	r0, 800b548 <__lo0bits+0x52>
 800b51c:	2010      	movs	r0, #16
 800b51e:	0c1b      	lsrs	r3, r3, #16
 800b520:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b524:	bf04      	itt	eq
 800b526:	0a1b      	lsreq	r3, r3, #8
 800b528:	3008      	addeq	r0, #8
 800b52a:	071a      	lsls	r2, r3, #28
 800b52c:	bf04      	itt	eq
 800b52e:	091b      	lsreq	r3, r3, #4
 800b530:	3004      	addeq	r0, #4
 800b532:	079a      	lsls	r2, r3, #30
 800b534:	bf04      	itt	eq
 800b536:	089b      	lsreq	r3, r3, #2
 800b538:	3002      	addeq	r0, #2
 800b53a:	07da      	lsls	r2, r3, #31
 800b53c:	d402      	bmi.n	800b544 <__lo0bits+0x4e>
 800b53e:	085b      	lsrs	r3, r3, #1
 800b540:	d006      	beq.n	800b550 <__lo0bits+0x5a>
 800b542:	3001      	adds	r0, #1
 800b544:	600b      	str	r3, [r1, #0]
 800b546:	4770      	bx	lr
 800b548:	4610      	mov	r0, r2
 800b54a:	e7e9      	b.n	800b520 <__lo0bits+0x2a>
 800b54c:	2000      	movs	r0, #0
 800b54e:	4770      	bx	lr
 800b550:	2020      	movs	r0, #32
 800b552:	4770      	bx	lr

0800b554 <__i2b>:
 800b554:	b510      	push	{r4, lr}
 800b556:	460c      	mov	r4, r1
 800b558:	2101      	movs	r1, #1
 800b55a:	f7ff fee9 	bl	800b330 <_Balloc>
 800b55e:	2201      	movs	r2, #1
 800b560:	6144      	str	r4, [r0, #20]
 800b562:	6102      	str	r2, [r0, #16]
 800b564:	bd10      	pop	{r4, pc}

0800b566 <__multiply>:
 800b566:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56a:	4614      	mov	r4, r2
 800b56c:	690a      	ldr	r2, [r1, #16]
 800b56e:	6923      	ldr	r3, [r4, #16]
 800b570:	4688      	mov	r8, r1
 800b572:	429a      	cmp	r2, r3
 800b574:	bfbe      	ittt	lt
 800b576:	460b      	movlt	r3, r1
 800b578:	46a0      	movlt	r8, r4
 800b57a:	461c      	movlt	r4, r3
 800b57c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b580:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b584:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b588:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b58c:	eb07 0609 	add.w	r6, r7, r9
 800b590:	42b3      	cmp	r3, r6
 800b592:	bfb8      	it	lt
 800b594:	3101      	addlt	r1, #1
 800b596:	f7ff fecb 	bl	800b330 <_Balloc>
 800b59a:	f100 0514 	add.w	r5, r0, #20
 800b59e:	462b      	mov	r3, r5
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b5a6:	4573      	cmp	r3, lr
 800b5a8:	d316      	bcc.n	800b5d8 <__multiply+0x72>
 800b5aa:	f104 0214 	add.w	r2, r4, #20
 800b5ae:	f108 0114 	add.w	r1, r8, #20
 800b5b2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b5b6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	9b00      	ldr	r3, [sp, #0]
 800b5be:	9201      	str	r2, [sp, #4]
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d80c      	bhi.n	800b5de <__multiply+0x78>
 800b5c4:	2e00      	cmp	r6, #0
 800b5c6:	dd03      	ble.n	800b5d0 <__multiply+0x6a>
 800b5c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d05d      	beq.n	800b68c <__multiply+0x126>
 800b5d0:	6106      	str	r6, [r0, #16]
 800b5d2:	b003      	add	sp, #12
 800b5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d8:	f843 2b04 	str.w	r2, [r3], #4
 800b5dc:	e7e3      	b.n	800b5a6 <__multiply+0x40>
 800b5de:	f8b2 b000 	ldrh.w	fp, [r2]
 800b5e2:	f1bb 0f00 	cmp.w	fp, #0
 800b5e6:	d023      	beq.n	800b630 <__multiply+0xca>
 800b5e8:	4689      	mov	r9, r1
 800b5ea:	46ac      	mov	ip, r5
 800b5ec:	f04f 0800 	mov.w	r8, #0
 800b5f0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b5f4:	f8dc a000 	ldr.w	sl, [ip]
 800b5f8:	b2a3      	uxth	r3, r4
 800b5fa:	fa1f fa8a 	uxth.w	sl, sl
 800b5fe:	fb0b a303 	mla	r3, fp, r3, sl
 800b602:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b606:	f8dc 4000 	ldr.w	r4, [ip]
 800b60a:	4443      	add	r3, r8
 800b60c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b610:	fb0b 840a 	mla	r4, fp, sl, r8
 800b614:	46e2      	mov	sl, ip
 800b616:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b620:	454f      	cmp	r7, r9
 800b622:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b626:	f84a 3b04 	str.w	r3, [sl], #4
 800b62a:	d82b      	bhi.n	800b684 <__multiply+0x11e>
 800b62c:	f8cc 8004 	str.w	r8, [ip, #4]
 800b630:	9b01      	ldr	r3, [sp, #4]
 800b632:	3204      	adds	r2, #4
 800b634:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b638:	f1ba 0f00 	cmp.w	sl, #0
 800b63c:	d020      	beq.n	800b680 <__multiply+0x11a>
 800b63e:	4689      	mov	r9, r1
 800b640:	46a8      	mov	r8, r5
 800b642:	f04f 0b00 	mov.w	fp, #0
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	f8b9 c000 	ldrh.w	ip, [r9]
 800b64c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b650:	b29b      	uxth	r3, r3
 800b652:	fb0a 440c 	mla	r4, sl, ip, r4
 800b656:	46c4      	mov	ip, r8
 800b658:	445c      	add	r4, fp
 800b65a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b65e:	f84c 3b04 	str.w	r3, [ip], #4
 800b662:	f859 3b04 	ldr.w	r3, [r9], #4
 800b666:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b66a:	0c1b      	lsrs	r3, r3, #16
 800b66c:	fb0a b303 	mla	r3, sl, r3, fp
 800b670:	454f      	cmp	r7, r9
 800b672:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b676:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b67a:	d805      	bhi.n	800b688 <__multiply+0x122>
 800b67c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b680:	3504      	adds	r5, #4
 800b682:	e79b      	b.n	800b5bc <__multiply+0x56>
 800b684:	46d4      	mov	ip, sl
 800b686:	e7b3      	b.n	800b5f0 <__multiply+0x8a>
 800b688:	46e0      	mov	r8, ip
 800b68a:	e7dd      	b.n	800b648 <__multiply+0xe2>
 800b68c:	3e01      	subs	r6, #1
 800b68e:	e799      	b.n	800b5c4 <__multiply+0x5e>

0800b690 <__pow5mult>:
 800b690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b694:	4615      	mov	r5, r2
 800b696:	f012 0203 	ands.w	r2, r2, #3
 800b69a:	4606      	mov	r6, r0
 800b69c:	460f      	mov	r7, r1
 800b69e:	d007      	beq.n	800b6b0 <__pow5mult+0x20>
 800b6a0:	4c21      	ldr	r4, [pc, #132]	; (800b728 <__pow5mult+0x98>)
 800b6a2:	3a01      	subs	r2, #1
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6aa:	f7ff fe8c 	bl	800b3c6 <__multadd>
 800b6ae:	4607      	mov	r7, r0
 800b6b0:	10ad      	asrs	r5, r5, #2
 800b6b2:	d035      	beq.n	800b720 <__pow5mult+0x90>
 800b6b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6b6:	b93c      	cbnz	r4, 800b6c8 <__pow5mult+0x38>
 800b6b8:	2010      	movs	r0, #16
 800b6ba:	f7ff fe0f 	bl	800b2dc <malloc>
 800b6be:	6270      	str	r0, [r6, #36]	; 0x24
 800b6c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6c4:	6004      	str	r4, [r0, #0]
 800b6c6:	60c4      	str	r4, [r0, #12]
 800b6c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6d0:	b94c      	cbnz	r4, 800b6e6 <__pow5mult+0x56>
 800b6d2:	f240 2171 	movw	r1, #625	; 0x271
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f7ff ff3c 	bl	800b554 <__i2b>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4604      	mov	r4, r0
 800b6e0:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6e4:	6003      	str	r3, [r0, #0]
 800b6e6:	f04f 0800 	mov.w	r8, #0
 800b6ea:	07eb      	lsls	r3, r5, #31
 800b6ec:	d50a      	bpl.n	800b704 <__pow5mult+0x74>
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	4622      	mov	r2, r4
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f7ff ff37 	bl	800b566 <__multiply>
 800b6f8:	4681      	mov	r9, r0
 800b6fa:	4639      	mov	r1, r7
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f7ff fe4b 	bl	800b398 <_Bfree>
 800b702:	464f      	mov	r7, r9
 800b704:	106d      	asrs	r5, r5, #1
 800b706:	d00b      	beq.n	800b720 <__pow5mult+0x90>
 800b708:	6820      	ldr	r0, [r4, #0]
 800b70a:	b938      	cbnz	r0, 800b71c <__pow5mult+0x8c>
 800b70c:	4622      	mov	r2, r4
 800b70e:	4621      	mov	r1, r4
 800b710:	4630      	mov	r0, r6
 800b712:	f7ff ff28 	bl	800b566 <__multiply>
 800b716:	6020      	str	r0, [r4, #0]
 800b718:	f8c0 8000 	str.w	r8, [r0]
 800b71c:	4604      	mov	r4, r0
 800b71e:	e7e4      	b.n	800b6ea <__pow5mult+0x5a>
 800b720:	4638      	mov	r0, r7
 800b722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b726:	bf00      	nop
 800b728:	0800c818 	.word	0x0800c818

0800b72c <__lshift>:
 800b72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b730:	460c      	mov	r4, r1
 800b732:	4607      	mov	r7, r0
 800b734:	4616      	mov	r6, r2
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b73c:	eb0a 0903 	add.w	r9, sl, r3
 800b740:	6849      	ldr	r1, [r1, #4]
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	f109 0501 	add.w	r5, r9, #1
 800b748:	42ab      	cmp	r3, r5
 800b74a:	db32      	blt.n	800b7b2 <__lshift+0x86>
 800b74c:	4638      	mov	r0, r7
 800b74e:	f7ff fdef 	bl	800b330 <_Balloc>
 800b752:	2300      	movs	r3, #0
 800b754:	4680      	mov	r8, r0
 800b756:	461a      	mov	r2, r3
 800b758:	f100 0114 	add.w	r1, r0, #20
 800b75c:	4553      	cmp	r3, sl
 800b75e:	db2b      	blt.n	800b7b8 <__lshift+0x8c>
 800b760:	6920      	ldr	r0, [r4, #16]
 800b762:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b766:	f104 0314 	add.w	r3, r4, #20
 800b76a:	f016 021f 	ands.w	r2, r6, #31
 800b76e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b772:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b776:	d025      	beq.n	800b7c4 <__lshift+0x98>
 800b778:	2000      	movs	r0, #0
 800b77a:	f1c2 0e20 	rsb	lr, r2, #32
 800b77e:	468a      	mov	sl, r1
 800b780:	681e      	ldr	r6, [r3, #0]
 800b782:	4096      	lsls	r6, r2
 800b784:	4330      	orrs	r0, r6
 800b786:	f84a 0b04 	str.w	r0, [sl], #4
 800b78a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b78e:	459c      	cmp	ip, r3
 800b790:	fa20 f00e 	lsr.w	r0, r0, lr
 800b794:	d814      	bhi.n	800b7c0 <__lshift+0x94>
 800b796:	6048      	str	r0, [r1, #4]
 800b798:	b108      	cbz	r0, 800b79e <__lshift+0x72>
 800b79a:	f109 0502 	add.w	r5, r9, #2
 800b79e:	3d01      	subs	r5, #1
 800b7a0:	4638      	mov	r0, r7
 800b7a2:	f8c8 5010 	str.w	r5, [r8, #16]
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	f7ff fdf6 	bl	800b398 <_Bfree>
 800b7ac:	4640      	mov	r0, r8
 800b7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b2:	3101      	adds	r1, #1
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	e7c7      	b.n	800b748 <__lshift+0x1c>
 800b7b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	e7cd      	b.n	800b75c <__lshift+0x30>
 800b7c0:	4651      	mov	r1, sl
 800b7c2:	e7dc      	b.n	800b77e <__lshift+0x52>
 800b7c4:	3904      	subs	r1, #4
 800b7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ca:	459c      	cmp	ip, r3
 800b7cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7d0:	d8f9      	bhi.n	800b7c6 <__lshift+0x9a>
 800b7d2:	e7e4      	b.n	800b79e <__lshift+0x72>

0800b7d4 <__mcmp>:
 800b7d4:	6903      	ldr	r3, [r0, #16]
 800b7d6:	690a      	ldr	r2, [r1, #16]
 800b7d8:	b530      	push	{r4, r5, lr}
 800b7da:	1a9b      	subs	r3, r3, r2
 800b7dc:	d10c      	bne.n	800b7f8 <__mcmp+0x24>
 800b7de:	0092      	lsls	r2, r2, #2
 800b7e0:	3014      	adds	r0, #20
 800b7e2:	3114      	adds	r1, #20
 800b7e4:	1884      	adds	r4, r0, r2
 800b7e6:	4411      	add	r1, r2
 800b7e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b7ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b7f0:	4295      	cmp	r5, r2
 800b7f2:	d003      	beq.n	800b7fc <__mcmp+0x28>
 800b7f4:	d305      	bcc.n	800b802 <__mcmp+0x2e>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	bd30      	pop	{r4, r5, pc}
 800b7fc:	42a0      	cmp	r0, r4
 800b7fe:	d3f3      	bcc.n	800b7e8 <__mcmp+0x14>
 800b800:	e7fa      	b.n	800b7f8 <__mcmp+0x24>
 800b802:	f04f 33ff 	mov.w	r3, #4294967295
 800b806:	e7f7      	b.n	800b7f8 <__mcmp+0x24>

0800b808 <__mdiff>:
 800b808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b80c:	460d      	mov	r5, r1
 800b80e:	4607      	mov	r7, r0
 800b810:	4611      	mov	r1, r2
 800b812:	4628      	mov	r0, r5
 800b814:	4614      	mov	r4, r2
 800b816:	f7ff ffdd 	bl	800b7d4 <__mcmp>
 800b81a:	1e06      	subs	r6, r0, #0
 800b81c:	d108      	bne.n	800b830 <__mdiff+0x28>
 800b81e:	4631      	mov	r1, r6
 800b820:	4638      	mov	r0, r7
 800b822:	f7ff fd85 	bl	800b330 <_Balloc>
 800b826:	2301      	movs	r3, #1
 800b828:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b830:	bfa4      	itt	ge
 800b832:	4623      	movge	r3, r4
 800b834:	462c      	movge	r4, r5
 800b836:	4638      	mov	r0, r7
 800b838:	6861      	ldr	r1, [r4, #4]
 800b83a:	bfa6      	itte	ge
 800b83c:	461d      	movge	r5, r3
 800b83e:	2600      	movge	r6, #0
 800b840:	2601      	movlt	r6, #1
 800b842:	f7ff fd75 	bl	800b330 <_Balloc>
 800b846:	f04f 0e00 	mov.w	lr, #0
 800b84a:	60c6      	str	r6, [r0, #12]
 800b84c:	692b      	ldr	r3, [r5, #16]
 800b84e:	6926      	ldr	r6, [r4, #16]
 800b850:	f104 0214 	add.w	r2, r4, #20
 800b854:	f105 0914 	add.w	r9, r5, #20
 800b858:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b85c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b860:	f100 0114 	add.w	r1, r0, #20
 800b864:	f852 ab04 	ldr.w	sl, [r2], #4
 800b868:	f859 5b04 	ldr.w	r5, [r9], #4
 800b86c:	fa1f f38a 	uxth.w	r3, sl
 800b870:	4473      	add	r3, lr
 800b872:	b2ac      	uxth	r4, r5
 800b874:	1b1b      	subs	r3, r3, r4
 800b876:	0c2c      	lsrs	r4, r5, #16
 800b878:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b87c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b880:	b29b      	uxth	r3, r3
 800b882:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b886:	45c8      	cmp	r8, r9
 800b888:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b88c:	4694      	mov	ip, r2
 800b88e:	f841 4b04 	str.w	r4, [r1], #4
 800b892:	d8e7      	bhi.n	800b864 <__mdiff+0x5c>
 800b894:	45bc      	cmp	ip, r7
 800b896:	d304      	bcc.n	800b8a2 <__mdiff+0x9a>
 800b898:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b89c:	b183      	cbz	r3, 800b8c0 <__mdiff+0xb8>
 800b89e:	6106      	str	r6, [r0, #16]
 800b8a0:	e7c4      	b.n	800b82c <__mdiff+0x24>
 800b8a2:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b8a6:	b2a2      	uxth	r2, r4
 800b8a8:	4472      	add	r2, lr
 800b8aa:	1413      	asrs	r3, r2, #16
 800b8ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b8b0:	b292      	uxth	r2, r2
 800b8b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b8b6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b8ba:	f841 2b04 	str.w	r2, [r1], #4
 800b8be:	e7e9      	b.n	800b894 <__mdiff+0x8c>
 800b8c0:	3e01      	subs	r6, #1
 800b8c2:	e7e9      	b.n	800b898 <__mdiff+0x90>

0800b8c4 <__ulp>:
 800b8c4:	4b10      	ldr	r3, [pc, #64]	; (800b908 <__ulp+0x44>)
 800b8c6:	400b      	ands	r3, r1
 800b8c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	dd02      	ble.n	800b8d6 <__ulp+0x12>
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	4770      	bx	lr
 800b8d6:	425b      	negs	r3, r3
 800b8d8:	151b      	asrs	r3, r3, #20
 800b8da:	2b13      	cmp	r3, #19
 800b8dc:	f04f 0000 	mov.w	r0, #0
 800b8e0:	f04f 0100 	mov.w	r1, #0
 800b8e4:	dc04      	bgt.n	800b8f0 <__ulp+0x2c>
 800b8e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b8ea:	fa42 f103 	asr.w	r1, r2, r3
 800b8ee:	4770      	bx	lr
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	3b14      	subs	r3, #20
 800b8f4:	2b1e      	cmp	r3, #30
 800b8f6:	bfce      	itee	gt
 800b8f8:	4613      	movgt	r3, r2
 800b8fa:	f1c3 031f 	rsble	r3, r3, #31
 800b8fe:	fa02 f303 	lslle.w	r3, r2, r3
 800b902:	4618      	mov	r0, r3
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	7ff00000 	.word	0x7ff00000

0800b90c <__b2d>:
 800b90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b910:	6907      	ldr	r7, [r0, #16]
 800b912:	f100 0914 	add.w	r9, r0, #20
 800b916:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b91a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b91e:	f1a7 0804 	sub.w	r8, r7, #4
 800b922:	4630      	mov	r0, r6
 800b924:	f7ff fdc8 	bl	800b4b8 <__hi0bits>
 800b928:	f1c0 0320 	rsb	r3, r0, #32
 800b92c:	280a      	cmp	r0, #10
 800b92e:	600b      	str	r3, [r1, #0]
 800b930:	491e      	ldr	r1, [pc, #120]	; (800b9ac <__b2d+0xa0>)
 800b932:	dc17      	bgt.n	800b964 <__b2d+0x58>
 800b934:	45c1      	cmp	r9, r8
 800b936:	bf28      	it	cs
 800b938:	2200      	movcs	r2, #0
 800b93a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b93e:	fa26 f30c 	lsr.w	r3, r6, ip
 800b942:	bf38      	it	cc
 800b944:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b948:	ea43 0501 	orr.w	r5, r3, r1
 800b94c:	f100 0315 	add.w	r3, r0, #21
 800b950:	fa06 f303 	lsl.w	r3, r6, r3
 800b954:	fa22 f20c 	lsr.w	r2, r2, ip
 800b958:	ea43 0402 	orr.w	r4, r3, r2
 800b95c:	4620      	mov	r0, r4
 800b95e:	4629      	mov	r1, r5
 800b960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b964:	45c1      	cmp	r9, r8
 800b966:	bf3a      	itte	cc
 800b968:	f1a7 0808 	subcc.w	r8, r7, #8
 800b96c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b970:	2200      	movcs	r2, #0
 800b972:	f1b0 030b 	subs.w	r3, r0, #11
 800b976:	d015      	beq.n	800b9a4 <__b2d+0x98>
 800b978:	409e      	lsls	r6, r3
 800b97a:	f1c3 0720 	rsb	r7, r3, #32
 800b97e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800b982:	fa22 f107 	lsr.w	r1, r2, r7
 800b986:	45c8      	cmp	r8, r9
 800b988:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800b98c:	ea46 0501 	orr.w	r5, r6, r1
 800b990:	bf94      	ite	ls
 800b992:	2100      	movls	r1, #0
 800b994:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b998:	fa02 f003 	lsl.w	r0, r2, r3
 800b99c:	40f9      	lsrs	r1, r7
 800b99e:	ea40 0401 	orr.w	r4, r0, r1
 800b9a2:	e7db      	b.n	800b95c <__b2d+0x50>
 800b9a4:	ea46 0501 	orr.w	r5, r6, r1
 800b9a8:	4614      	mov	r4, r2
 800b9aa:	e7d7      	b.n	800b95c <__b2d+0x50>
 800b9ac:	3ff00000 	.word	0x3ff00000

0800b9b0 <__d2b>:
 800b9b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b9b4:	461c      	mov	r4, r3
 800b9b6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	4690      	mov	r8, r2
 800b9be:	f7ff fcb7 	bl	800b330 <_Balloc>
 800b9c2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b9c6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b9ca:	4607      	mov	r7, r0
 800b9cc:	bb34      	cbnz	r4, 800ba1c <__d2b+0x6c>
 800b9ce:	9201      	str	r2, [sp, #4]
 800b9d0:	f1b8 0200 	subs.w	r2, r8, #0
 800b9d4:	d027      	beq.n	800ba26 <__d2b+0x76>
 800b9d6:	a802      	add	r0, sp, #8
 800b9d8:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b9dc:	f7ff fd8b 	bl	800b4f6 <__lo0bits>
 800b9e0:	9900      	ldr	r1, [sp, #0]
 800b9e2:	b1f0      	cbz	r0, 800ba22 <__d2b+0x72>
 800b9e4:	9a01      	ldr	r2, [sp, #4]
 800b9e6:	f1c0 0320 	rsb	r3, r0, #32
 800b9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ee:	430b      	orrs	r3, r1
 800b9f0:	40c2      	lsrs	r2, r0
 800b9f2:	617b      	str	r3, [r7, #20]
 800b9f4:	9201      	str	r2, [sp, #4]
 800b9f6:	9b01      	ldr	r3, [sp, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	bf14      	ite	ne
 800b9fc:	2102      	movne	r1, #2
 800b9fe:	2101      	moveq	r1, #1
 800ba00:	61bb      	str	r3, [r7, #24]
 800ba02:	6139      	str	r1, [r7, #16]
 800ba04:	b1c4      	cbz	r4, 800ba38 <__d2b+0x88>
 800ba06:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ba0a:	4404      	add	r4, r0
 800ba0c:	6034      	str	r4, [r6, #0]
 800ba0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba12:	6028      	str	r0, [r5, #0]
 800ba14:	4638      	mov	r0, r7
 800ba16:	b002      	add	sp, #8
 800ba18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ba20:	e7d5      	b.n	800b9ce <__d2b+0x1e>
 800ba22:	6179      	str	r1, [r7, #20]
 800ba24:	e7e7      	b.n	800b9f6 <__d2b+0x46>
 800ba26:	a801      	add	r0, sp, #4
 800ba28:	f7ff fd65 	bl	800b4f6 <__lo0bits>
 800ba2c:	2101      	movs	r1, #1
 800ba2e:	9b01      	ldr	r3, [sp, #4]
 800ba30:	6139      	str	r1, [r7, #16]
 800ba32:	617b      	str	r3, [r7, #20]
 800ba34:	3020      	adds	r0, #32
 800ba36:	e7e5      	b.n	800ba04 <__d2b+0x54>
 800ba38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba3c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ba40:	6030      	str	r0, [r6, #0]
 800ba42:	6918      	ldr	r0, [r3, #16]
 800ba44:	f7ff fd38 	bl	800b4b8 <__hi0bits>
 800ba48:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ba4c:	e7e1      	b.n	800ba12 <__d2b+0x62>

0800ba4e <__ratio>:
 800ba4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba52:	4688      	mov	r8, r1
 800ba54:	4669      	mov	r1, sp
 800ba56:	4681      	mov	r9, r0
 800ba58:	f7ff ff58 	bl	800b90c <__b2d>
 800ba5c:	468b      	mov	fp, r1
 800ba5e:	4606      	mov	r6, r0
 800ba60:	460f      	mov	r7, r1
 800ba62:	4640      	mov	r0, r8
 800ba64:	a901      	add	r1, sp, #4
 800ba66:	f7ff ff51 	bl	800b90c <__b2d>
 800ba6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ba72:	460d      	mov	r5, r1
 800ba74:	eba3 0c02 	sub.w	ip, r3, r2
 800ba78:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba7c:	1a9b      	subs	r3, r3, r2
 800ba7e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	bfd5      	itete	le
 800ba86:	460a      	movle	r2, r1
 800ba88:	463a      	movgt	r2, r7
 800ba8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba8e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ba92:	bfd8      	it	le
 800ba94:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800ba98:	462b      	mov	r3, r5
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	4659      	mov	r1, fp
 800ba9e:	4630      	mov	r0, r6
 800baa0:	f7f4 fe44 	bl	800072c <__aeabi_ddiv>
 800baa4:	b003      	add	sp, #12
 800baa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800baaa <__copybits>:
 800baaa:	3901      	subs	r1, #1
 800baac:	b510      	push	{r4, lr}
 800baae:	1149      	asrs	r1, r1, #5
 800bab0:	6914      	ldr	r4, [r2, #16]
 800bab2:	3101      	adds	r1, #1
 800bab4:	f102 0314 	add.w	r3, r2, #20
 800bab8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800babc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bac0:	42a3      	cmp	r3, r4
 800bac2:	4602      	mov	r2, r0
 800bac4:	d303      	bcc.n	800bace <__copybits+0x24>
 800bac6:	2300      	movs	r3, #0
 800bac8:	428a      	cmp	r2, r1
 800baca:	d305      	bcc.n	800bad8 <__copybits+0x2e>
 800bacc:	bd10      	pop	{r4, pc}
 800bace:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad2:	f840 2b04 	str.w	r2, [r0], #4
 800bad6:	e7f3      	b.n	800bac0 <__copybits+0x16>
 800bad8:	f842 3b04 	str.w	r3, [r2], #4
 800badc:	e7f4      	b.n	800bac8 <__copybits+0x1e>

0800bade <__any_on>:
 800bade:	f100 0214 	add.w	r2, r0, #20
 800bae2:	6900      	ldr	r0, [r0, #16]
 800bae4:	114b      	asrs	r3, r1, #5
 800bae6:	4298      	cmp	r0, r3
 800bae8:	b510      	push	{r4, lr}
 800baea:	db11      	blt.n	800bb10 <__any_on+0x32>
 800baec:	dd0a      	ble.n	800bb04 <__any_on+0x26>
 800baee:	f011 011f 	ands.w	r1, r1, #31
 800baf2:	d007      	beq.n	800bb04 <__any_on+0x26>
 800baf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800baf8:	fa24 f001 	lsr.w	r0, r4, r1
 800bafc:	fa00 f101 	lsl.w	r1, r0, r1
 800bb00:	428c      	cmp	r4, r1
 800bb02:	d10b      	bne.n	800bb1c <__any_on+0x3e>
 800bb04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d803      	bhi.n	800bb14 <__any_on+0x36>
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	bd10      	pop	{r4, pc}
 800bb10:	4603      	mov	r3, r0
 800bb12:	e7f7      	b.n	800bb04 <__any_on+0x26>
 800bb14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb18:	2900      	cmp	r1, #0
 800bb1a:	d0f5      	beq.n	800bb08 <__any_on+0x2a>
 800bb1c:	2001      	movs	r0, #1
 800bb1e:	e7f6      	b.n	800bb0e <__any_on+0x30>

0800bb20 <_free_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4605      	mov	r5, r0
 800bb24:	2900      	cmp	r1, #0
 800bb26:	d043      	beq.n	800bbb0 <_free_r+0x90>
 800bb28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb2c:	1f0c      	subs	r4, r1, #4
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	bfb8      	it	lt
 800bb32:	18e4      	addlt	r4, r4, r3
 800bb34:	f7ff fbfa 	bl	800b32c <__malloc_lock>
 800bb38:	4a1e      	ldr	r2, [pc, #120]	; (800bbb4 <_free_r+0x94>)
 800bb3a:	6813      	ldr	r3, [r2, #0]
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	b933      	cbnz	r3, 800bb4e <_free_r+0x2e>
 800bb40:	6063      	str	r3, [r4, #4]
 800bb42:	6014      	str	r4, [r2, #0]
 800bb44:	4628      	mov	r0, r5
 800bb46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb4a:	f7ff bbf0 	b.w	800b32e <__malloc_unlock>
 800bb4e:	42a3      	cmp	r3, r4
 800bb50:	d90b      	bls.n	800bb6a <_free_r+0x4a>
 800bb52:	6821      	ldr	r1, [r4, #0]
 800bb54:	1862      	adds	r2, r4, r1
 800bb56:	4293      	cmp	r3, r2
 800bb58:	bf01      	itttt	eq
 800bb5a:	681a      	ldreq	r2, [r3, #0]
 800bb5c:	685b      	ldreq	r3, [r3, #4]
 800bb5e:	1852      	addeq	r2, r2, r1
 800bb60:	6022      	streq	r2, [r4, #0]
 800bb62:	6063      	str	r3, [r4, #4]
 800bb64:	6004      	str	r4, [r0, #0]
 800bb66:	e7ed      	b.n	800bb44 <_free_r+0x24>
 800bb68:	4613      	mov	r3, r2
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	b10a      	cbz	r2, 800bb72 <_free_r+0x52>
 800bb6e:	42a2      	cmp	r2, r4
 800bb70:	d9fa      	bls.n	800bb68 <_free_r+0x48>
 800bb72:	6819      	ldr	r1, [r3, #0]
 800bb74:	1858      	adds	r0, r3, r1
 800bb76:	42a0      	cmp	r0, r4
 800bb78:	d10b      	bne.n	800bb92 <_free_r+0x72>
 800bb7a:	6820      	ldr	r0, [r4, #0]
 800bb7c:	4401      	add	r1, r0
 800bb7e:	1858      	adds	r0, r3, r1
 800bb80:	4282      	cmp	r2, r0
 800bb82:	6019      	str	r1, [r3, #0]
 800bb84:	d1de      	bne.n	800bb44 <_free_r+0x24>
 800bb86:	6810      	ldr	r0, [r2, #0]
 800bb88:	6852      	ldr	r2, [r2, #4]
 800bb8a:	4401      	add	r1, r0
 800bb8c:	6019      	str	r1, [r3, #0]
 800bb8e:	605a      	str	r2, [r3, #4]
 800bb90:	e7d8      	b.n	800bb44 <_free_r+0x24>
 800bb92:	d902      	bls.n	800bb9a <_free_r+0x7a>
 800bb94:	230c      	movs	r3, #12
 800bb96:	602b      	str	r3, [r5, #0]
 800bb98:	e7d4      	b.n	800bb44 <_free_r+0x24>
 800bb9a:	6820      	ldr	r0, [r4, #0]
 800bb9c:	1821      	adds	r1, r4, r0
 800bb9e:	428a      	cmp	r2, r1
 800bba0:	bf01      	itttt	eq
 800bba2:	6811      	ldreq	r1, [r2, #0]
 800bba4:	6852      	ldreq	r2, [r2, #4]
 800bba6:	1809      	addeq	r1, r1, r0
 800bba8:	6021      	streq	r1, [r4, #0]
 800bbaa:	6062      	str	r2, [r4, #4]
 800bbac:	605c      	str	r4, [r3, #4]
 800bbae:	e7c9      	b.n	800bb44 <_free_r+0x24>
 800bbb0:	bd38      	pop	{r3, r4, r5, pc}
 800bbb2:	bf00      	nop
 800bbb4:	20000a50 	.word	0x20000a50

0800bbb8 <__ssputs_r>:
 800bbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbbc:	688e      	ldr	r6, [r1, #8]
 800bbbe:	4682      	mov	sl, r0
 800bbc0:	429e      	cmp	r6, r3
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	4690      	mov	r8, r2
 800bbc6:	4699      	mov	r9, r3
 800bbc8:	d837      	bhi.n	800bc3a <__ssputs_r+0x82>
 800bbca:	898a      	ldrh	r2, [r1, #12]
 800bbcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbd0:	d031      	beq.n	800bc36 <__ssputs_r+0x7e>
 800bbd2:	2302      	movs	r3, #2
 800bbd4:	6825      	ldr	r5, [r4, #0]
 800bbd6:	6909      	ldr	r1, [r1, #16]
 800bbd8:	1a6f      	subs	r7, r5, r1
 800bbda:	6965      	ldr	r5, [r4, #20]
 800bbdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbe0:	fb95 f5f3 	sdiv	r5, r5, r3
 800bbe4:	f109 0301 	add.w	r3, r9, #1
 800bbe8:	443b      	add	r3, r7
 800bbea:	429d      	cmp	r5, r3
 800bbec:	bf38      	it	cc
 800bbee:	461d      	movcc	r5, r3
 800bbf0:	0553      	lsls	r3, r2, #21
 800bbf2:	d530      	bpl.n	800bc56 <__ssputs_r+0x9e>
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	f7fc f95b 	bl	8007eb0 <_malloc_r>
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	b950      	cbnz	r0, 800bc14 <__ssputs_r+0x5c>
 800bbfe:	230c      	movs	r3, #12
 800bc00:	f04f 30ff 	mov.w	r0, #4294967295
 800bc04:	f8ca 3000 	str.w	r3, [sl]
 800bc08:	89a3      	ldrh	r3, [r4, #12]
 800bc0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc14:	463a      	mov	r2, r7
 800bc16:	6921      	ldr	r1, [r4, #16]
 800bc18:	f7fc f910 	bl	8007e3c <memcpy>
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	6126      	str	r6, [r4, #16]
 800bc2a:	443e      	add	r6, r7
 800bc2c:	6026      	str	r6, [r4, #0]
 800bc2e:	464e      	mov	r6, r9
 800bc30:	6165      	str	r5, [r4, #20]
 800bc32:	1bed      	subs	r5, r5, r7
 800bc34:	60a5      	str	r5, [r4, #8]
 800bc36:	454e      	cmp	r6, r9
 800bc38:	d900      	bls.n	800bc3c <__ssputs_r+0x84>
 800bc3a:	464e      	mov	r6, r9
 800bc3c:	4632      	mov	r2, r6
 800bc3e:	4641      	mov	r1, r8
 800bc40:	6820      	ldr	r0, [r4, #0]
 800bc42:	f7fc f906 	bl	8007e52 <memmove>
 800bc46:	68a3      	ldr	r3, [r4, #8]
 800bc48:	2000      	movs	r0, #0
 800bc4a:	1b9b      	subs	r3, r3, r6
 800bc4c:	60a3      	str	r3, [r4, #8]
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	441e      	add	r6, r3
 800bc52:	6026      	str	r6, [r4, #0]
 800bc54:	e7dc      	b.n	800bc10 <__ssputs_r+0x58>
 800bc56:	462a      	mov	r2, r5
 800bc58:	f000 faf6 	bl	800c248 <_realloc_r>
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d1e2      	bne.n	800bc28 <__ssputs_r+0x70>
 800bc62:	6921      	ldr	r1, [r4, #16]
 800bc64:	4650      	mov	r0, sl
 800bc66:	f7ff ff5b 	bl	800bb20 <_free_r>
 800bc6a:	e7c8      	b.n	800bbfe <__ssputs_r+0x46>

0800bc6c <_svfiprintf_r>:
 800bc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	461d      	mov	r5, r3
 800bc72:	898b      	ldrh	r3, [r1, #12]
 800bc74:	b09d      	sub	sp, #116	; 0x74
 800bc76:	061f      	lsls	r7, r3, #24
 800bc78:	4680      	mov	r8, r0
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	4616      	mov	r6, r2
 800bc7e:	d50f      	bpl.n	800bca0 <_svfiprintf_r+0x34>
 800bc80:	690b      	ldr	r3, [r1, #16]
 800bc82:	b96b      	cbnz	r3, 800bca0 <_svfiprintf_r+0x34>
 800bc84:	2140      	movs	r1, #64	; 0x40
 800bc86:	f7fc f913 	bl	8007eb0 <_malloc_r>
 800bc8a:	6020      	str	r0, [r4, #0]
 800bc8c:	6120      	str	r0, [r4, #16]
 800bc8e:	b928      	cbnz	r0, 800bc9c <_svfiprintf_r+0x30>
 800bc90:	230c      	movs	r3, #12
 800bc92:	f8c8 3000 	str.w	r3, [r8]
 800bc96:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9a:	e0c8      	b.n	800be2e <_svfiprintf_r+0x1c2>
 800bc9c:	2340      	movs	r3, #64	; 0x40
 800bc9e:	6163      	str	r3, [r4, #20]
 800bca0:	2300      	movs	r3, #0
 800bca2:	9309      	str	r3, [sp, #36]	; 0x24
 800bca4:	2320      	movs	r3, #32
 800bca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcaa:	2330      	movs	r3, #48	; 0x30
 800bcac:	f04f 0b01 	mov.w	fp, #1
 800bcb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcb4:	9503      	str	r5, [sp, #12]
 800bcb6:	4637      	mov	r7, r6
 800bcb8:	463d      	mov	r5, r7
 800bcba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bcbe:	b10b      	cbz	r3, 800bcc4 <_svfiprintf_r+0x58>
 800bcc0:	2b25      	cmp	r3, #37	; 0x25
 800bcc2:	d13e      	bne.n	800bd42 <_svfiprintf_r+0xd6>
 800bcc4:	ebb7 0a06 	subs.w	sl, r7, r6
 800bcc8:	d00b      	beq.n	800bce2 <_svfiprintf_r+0x76>
 800bcca:	4653      	mov	r3, sl
 800bccc:	4632      	mov	r2, r6
 800bcce:	4621      	mov	r1, r4
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	f7ff ff71 	bl	800bbb8 <__ssputs_r>
 800bcd6:	3001      	adds	r0, #1
 800bcd8:	f000 80a4 	beq.w	800be24 <_svfiprintf_r+0x1b8>
 800bcdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcde:	4453      	add	r3, sl
 800bce0:	9309      	str	r3, [sp, #36]	; 0x24
 800bce2:	783b      	ldrb	r3, [r7, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 809d 	beq.w	800be24 <_svfiprintf_r+0x1b8>
 800bcea:	2300      	movs	r3, #0
 800bcec:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcf4:	9304      	str	r3, [sp, #16]
 800bcf6:	9307      	str	r3, [sp, #28]
 800bcf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcfc:	931a      	str	r3, [sp, #104]	; 0x68
 800bcfe:	462f      	mov	r7, r5
 800bd00:	2205      	movs	r2, #5
 800bd02:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bd06:	4850      	ldr	r0, [pc, #320]	; (800be48 <_svfiprintf_r+0x1dc>)
 800bd08:	f7ff fb02 	bl	800b310 <memchr>
 800bd0c:	9b04      	ldr	r3, [sp, #16]
 800bd0e:	b9d0      	cbnz	r0, 800bd46 <_svfiprintf_r+0xda>
 800bd10:	06d9      	lsls	r1, r3, #27
 800bd12:	bf44      	itt	mi
 800bd14:	2220      	movmi	r2, #32
 800bd16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd1a:	071a      	lsls	r2, r3, #28
 800bd1c:	bf44      	itt	mi
 800bd1e:	222b      	movmi	r2, #43	; 0x2b
 800bd20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd24:	782a      	ldrb	r2, [r5, #0]
 800bd26:	2a2a      	cmp	r2, #42	; 0x2a
 800bd28:	d015      	beq.n	800bd56 <_svfiprintf_r+0xea>
 800bd2a:	462f      	mov	r7, r5
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	250a      	movs	r5, #10
 800bd30:	9a07      	ldr	r2, [sp, #28]
 800bd32:	4639      	mov	r1, r7
 800bd34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd38:	3b30      	subs	r3, #48	; 0x30
 800bd3a:	2b09      	cmp	r3, #9
 800bd3c:	d94d      	bls.n	800bdda <_svfiprintf_r+0x16e>
 800bd3e:	b1b8      	cbz	r0, 800bd70 <_svfiprintf_r+0x104>
 800bd40:	e00f      	b.n	800bd62 <_svfiprintf_r+0xf6>
 800bd42:	462f      	mov	r7, r5
 800bd44:	e7b8      	b.n	800bcb8 <_svfiprintf_r+0x4c>
 800bd46:	4a40      	ldr	r2, [pc, #256]	; (800be48 <_svfiprintf_r+0x1dc>)
 800bd48:	463d      	mov	r5, r7
 800bd4a:	1a80      	subs	r0, r0, r2
 800bd4c:	fa0b f000 	lsl.w	r0, fp, r0
 800bd50:	4318      	orrs	r0, r3
 800bd52:	9004      	str	r0, [sp, #16]
 800bd54:	e7d3      	b.n	800bcfe <_svfiprintf_r+0x92>
 800bd56:	9a03      	ldr	r2, [sp, #12]
 800bd58:	1d11      	adds	r1, r2, #4
 800bd5a:	6812      	ldr	r2, [r2, #0]
 800bd5c:	9103      	str	r1, [sp, #12]
 800bd5e:	2a00      	cmp	r2, #0
 800bd60:	db01      	blt.n	800bd66 <_svfiprintf_r+0xfa>
 800bd62:	9207      	str	r2, [sp, #28]
 800bd64:	e004      	b.n	800bd70 <_svfiprintf_r+0x104>
 800bd66:	4252      	negs	r2, r2
 800bd68:	f043 0302 	orr.w	r3, r3, #2
 800bd6c:	9207      	str	r2, [sp, #28]
 800bd6e:	9304      	str	r3, [sp, #16]
 800bd70:	783b      	ldrb	r3, [r7, #0]
 800bd72:	2b2e      	cmp	r3, #46	; 0x2e
 800bd74:	d10c      	bne.n	800bd90 <_svfiprintf_r+0x124>
 800bd76:	787b      	ldrb	r3, [r7, #1]
 800bd78:	2b2a      	cmp	r3, #42	; 0x2a
 800bd7a:	d133      	bne.n	800bde4 <_svfiprintf_r+0x178>
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	3702      	adds	r7, #2
 800bd80:	1d1a      	adds	r2, r3, #4
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	9203      	str	r2, [sp, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	bfb8      	it	lt
 800bd8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd8e:	9305      	str	r3, [sp, #20]
 800bd90:	4d2e      	ldr	r5, [pc, #184]	; (800be4c <_svfiprintf_r+0x1e0>)
 800bd92:	2203      	movs	r2, #3
 800bd94:	7839      	ldrb	r1, [r7, #0]
 800bd96:	4628      	mov	r0, r5
 800bd98:	f7ff faba 	bl	800b310 <memchr>
 800bd9c:	b138      	cbz	r0, 800bdae <_svfiprintf_r+0x142>
 800bd9e:	2340      	movs	r3, #64	; 0x40
 800bda0:	1b40      	subs	r0, r0, r5
 800bda2:	fa03 f000 	lsl.w	r0, r3, r0
 800bda6:	9b04      	ldr	r3, [sp, #16]
 800bda8:	3701      	adds	r7, #1
 800bdaa:	4303      	orrs	r3, r0
 800bdac:	9304      	str	r3, [sp, #16]
 800bdae:	7839      	ldrb	r1, [r7, #0]
 800bdb0:	2206      	movs	r2, #6
 800bdb2:	4827      	ldr	r0, [pc, #156]	; (800be50 <_svfiprintf_r+0x1e4>)
 800bdb4:	1c7e      	adds	r6, r7, #1
 800bdb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdba:	f7ff faa9 	bl	800b310 <memchr>
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	d038      	beq.n	800be34 <_svfiprintf_r+0x1c8>
 800bdc2:	4b24      	ldr	r3, [pc, #144]	; (800be54 <_svfiprintf_r+0x1e8>)
 800bdc4:	bb13      	cbnz	r3, 800be0c <_svfiprintf_r+0x1a0>
 800bdc6:	9b03      	ldr	r3, [sp, #12]
 800bdc8:	3307      	adds	r3, #7
 800bdca:	f023 0307 	bic.w	r3, r3, #7
 800bdce:	3308      	adds	r3, #8
 800bdd0:	9303      	str	r3, [sp, #12]
 800bdd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd4:	444b      	add	r3, r9
 800bdd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd8:	e76d      	b.n	800bcb6 <_svfiprintf_r+0x4a>
 800bdda:	fb05 3202 	mla	r2, r5, r2, r3
 800bdde:	2001      	movs	r0, #1
 800bde0:	460f      	mov	r7, r1
 800bde2:	e7a6      	b.n	800bd32 <_svfiprintf_r+0xc6>
 800bde4:	2300      	movs	r3, #0
 800bde6:	250a      	movs	r5, #10
 800bde8:	4619      	mov	r1, r3
 800bdea:	3701      	adds	r7, #1
 800bdec:	9305      	str	r3, [sp, #20]
 800bdee:	4638      	mov	r0, r7
 800bdf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdf4:	3a30      	subs	r2, #48	; 0x30
 800bdf6:	2a09      	cmp	r2, #9
 800bdf8:	d903      	bls.n	800be02 <_svfiprintf_r+0x196>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0c8      	beq.n	800bd90 <_svfiprintf_r+0x124>
 800bdfe:	9105      	str	r1, [sp, #20]
 800be00:	e7c6      	b.n	800bd90 <_svfiprintf_r+0x124>
 800be02:	fb05 2101 	mla	r1, r5, r1, r2
 800be06:	2301      	movs	r3, #1
 800be08:	4607      	mov	r7, r0
 800be0a:	e7f0      	b.n	800bdee <_svfiprintf_r+0x182>
 800be0c:	ab03      	add	r3, sp, #12
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	4622      	mov	r2, r4
 800be12:	4b11      	ldr	r3, [pc, #68]	; (800be58 <_svfiprintf_r+0x1ec>)
 800be14:	a904      	add	r1, sp, #16
 800be16:	4640      	mov	r0, r8
 800be18:	f7fc f936 	bl	8008088 <_printf_float>
 800be1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800be20:	4681      	mov	r9, r0
 800be22:	d1d6      	bne.n	800bdd2 <_svfiprintf_r+0x166>
 800be24:	89a3      	ldrh	r3, [r4, #12]
 800be26:	065b      	lsls	r3, r3, #25
 800be28:	f53f af35 	bmi.w	800bc96 <_svfiprintf_r+0x2a>
 800be2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be2e:	b01d      	add	sp, #116	; 0x74
 800be30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be34:	ab03      	add	r3, sp, #12
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	4622      	mov	r2, r4
 800be3a:	4b07      	ldr	r3, [pc, #28]	; (800be58 <_svfiprintf_r+0x1ec>)
 800be3c:	a904      	add	r1, sp, #16
 800be3e:	4640      	mov	r0, r8
 800be40:	f7fc fbce 	bl	80085e0 <_printf_i>
 800be44:	e7ea      	b.n	800be1c <_svfiprintf_r+0x1b0>
 800be46:	bf00      	nop
 800be48:	0800c824 	.word	0x0800c824
 800be4c:	0800c82a 	.word	0x0800c82a
 800be50:	0800c82e 	.word	0x0800c82e
 800be54:	08008089 	.word	0x08008089
 800be58:	0800bbb9 	.word	0x0800bbb9

0800be5c <__sfputc_r>:
 800be5c:	6893      	ldr	r3, [r2, #8]
 800be5e:	b410      	push	{r4}
 800be60:	3b01      	subs	r3, #1
 800be62:	2b00      	cmp	r3, #0
 800be64:	6093      	str	r3, [r2, #8]
 800be66:	da07      	bge.n	800be78 <__sfputc_r+0x1c>
 800be68:	6994      	ldr	r4, [r2, #24]
 800be6a:	42a3      	cmp	r3, r4
 800be6c:	db01      	blt.n	800be72 <__sfputc_r+0x16>
 800be6e:	290a      	cmp	r1, #10
 800be70:	d102      	bne.n	800be78 <__sfputc_r+0x1c>
 800be72:	bc10      	pop	{r4}
 800be74:	f7fd be16 	b.w	8009aa4 <__swbuf_r>
 800be78:	6813      	ldr	r3, [r2, #0]
 800be7a:	1c58      	adds	r0, r3, #1
 800be7c:	6010      	str	r0, [r2, #0]
 800be7e:	7019      	strb	r1, [r3, #0]
 800be80:	4608      	mov	r0, r1
 800be82:	bc10      	pop	{r4}
 800be84:	4770      	bx	lr

0800be86 <__sfputs_r>:
 800be86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be88:	4606      	mov	r6, r0
 800be8a:	460f      	mov	r7, r1
 800be8c:	4614      	mov	r4, r2
 800be8e:	18d5      	adds	r5, r2, r3
 800be90:	42ac      	cmp	r4, r5
 800be92:	d101      	bne.n	800be98 <__sfputs_r+0x12>
 800be94:	2000      	movs	r0, #0
 800be96:	e007      	b.n	800bea8 <__sfputs_r+0x22>
 800be98:	463a      	mov	r2, r7
 800be9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be9e:	4630      	mov	r0, r6
 800bea0:	f7ff ffdc 	bl	800be5c <__sfputc_r>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d1f3      	bne.n	800be90 <__sfputs_r+0xa>
 800bea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800beac <_vfiprintf_r>:
 800beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	460c      	mov	r4, r1
 800beb2:	b09d      	sub	sp, #116	; 0x74
 800beb4:	4617      	mov	r7, r2
 800beb6:	461d      	mov	r5, r3
 800beb8:	4606      	mov	r6, r0
 800beba:	b118      	cbz	r0, 800bec4 <_vfiprintf_r+0x18>
 800bebc:	6983      	ldr	r3, [r0, #24]
 800bebe:	b90b      	cbnz	r3, 800bec4 <_vfiprintf_r+0x18>
 800bec0:	f7fe fde2 	bl	800aa88 <__sinit>
 800bec4:	4b7c      	ldr	r3, [pc, #496]	; (800c0b8 <_vfiprintf_r+0x20c>)
 800bec6:	429c      	cmp	r4, r3
 800bec8:	d158      	bne.n	800bf7c <_vfiprintf_r+0xd0>
 800beca:	6874      	ldr	r4, [r6, #4]
 800becc:	89a3      	ldrh	r3, [r4, #12]
 800bece:	0718      	lsls	r0, r3, #28
 800bed0:	d55e      	bpl.n	800bf90 <_vfiprintf_r+0xe4>
 800bed2:	6923      	ldr	r3, [r4, #16]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d05b      	beq.n	800bf90 <_vfiprintf_r+0xe4>
 800bed8:	2300      	movs	r3, #0
 800beda:	9309      	str	r3, [sp, #36]	; 0x24
 800bedc:	2320      	movs	r3, #32
 800bede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bee2:	2330      	movs	r3, #48	; 0x30
 800bee4:	f04f 0b01 	mov.w	fp, #1
 800bee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800beec:	9503      	str	r5, [sp, #12]
 800beee:	46b8      	mov	r8, r7
 800bef0:	4645      	mov	r5, r8
 800bef2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bef6:	b10b      	cbz	r3, 800befc <_vfiprintf_r+0x50>
 800bef8:	2b25      	cmp	r3, #37	; 0x25
 800befa:	d154      	bne.n	800bfa6 <_vfiprintf_r+0xfa>
 800befc:	ebb8 0a07 	subs.w	sl, r8, r7
 800bf00:	d00b      	beq.n	800bf1a <_vfiprintf_r+0x6e>
 800bf02:	4653      	mov	r3, sl
 800bf04:	463a      	mov	r2, r7
 800bf06:	4621      	mov	r1, r4
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f7ff ffbc 	bl	800be86 <__sfputs_r>
 800bf0e:	3001      	adds	r0, #1
 800bf10:	f000 80c2 	beq.w	800c098 <_vfiprintf_r+0x1ec>
 800bf14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf16:	4453      	add	r3, sl
 800bf18:	9309      	str	r3, [sp, #36]	; 0x24
 800bf1a:	f898 3000 	ldrb.w	r3, [r8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f000 80ba 	beq.w	800c098 <_vfiprintf_r+0x1ec>
 800bf24:	2300      	movs	r3, #0
 800bf26:	f04f 32ff 	mov.w	r2, #4294967295
 800bf2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf2e:	9304      	str	r3, [sp, #16]
 800bf30:	9307      	str	r3, [sp, #28]
 800bf32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf36:	931a      	str	r3, [sp, #104]	; 0x68
 800bf38:	46a8      	mov	r8, r5
 800bf3a:	2205      	movs	r2, #5
 800bf3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bf40:	485e      	ldr	r0, [pc, #376]	; (800c0bc <_vfiprintf_r+0x210>)
 800bf42:	f7ff f9e5 	bl	800b310 <memchr>
 800bf46:	9b04      	ldr	r3, [sp, #16]
 800bf48:	bb78      	cbnz	r0, 800bfaa <_vfiprintf_r+0xfe>
 800bf4a:	06d9      	lsls	r1, r3, #27
 800bf4c:	bf44      	itt	mi
 800bf4e:	2220      	movmi	r2, #32
 800bf50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf54:	071a      	lsls	r2, r3, #28
 800bf56:	bf44      	itt	mi
 800bf58:	222b      	movmi	r2, #43	; 0x2b
 800bf5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf5e:	782a      	ldrb	r2, [r5, #0]
 800bf60:	2a2a      	cmp	r2, #42	; 0x2a
 800bf62:	d02a      	beq.n	800bfba <_vfiprintf_r+0x10e>
 800bf64:	46a8      	mov	r8, r5
 800bf66:	2000      	movs	r0, #0
 800bf68:	250a      	movs	r5, #10
 800bf6a:	9a07      	ldr	r2, [sp, #28]
 800bf6c:	4641      	mov	r1, r8
 800bf6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf72:	3b30      	subs	r3, #48	; 0x30
 800bf74:	2b09      	cmp	r3, #9
 800bf76:	d969      	bls.n	800c04c <_vfiprintf_r+0x1a0>
 800bf78:	b360      	cbz	r0, 800bfd4 <_vfiprintf_r+0x128>
 800bf7a:	e024      	b.n	800bfc6 <_vfiprintf_r+0x11a>
 800bf7c:	4b50      	ldr	r3, [pc, #320]	; (800c0c0 <_vfiprintf_r+0x214>)
 800bf7e:	429c      	cmp	r4, r3
 800bf80:	d101      	bne.n	800bf86 <_vfiprintf_r+0xda>
 800bf82:	68b4      	ldr	r4, [r6, #8]
 800bf84:	e7a2      	b.n	800becc <_vfiprintf_r+0x20>
 800bf86:	4b4f      	ldr	r3, [pc, #316]	; (800c0c4 <_vfiprintf_r+0x218>)
 800bf88:	429c      	cmp	r4, r3
 800bf8a:	bf08      	it	eq
 800bf8c:	68f4      	ldreq	r4, [r6, #12]
 800bf8e:	e79d      	b.n	800becc <_vfiprintf_r+0x20>
 800bf90:	4621      	mov	r1, r4
 800bf92:	4630      	mov	r0, r6
 800bf94:	f7fd fdd8 	bl	8009b48 <__swsetup_r>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d09d      	beq.n	800bed8 <_vfiprintf_r+0x2c>
 800bf9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa0:	b01d      	add	sp, #116	; 0x74
 800bfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa6:	46a8      	mov	r8, r5
 800bfa8:	e7a2      	b.n	800bef0 <_vfiprintf_r+0x44>
 800bfaa:	4a44      	ldr	r2, [pc, #272]	; (800c0bc <_vfiprintf_r+0x210>)
 800bfac:	4645      	mov	r5, r8
 800bfae:	1a80      	subs	r0, r0, r2
 800bfb0:	fa0b f000 	lsl.w	r0, fp, r0
 800bfb4:	4318      	orrs	r0, r3
 800bfb6:	9004      	str	r0, [sp, #16]
 800bfb8:	e7be      	b.n	800bf38 <_vfiprintf_r+0x8c>
 800bfba:	9a03      	ldr	r2, [sp, #12]
 800bfbc:	1d11      	adds	r1, r2, #4
 800bfbe:	6812      	ldr	r2, [r2, #0]
 800bfc0:	9103      	str	r1, [sp, #12]
 800bfc2:	2a00      	cmp	r2, #0
 800bfc4:	db01      	blt.n	800bfca <_vfiprintf_r+0x11e>
 800bfc6:	9207      	str	r2, [sp, #28]
 800bfc8:	e004      	b.n	800bfd4 <_vfiprintf_r+0x128>
 800bfca:	4252      	negs	r2, r2
 800bfcc:	f043 0302 	orr.w	r3, r3, #2
 800bfd0:	9207      	str	r2, [sp, #28]
 800bfd2:	9304      	str	r3, [sp, #16]
 800bfd4:	f898 3000 	ldrb.w	r3, [r8]
 800bfd8:	2b2e      	cmp	r3, #46	; 0x2e
 800bfda:	d10e      	bne.n	800bffa <_vfiprintf_r+0x14e>
 800bfdc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bfe0:	2b2a      	cmp	r3, #42	; 0x2a
 800bfe2:	d138      	bne.n	800c056 <_vfiprintf_r+0x1aa>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	f108 0802 	add.w	r8, r8, #2
 800bfea:	1d1a      	adds	r2, r3, #4
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	9203      	str	r2, [sp, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	bfb8      	it	lt
 800bff4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bff8:	9305      	str	r3, [sp, #20]
 800bffa:	4d33      	ldr	r5, [pc, #204]	; (800c0c8 <_vfiprintf_r+0x21c>)
 800bffc:	2203      	movs	r2, #3
 800bffe:	f898 1000 	ldrb.w	r1, [r8]
 800c002:	4628      	mov	r0, r5
 800c004:	f7ff f984 	bl	800b310 <memchr>
 800c008:	b140      	cbz	r0, 800c01c <_vfiprintf_r+0x170>
 800c00a:	2340      	movs	r3, #64	; 0x40
 800c00c:	1b40      	subs	r0, r0, r5
 800c00e:	fa03 f000 	lsl.w	r0, r3, r0
 800c012:	9b04      	ldr	r3, [sp, #16]
 800c014:	f108 0801 	add.w	r8, r8, #1
 800c018:	4303      	orrs	r3, r0
 800c01a:	9304      	str	r3, [sp, #16]
 800c01c:	f898 1000 	ldrb.w	r1, [r8]
 800c020:	2206      	movs	r2, #6
 800c022:	482a      	ldr	r0, [pc, #168]	; (800c0cc <_vfiprintf_r+0x220>)
 800c024:	f108 0701 	add.w	r7, r8, #1
 800c028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c02c:	f7ff f970 	bl	800b310 <memchr>
 800c030:	2800      	cmp	r0, #0
 800c032:	d037      	beq.n	800c0a4 <_vfiprintf_r+0x1f8>
 800c034:	4b26      	ldr	r3, [pc, #152]	; (800c0d0 <_vfiprintf_r+0x224>)
 800c036:	bb1b      	cbnz	r3, 800c080 <_vfiprintf_r+0x1d4>
 800c038:	9b03      	ldr	r3, [sp, #12]
 800c03a:	3307      	adds	r3, #7
 800c03c:	f023 0307 	bic.w	r3, r3, #7
 800c040:	3308      	adds	r3, #8
 800c042:	9303      	str	r3, [sp, #12]
 800c044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c046:	444b      	add	r3, r9
 800c048:	9309      	str	r3, [sp, #36]	; 0x24
 800c04a:	e750      	b.n	800beee <_vfiprintf_r+0x42>
 800c04c:	fb05 3202 	mla	r2, r5, r2, r3
 800c050:	2001      	movs	r0, #1
 800c052:	4688      	mov	r8, r1
 800c054:	e78a      	b.n	800bf6c <_vfiprintf_r+0xc0>
 800c056:	2300      	movs	r3, #0
 800c058:	250a      	movs	r5, #10
 800c05a:	4619      	mov	r1, r3
 800c05c:	f108 0801 	add.w	r8, r8, #1
 800c060:	9305      	str	r3, [sp, #20]
 800c062:	4640      	mov	r0, r8
 800c064:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c068:	3a30      	subs	r2, #48	; 0x30
 800c06a:	2a09      	cmp	r2, #9
 800c06c:	d903      	bls.n	800c076 <_vfiprintf_r+0x1ca>
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d0c3      	beq.n	800bffa <_vfiprintf_r+0x14e>
 800c072:	9105      	str	r1, [sp, #20]
 800c074:	e7c1      	b.n	800bffa <_vfiprintf_r+0x14e>
 800c076:	fb05 2101 	mla	r1, r5, r1, r2
 800c07a:	2301      	movs	r3, #1
 800c07c:	4680      	mov	r8, r0
 800c07e:	e7f0      	b.n	800c062 <_vfiprintf_r+0x1b6>
 800c080:	ab03      	add	r3, sp, #12
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	4622      	mov	r2, r4
 800c086:	4b13      	ldr	r3, [pc, #76]	; (800c0d4 <_vfiprintf_r+0x228>)
 800c088:	a904      	add	r1, sp, #16
 800c08a:	4630      	mov	r0, r6
 800c08c:	f7fb fffc 	bl	8008088 <_printf_float>
 800c090:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c094:	4681      	mov	r9, r0
 800c096:	d1d5      	bne.n	800c044 <_vfiprintf_r+0x198>
 800c098:	89a3      	ldrh	r3, [r4, #12]
 800c09a:	065b      	lsls	r3, r3, #25
 800c09c:	f53f af7e 	bmi.w	800bf9c <_vfiprintf_r+0xf0>
 800c0a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0a2:	e77d      	b.n	800bfa0 <_vfiprintf_r+0xf4>
 800c0a4:	ab03      	add	r3, sp, #12
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	4b0a      	ldr	r3, [pc, #40]	; (800c0d4 <_vfiprintf_r+0x228>)
 800c0ac:	a904      	add	r1, sp, #16
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f7fc fa96 	bl	80085e0 <_printf_i>
 800c0b4:	e7ec      	b.n	800c090 <_vfiprintf_r+0x1e4>
 800c0b6:	bf00      	nop
 800c0b8:	0800c6d8 	.word	0x0800c6d8
 800c0bc:	0800c824 	.word	0x0800c824
 800c0c0:	0800c6f8 	.word	0x0800c6f8
 800c0c4:	0800c6b8 	.word	0x0800c6b8
 800c0c8:	0800c82a 	.word	0x0800c82a
 800c0cc:	0800c82e 	.word	0x0800c82e
 800c0d0:	08008089 	.word	0x08008089
 800c0d4:	0800be87 	.word	0x0800be87

0800c0d8 <__sread>:
 800c0d8:	b510      	push	{r4, lr}
 800c0da:	460c      	mov	r4, r1
 800c0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e0:	f000 f8d8 	bl	800c294 <_read_r>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	bfab      	itete	ge
 800c0e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0ea:	89a3      	ldrhlt	r3, [r4, #12]
 800c0ec:	181b      	addge	r3, r3, r0
 800c0ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0f2:	bfac      	ite	ge
 800c0f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0f6:	81a3      	strhlt	r3, [r4, #12]
 800c0f8:	bd10      	pop	{r4, pc}

0800c0fa <__swrite>:
 800c0fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0fe:	461f      	mov	r7, r3
 800c100:	898b      	ldrh	r3, [r1, #12]
 800c102:	4605      	mov	r5, r0
 800c104:	05db      	lsls	r3, r3, #23
 800c106:	460c      	mov	r4, r1
 800c108:	4616      	mov	r6, r2
 800c10a:	d505      	bpl.n	800c118 <__swrite+0x1e>
 800c10c:	2302      	movs	r3, #2
 800c10e:	2200      	movs	r2, #0
 800c110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c114:	f000 f886 	bl	800c224 <_lseek_r>
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	4632      	mov	r2, r6
 800c11c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c120:	81a3      	strh	r3, [r4, #12]
 800c122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c126:	463b      	mov	r3, r7
 800c128:	4628      	mov	r0, r5
 800c12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c12e:	f000 b835 	b.w	800c19c <_write_r>

0800c132 <__sseek>:
 800c132:	b510      	push	{r4, lr}
 800c134:	460c      	mov	r4, r1
 800c136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c13a:	f000 f873 	bl	800c224 <_lseek_r>
 800c13e:	1c43      	adds	r3, r0, #1
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	bf15      	itete	ne
 800c144:	6560      	strne	r0, [r4, #84]	; 0x54
 800c146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c14a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c14e:	81a3      	strheq	r3, [r4, #12]
 800c150:	bf18      	it	ne
 800c152:	81a3      	strhne	r3, [r4, #12]
 800c154:	bd10      	pop	{r4, pc}

0800c156 <__sclose>:
 800c156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c15a:	f000 b831 	b.w	800c1c0 <_close_r>

0800c15e <strncmp>:
 800c15e:	b510      	push	{r4, lr}
 800c160:	b16a      	cbz	r2, 800c17e <strncmp+0x20>
 800c162:	3901      	subs	r1, #1
 800c164:	1884      	adds	r4, r0, r2
 800c166:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c16a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c16e:	4293      	cmp	r3, r2
 800c170:	d103      	bne.n	800c17a <strncmp+0x1c>
 800c172:	42a0      	cmp	r0, r4
 800c174:	d001      	beq.n	800c17a <strncmp+0x1c>
 800c176:	2b00      	cmp	r3, #0
 800c178:	d1f5      	bne.n	800c166 <strncmp+0x8>
 800c17a:	1a98      	subs	r0, r3, r2
 800c17c:	bd10      	pop	{r4, pc}
 800c17e:	4610      	mov	r0, r2
 800c180:	e7fc      	b.n	800c17c <strncmp+0x1e>

0800c182 <__ascii_wctomb>:
 800c182:	b149      	cbz	r1, 800c198 <__ascii_wctomb+0x16>
 800c184:	2aff      	cmp	r2, #255	; 0xff
 800c186:	bf8b      	itete	hi
 800c188:	238a      	movhi	r3, #138	; 0x8a
 800c18a:	700a      	strbls	r2, [r1, #0]
 800c18c:	6003      	strhi	r3, [r0, #0]
 800c18e:	2001      	movls	r0, #1
 800c190:	bf88      	it	hi
 800c192:	f04f 30ff 	movhi.w	r0, #4294967295
 800c196:	4770      	bx	lr
 800c198:	4608      	mov	r0, r1
 800c19a:	4770      	bx	lr

0800c19c <_write_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	4605      	mov	r5, r0
 800c1a0:	4608      	mov	r0, r1
 800c1a2:	4611      	mov	r1, r2
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4c05      	ldr	r4, [pc, #20]	; (800c1bc <_write_r+0x20>)
 800c1a8:	6022      	str	r2, [r4, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	f7fb fba2 	bl	80078f4 <_write>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	d102      	bne.n	800c1ba <_write_r+0x1e>
 800c1b4:	6823      	ldr	r3, [r4, #0]
 800c1b6:	b103      	cbz	r3, 800c1ba <_write_r+0x1e>
 800c1b8:	602b      	str	r3, [r5, #0]
 800c1ba:	bd38      	pop	{r3, r4, r5, pc}
 800c1bc:	20002d14 	.word	0x20002d14

0800c1c0 <_close_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4c05      	ldr	r4, [pc, #20]	; (800c1dc <_close_r+0x1c>)
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	6023      	str	r3, [r4, #0]
 800c1cc:	f000 f87c 	bl	800c2c8 <_close>
 800c1d0:	1c43      	adds	r3, r0, #1
 800c1d2:	d102      	bne.n	800c1da <_close_r+0x1a>
 800c1d4:	6823      	ldr	r3, [r4, #0]
 800c1d6:	b103      	cbz	r3, 800c1da <_close_r+0x1a>
 800c1d8:	602b      	str	r3, [r5, #0]
 800c1da:	bd38      	pop	{r3, r4, r5, pc}
 800c1dc:	20002d14 	.word	0x20002d14

0800c1e0 <_fstat_r>:
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4c06      	ldr	r4, [pc, #24]	; (800c200 <_fstat_r+0x20>)
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	4608      	mov	r0, r1
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	6023      	str	r3, [r4, #0]
 800c1ee:	f000 f873 	bl	800c2d8 <_fstat>
 800c1f2:	1c43      	adds	r3, r0, #1
 800c1f4:	d102      	bne.n	800c1fc <_fstat_r+0x1c>
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	b103      	cbz	r3, 800c1fc <_fstat_r+0x1c>
 800c1fa:	602b      	str	r3, [r5, #0]
 800c1fc:	bd38      	pop	{r3, r4, r5, pc}
 800c1fe:	bf00      	nop
 800c200:	20002d14 	.word	0x20002d14

0800c204 <_isatty_r>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	2300      	movs	r3, #0
 800c208:	4c05      	ldr	r4, [pc, #20]	; (800c220 <_isatty_r+0x1c>)
 800c20a:	4605      	mov	r5, r0
 800c20c:	4608      	mov	r0, r1
 800c20e:	6023      	str	r3, [r4, #0]
 800c210:	f000 f86a 	bl	800c2e8 <_isatty>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	d102      	bne.n	800c21e <_isatty_r+0x1a>
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	b103      	cbz	r3, 800c21e <_isatty_r+0x1a>
 800c21c:	602b      	str	r3, [r5, #0]
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	20002d14 	.word	0x20002d14

0800c224 <_lseek_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4605      	mov	r5, r0
 800c228:	4608      	mov	r0, r1
 800c22a:	4611      	mov	r1, r2
 800c22c:	2200      	movs	r2, #0
 800c22e:	4c05      	ldr	r4, [pc, #20]	; (800c244 <_lseek_r+0x20>)
 800c230:	6022      	str	r2, [r4, #0]
 800c232:	461a      	mov	r2, r3
 800c234:	f000 f860 	bl	800c2f8 <_lseek>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_lseek_r+0x1e>
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_lseek_r+0x1e>
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	20002d14 	.word	0x20002d14

0800c248 <_realloc_r>:
 800c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24a:	4607      	mov	r7, r0
 800c24c:	4614      	mov	r4, r2
 800c24e:	460e      	mov	r6, r1
 800c250:	b921      	cbnz	r1, 800c25c <_realloc_r+0x14>
 800c252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c256:	4611      	mov	r1, r2
 800c258:	f7fb be2a 	b.w	8007eb0 <_malloc_r>
 800c25c:	b922      	cbnz	r2, 800c268 <_realloc_r+0x20>
 800c25e:	f7ff fc5f 	bl	800bb20 <_free_r>
 800c262:	4625      	mov	r5, r4
 800c264:	4628      	mov	r0, r5
 800c266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c268:	f000 f826 	bl	800c2b8 <_malloc_usable_size_r>
 800c26c:	42a0      	cmp	r0, r4
 800c26e:	d20f      	bcs.n	800c290 <_realloc_r+0x48>
 800c270:	4621      	mov	r1, r4
 800c272:	4638      	mov	r0, r7
 800c274:	f7fb fe1c 	bl	8007eb0 <_malloc_r>
 800c278:	4605      	mov	r5, r0
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d0f2      	beq.n	800c264 <_realloc_r+0x1c>
 800c27e:	4631      	mov	r1, r6
 800c280:	4622      	mov	r2, r4
 800c282:	f7fb fddb 	bl	8007e3c <memcpy>
 800c286:	4631      	mov	r1, r6
 800c288:	4638      	mov	r0, r7
 800c28a:	f7ff fc49 	bl	800bb20 <_free_r>
 800c28e:	e7e9      	b.n	800c264 <_realloc_r+0x1c>
 800c290:	4635      	mov	r5, r6
 800c292:	e7e7      	b.n	800c264 <_realloc_r+0x1c>

0800c294 <_read_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	4605      	mov	r5, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	4611      	mov	r1, r2
 800c29c:	2200      	movs	r2, #0
 800c29e:	4c05      	ldr	r4, [pc, #20]	; (800c2b4 <_read_r+0x20>)
 800c2a0:	6022      	str	r2, [r4, #0]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	f000 f830 	bl	800c308 <_read>
 800c2a8:	1c43      	adds	r3, r0, #1
 800c2aa:	d102      	bne.n	800c2b2 <_read_r+0x1e>
 800c2ac:	6823      	ldr	r3, [r4, #0]
 800c2ae:	b103      	cbz	r3, 800c2b2 <_read_r+0x1e>
 800c2b0:	602b      	str	r3, [r5, #0]
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	20002d14 	.word	0x20002d14

0800c2b8 <_malloc_usable_size_r>:
 800c2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2bc:	1f18      	subs	r0, r3, #4
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	bfbc      	itt	lt
 800c2c2:	580b      	ldrlt	r3, [r1, r0]
 800c2c4:	18c0      	addlt	r0, r0, r3
 800c2c6:	4770      	bx	lr

0800c2c8 <_close>:
 800c2c8:	2258      	movs	r2, #88	; 0x58
 800c2ca:	4b02      	ldr	r3, [pc, #8]	; (800c2d4 <_close+0xc>)
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	601a      	str	r2, [r3, #0]
 800c2d2:	4770      	bx	lr
 800c2d4:	20002d14 	.word	0x20002d14

0800c2d8 <_fstat>:
 800c2d8:	2258      	movs	r2, #88	; 0x58
 800c2da:	4b02      	ldr	r3, [pc, #8]	; (800c2e4 <_fstat+0xc>)
 800c2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	4770      	bx	lr
 800c2e4:	20002d14 	.word	0x20002d14

0800c2e8 <_isatty>:
 800c2e8:	2258      	movs	r2, #88	; 0x58
 800c2ea:	4b02      	ldr	r3, [pc, #8]	; (800c2f4 <_isatty+0xc>)
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	601a      	str	r2, [r3, #0]
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	20002d14 	.word	0x20002d14

0800c2f8 <_lseek>:
 800c2f8:	2258      	movs	r2, #88	; 0x58
 800c2fa:	4b02      	ldr	r3, [pc, #8]	; (800c304 <_lseek+0xc>)
 800c2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	4770      	bx	lr
 800c304:	20002d14 	.word	0x20002d14

0800c308 <_read>:
 800c308:	2258      	movs	r2, #88	; 0x58
 800c30a:	4b02      	ldr	r3, [pc, #8]	; (800c314 <_read+0xc>)
 800c30c:	f04f 30ff 	mov.w	r0, #4294967295
 800c310:	601a      	str	r2, [r3, #0]
 800c312:	4770      	bx	lr
 800c314:	20002d14 	.word	0x20002d14

0800c318 <_sbrk>:
 800c318:	4b04      	ldr	r3, [pc, #16]	; (800c32c <_sbrk+0x14>)
 800c31a:	4602      	mov	r2, r0
 800c31c:	6819      	ldr	r1, [r3, #0]
 800c31e:	b909      	cbnz	r1, 800c324 <_sbrk+0xc>
 800c320:	4903      	ldr	r1, [pc, #12]	; (800c330 <_sbrk+0x18>)
 800c322:	6019      	str	r1, [r3, #0]
 800c324:	6818      	ldr	r0, [r3, #0]
 800c326:	4402      	add	r2, r0
 800c328:	601a      	str	r2, [r3, #0]
 800c32a:	4770      	bx	lr
 800c32c:	20000a58 	.word	0x20000a58
 800c330:	20002d18 	.word	0x20002d18

0800c334 <_init>:
 800c334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c336:	bf00      	nop
 800c338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c33a:	bc08      	pop	{r3}
 800c33c:	469e      	mov	lr, r3
 800c33e:	4770      	bx	lr

0800c340 <_fini>:
 800c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c342:	bf00      	nop
 800c344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c346:	bc08      	pop	{r3}
 800c348:	469e      	mov	lr, r3
 800c34a:	4770      	bx	lr
